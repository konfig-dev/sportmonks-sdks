/*
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sportmonks.Net.Client;
using Sportmonks.Net.Model;

namespace Sportmonks.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOddsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// By ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsBookmakerByIdResponse</returns>
        OddsBookmakerByIdResponse BookmakerById(int bookmakerId, string version = default(string), int operationIndex = 0);

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsBookmakerByIdResponse</returns>
        ApiResponse<OddsBookmakerByIdResponse> BookmakerByIdWithHttpInfo(int bookmakerId, string version = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsBookmakersAllResponse</returns>
        OddsBookmakersAllResponse BookmakersAll(string version = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsBookmakersAllResponse</returns>
        ApiResponse<OddsBookmakersAllResponse> BookmakersAllWithHttpInfo(string version = default(string), int operationIndex = 0);
        /// <summary>
        /// By Fixture ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the bookmaker you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsBookmakersByFixtureIdResponse</returns>
        OddsBookmakersByFixtureIdResponse BookmakersByFixtureId(int fixtureId, string version = default(string), int operationIndex = 0);

        /// <summary>
        /// By Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the bookmaker you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsBookmakersByFixtureIdResponse</returns>
        ApiResponse<OddsBookmakersByFixtureIdResponse> BookmakersByFixtureIdWithHttpInfo(int fixtureId, string version = default(string), int operationIndex = 0);
        /// <summary>
        /// Mapping by Fixture ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The fixtureId you want to retrieve the bookmaker mapping from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsBookmakersMappingByFixtureIdResponse</returns>
        OddsBookmakersMappingByFixtureIdResponse BookmakersMappingByFixtureId(int fixtureId, string version = default(string), int operationIndex = 0);

        /// <summary>
        /// Mapping by Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The fixtureId you want to retrieve the bookmaker mapping from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsBookmakersMappingByFixtureIdResponse</returns>
        ApiResponse<OddsBookmakersMappingByFixtureIdResponse> BookmakersMappingByFixtureIdWithHttpInfo(int fixtureId, string version = default(string), int operationIndex = 0);
        /// <summary>
        /// Search
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsBookmakersSearchResponse</returns>
        OddsBookmakersSearchResponse BookmakersSearch(string name, string version = default(string), int operationIndex = 0);

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsBookmakersSearchResponse</returns>
        ApiResponse<OddsBookmakersSearchResponse> BookmakersSearchWithHttpInfo(string name, string version = default(string), int operationIndex = 0);
        /// <summary>
        /// Upcoming Fixtures by Market ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">The ID of the market you want to retrieve upcoming fixtures from.</param>
        /// <param name="version">The sport you want to retrieve upcoming fixtures from. (optional)</param>
        /// <param name="sport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsFixturesUpcomingByMarketIdResponse</returns>
        OddsFixturesUpcomingByMarketIdResponse FixturesUpcomingByMarketId(int marketId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Upcoming Fixtures by Market ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">The ID of the market you want to retrieve upcoming fixtures from.</param>
        /// <param name="version">The sport you want to retrieve upcoming fixtures from. (optional)</param>
        /// <param name="sport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsFixturesUpcomingByMarketIdResponse</returns>
        ApiResponse<OddsFixturesUpcomingByMarketIdResponse> FixturesUpcomingByMarketIdWithHttpInfo(int marketId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">The ID of the market you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsMarketByIdResponse</returns>
        OddsMarketByIdResponse MarketById(int marketId, string version = default(string), int operationIndex = 0);

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">The ID of the market you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsMarketByIdResponse</returns>
        ApiResponse<OddsMarketByIdResponse> MarketByIdWithHttpInfo(int marketId, string version = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsMarketsAllResponse</returns>
        OddsMarketsAllResponse MarketsAll(string version = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsMarketsAllResponse</returns>
        ApiResponse<OddsMarketsAllResponse> MarketsAllWithHttpInfo(string version = default(string), int operationIndex = 0);
        /// <summary>
        /// Search
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsMarketsSearchResponse</returns>
        OddsMarketsSearchResponse MarketsSearch(string name, string version = default(string), int operationIndex = 0);

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsMarketsSearchResponse</returns>
        ApiResponse<OddsMarketsSearchResponse> MarketsSearchWithHttpInfo(string name, string version = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOddsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsBookmakerByIdResponse</returns>
        System.Threading.Tasks.Task<OddsBookmakerByIdResponse> BookmakerByIdAsync(int bookmakerId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsBookmakerByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OddsBookmakerByIdResponse>> BookmakerByIdWithHttpInfoAsync(int bookmakerId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsBookmakersAllResponse</returns>
        System.Threading.Tasks.Task<OddsBookmakersAllResponse> BookmakersAllAsync(string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsBookmakersAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OddsBookmakersAllResponse>> BookmakersAllWithHttpInfoAsync(string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the bookmaker you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsBookmakersByFixtureIdResponse</returns>
        System.Threading.Tasks.Task<OddsBookmakersByFixtureIdResponse> BookmakersByFixtureIdAsync(int fixtureId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the bookmaker you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsBookmakersByFixtureIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OddsBookmakersByFixtureIdResponse>> BookmakersByFixtureIdWithHttpInfoAsync(int fixtureId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mapping by Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The fixtureId you want to retrieve the bookmaker mapping from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsBookmakersMappingByFixtureIdResponse</returns>
        System.Threading.Tasks.Task<OddsBookmakersMappingByFixtureIdResponse> BookmakersMappingByFixtureIdAsync(int fixtureId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mapping by Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The fixtureId you want to retrieve the bookmaker mapping from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsBookmakersMappingByFixtureIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OddsBookmakersMappingByFixtureIdResponse>> BookmakersMappingByFixtureIdWithHttpInfoAsync(int fixtureId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsBookmakersSearchResponse</returns>
        System.Threading.Tasks.Task<OddsBookmakersSearchResponse> BookmakersSearchAsync(string name, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsBookmakersSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OddsBookmakersSearchResponse>> BookmakersSearchWithHttpInfoAsync(string name, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upcoming Fixtures by Market ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">The ID of the market you want to retrieve upcoming fixtures from.</param>
        /// <param name="version">The sport you want to retrieve upcoming fixtures from. (optional)</param>
        /// <param name="sport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsFixturesUpcomingByMarketIdResponse</returns>
        System.Threading.Tasks.Task<OddsFixturesUpcomingByMarketIdResponse> FixturesUpcomingByMarketIdAsync(int marketId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upcoming Fixtures by Market ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">The ID of the market you want to retrieve upcoming fixtures from.</param>
        /// <param name="version">The sport you want to retrieve upcoming fixtures from. (optional)</param>
        /// <param name="sport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsFixturesUpcomingByMarketIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OddsFixturesUpcomingByMarketIdResponse>> FixturesUpcomingByMarketIdWithHttpInfoAsync(int marketId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">The ID of the market you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsMarketByIdResponse</returns>
        System.Threading.Tasks.Task<OddsMarketByIdResponse> MarketByIdAsync(int marketId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">The ID of the market you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsMarketByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OddsMarketByIdResponse>> MarketByIdWithHttpInfoAsync(int marketId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsMarketsAllResponse</returns>
        System.Threading.Tasks.Task<OddsMarketsAllResponse> MarketsAllAsync(string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsMarketsAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OddsMarketsAllResponse>> MarketsAllWithHttpInfoAsync(string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsMarketsSearchResponse</returns>
        System.Threading.Tasks.Task<OddsMarketsSearchResponse> MarketsSearchAsync(string name, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsMarketsSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OddsMarketsSearchResponse>> MarketsSearchWithHttpInfoAsync(string name, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOddsApi : IOddsApiSync, IOddsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OddsApi : IOddsApi
    {
        private Sportmonks.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OddsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OddsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OddsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OddsApi(string basePath)
        {
            this.Configuration = Sportmonks.Net.Client.Configuration.MergeConfigurations(
                Sportmonks.Net.Client.GlobalConfiguration.Instance,
                new Sportmonks.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Sportmonks.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Sportmonks.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Sportmonks.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OddsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OddsApi(Sportmonks.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sportmonks.Net.Client.Configuration.MergeConfigurations(
                Sportmonks.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Sportmonks.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Sportmonks.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Sportmonks.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OddsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OddsApi(Sportmonks.Net.Client.ISynchronousClient client, Sportmonks.Net.Client.IAsynchronousClient asyncClient, Sportmonks.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sportmonks.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Sportmonks.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Sportmonks.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Sportmonks.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sportmonks.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsBookmakerByIdResponse</returns>
        public OddsBookmakerByIdResponse BookmakerById(int bookmakerId, string version = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<OddsBookmakerByIdResponse> localVarResponse = BookmakerByIdWithHttpInfo(bookmakerId, version);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsBookmakerByIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<OddsBookmakerByIdResponse> BookmakerByIdWithHttpInfo(int bookmakerId, string version = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("bookmakerId", Sportmonks.Net.Client.ClientUtils.ParameterToString(bookmakerId)); // path parameter

            localVarRequestOptions.Operation = "OddsApi.BookmakerById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OddsBookmakerByIdResponse>("/{version}/odds/bookmakers/{bookmakerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BookmakerById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsBookmakerByIdResponse</returns>
        public async System.Threading.Tasks.Task<OddsBookmakerByIdResponse> BookmakerByIdAsync(int bookmakerId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<OddsBookmakerByIdResponse> localVarResponse = await BookmakerByIdWithHttpInfoAsync(bookmakerId, version, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsBookmakerByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<OddsBookmakerByIdResponse>> BookmakerByIdWithHttpInfoAsync(int bookmakerId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("bookmakerId", Sportmonks.Net.Client.ClientUtils.ParameterToString(bookmakerId)); // path parameter

            localVarRequestOptions.Operation = "OddsApi.BookmakerById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OddsBookmakerByIdResponse>("/{version}/odds/bookmakers/{bookmakerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BookmakerById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsBookmakersAllResponse</returns>
        public OddsBookmakersAllResponse BookmakersAll(string version = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<OddsBookmakersAllResponse> localVarResponse = BookmakersAllWithHttpInfo(version);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsBookmakersAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<OddsBookmakersAllResponse> BookmakersAllWithHttpInfo(string version = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }

            localVarRequestOptions.Operation = "OddsApi.BookmakersAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OddsBookmakersAllResponse>("/{version}/odds/bookmakers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BookmakersAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsBookmakersAllResponse</returns>
        public async System.Threading.Tasks.Task<OddsBookmakersAllResponse> BookmakersAllAsync(string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<OddsBookmakersAllResponse> localVarResponse = await BookmakersAllWithHttpInfoAsync(version, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsBookmakersAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<OddsBookmakersAllResponse>> BookmakersAllWithHttpInfoAsync(string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }

            localVarRequestOptions.Operation = "OddsApi.BookmakersAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OddsBookmakersAllResponse>("/{version}/odds/bookmakers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BookmakersAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the bookmaker you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsBookmakersByFixtureIdResponse</returns>
        public OddsBookmakersByFixtureIdResponse BookmakersByFixtureId(int fixtureId, string version = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<OddsBookmakersByFixtureIdResponse> localVarResponse = BookmakersByFixtureIdWithHttpInfo(fixtureId, version);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the bookmaker you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsBookmakersByFixtureIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<OddsBookmakersByFixtureIdResponse> BookmakersByFixtureIdWithHttpInfo(int fixtureId, string version = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "OddsApi.BookmakersByFixtureId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OddsBookmakersByFixtureIdResponse>("/{version}/odds/bookmakers/fixtures/{fixtureId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BookmakersByFixtureId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the bookmaker you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsBookmakersByFixtureIdResponse</returns>
        public async System.Threading.Tasks.Task<OddsBookmakersByFixtureIdResponse> BookmakersByFixtureIdAsync(int fixtureId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<OddsBookmakersByFixtureIdResponse> localVarResponse = await BookmakersByFixtureIdWithHttpInfoAsync(fixtureId, version, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the bookmaker you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsBookmakersByFixtureIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<OddsBookmakersByFixtureIdResponse>> BookmakersByFixtureIdWithHttpInfoAsync(int fixtureId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "OddsApi.BookmakersByFixtureId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OddsBookmakersByFixtureIdResponse>("/{version}/odds/bookmakers/fixtures/{fixtureId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BookmakersByFixtureId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mapping by Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The fixtureId you want to retrieve the bookmaker mapping from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsBookmakersMappingByFixtureIdResponse</returns>
        public OddsBookmakersMappingByFixtureIdResponse BookmakersMappingByFixtureId(int fixtureId, string version = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<OddsBookmakersMappingByFixtureIdResponse> localVarResponse = BookmakersMappingByFixtureIdWithHttpInfo(fixtureId, version);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mapping by Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The fixtureId you want to retrieve the bookmaker mapping from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsBookmakersMappingByFixtureIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<OddsBookmakersMappingByFixtureIdResponse> BookmakersMappingByFixtureIdWithHttpInfo(int fixtureId, string version = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "OddsApi.BookmakersMappingByFixtureId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OddsBookmakersMappingByFixtureIdResponse>("/{version}/odds/bookmakers/fixtures/{fixtureId}/mapping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BookmakersMappingByFixtureId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mapping by Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The fixtureId you want to retrieve the bookmaker mapping from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsBookmakersMappingByFixtureIdResponse</returns>
        public async System.Threading.Tasks.Task<OddsBookmakersMappingByFixtureIdResponse> BookmakersMappingByFixtureIdAsync(int fixtureId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<OddsBookmakersMappingByFixtureIdResponse> localVarResponse = await BookmakersMappingByFixtureIdWithHttpInfoAsync(fixtureId, version, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mapping by Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The fixtureId you want to retrieve the bookmaker mapping from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsBookmakersMappingByFixtureIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<OddsBookmakersMappingByFixtureIdResponse>> BookmakersMappingByFixtureIdWithHttpInfoAsync(int fixtureId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "OddsApi.BookmakersMappingByFixtureId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OddsBookmakersMappingByFixtureIdResponse>("/{version}/odds/bookmakers/fixtures/{fixtureId}/mapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BookmakersMappingByFixtureId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsBookmakersSearchResponse</returns>
        public OddsBookmakersSearchResponse BookmakersSearch(string name, string version = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<OddsBookmakersSearchResponse> localVarResponse = BookmakersSearchWithHttpInfo(name, version);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsBookmakersSearchResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<OddsBookmakersSearchResponse> BookmakersSearchWithHttpInfo(string name, string version = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling OddsApi->BookmakersSearch");
            }

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "OddsApi.BookmakersSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OddsBookmakersSearchResponse>("/{version}/odds/bookmakers/search/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BookmakersSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsBookmakersSearchResponse</returns>
        public async System.Threading.Tasks.Task<OddsBookmakersSearchResponse> BookmakersSearchAsync(string name, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<OddsBookmakersSearchResponse> localVarResponse = await BookmakersSearchWithHttpInfoAsync(name, version, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsBookmakersSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<OddsBookmakersSearchResponse>> BookmakersSearchWithHttpInfoAsync(string name, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling OddsApi->BookmakersSearch");
            }


            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "OddsApi.BookmakersSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OddsBookmakersSearchResponse>("/{version}/odds/bookmakers/search/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BookmakersSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upcoming Fixtures by Market ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">The ID of the market you want to retrieve upcoming fixtures from.</param>
        /// <param name="version">The sport you want to retrieve upcoming fixtures from. (optional)</param>
        /// <param name="sport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsFixturesUpcomingByMarketIdResponse</returns>
        public OddsFixturesUpcomingByMarketIdResponse FixturesUpcomingByMarketId(int marketId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<OddsFixturesUpcomingByMarketIdResponse> localVarResponse = FixturesUpcomingByMarketIdWithHttpInfo(marketId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upcoming Fixtures by Market ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">The ID of the market you want to retrieve upcoming fixtures from.</param>
        /// <param name="version">The sport you want to retrieve upcoming fixtures from. (optional)</param>
        /// <param name="sport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsFixturesUpcomingByMarketIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<OddsFixturesUpcomingByMarketIdResponse> FixturesUpcomingByMarketIdWithHttpInfo(int marketId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("marketId", Sportmonks.Net.Client.ClientUtils.ParameterToString(marketId)); // path parameter

            localVarRequestOptions.Operation = "OddsApi.FixturesUpcomingByMarketId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OddsFixturesUpcomingByMarketIdResponse>("/{version}/{sport}/fixtures/upcoming/markets/{marketId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixturesUpcomingByMarketId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upcoming Fixtures by Market ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">The ID of the market you want to retrieve upcoming fixtures from.</param>
        /// <param name="version">The sport you want to retrieve upcoming fixtures from. (optional)</param>
        /// <param name="sport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsFixturesUpcomingByMarketIdResponse</returns>
        public async System.Threading.Tasks.Task<OddsFixturesUpcomingByMarketIdResponse> FixturesUpcomingByMarketIdAsync(int marketId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<OddsFixturesUpcomingByMarketIdResponse> localVarResponse = await FixturesUpcomingByMarketIdWithHttpInfoAsync(marketId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upcoming Fixtures by Market ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">The ID of the market you want to retrieve upcoming fixtures from.</param>
        /// <param name="version">The sport you want to retrieve upcoming fixtures from. (optional)</param>
        /// <param name="sport"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsFixturesUpcomingByMarketIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<OddsFixturesUpcomingByMarketIdResponse>> FixturesUpcomingByMarketIdWithHttpInfoAsync(int marketId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("marketId", Sportmonks.Net.Client.ClientUtils.ParameterToString(marketId)); // path parameter

            localVarRequestOptions.Operation = "OddsApi.FixturesUpcomingByMarketId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OddsFixturesUpcomingByMarketIdResponse>("/{version}/{sport}/fixtures/upcoming/markets/{marketId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixturesUpcomingByMarketId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">The ID of the market you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsMarketByIdResponse</returns>
        public OddsMarketByIdResponse MarketById(int marketId, string version = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<OddsMarketByIdResponse> localVarResponse = MarketByIdWithHttpInfo(marketId, version);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">The ID of the market you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsMarketByIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<OddsMarketByIdResponse> MarketByIdWithHttpInfo(int marketId, string version = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("marketId", Sportmonks.Net.Client.ClientUtils.ParameterToString(marketId)); // path parameter

            localVarRequestOptions.Operation = "OddsApi.MarketById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OddsMarketByIdResponse>("/{version}/odds/markets/{marketId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarketById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">The ID of the market you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsMarketByIdResponse</returns>
        public async System.Threading.Tasks.Task<OddsMarketByIdResponse> MarketByIdAsync(int marketId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<OddsMarketByIdResponse> localVarResponse = await MarketByIdWithHttpInfoAsync(marketId, version, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketId">The ID of the market you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsMarketByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<OddsMarketByIdResponse>> MarketByIdWithHttpInfoAsync(int marketId, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("marketId", Sportmonks.Net.Client.ClientUtils.ParameterToString(marketId)); // path parameter

            localVarRequestOptions.Operation = "OddsApi.MarketById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OddsMarketByIdResponse>("/{version}/odds/markets/{marketId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarketById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsMarketsAllResponse</returns>
        public OddsMarketsAllResponse MarketsAll(string version = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<OddsMarketsAllResponse> localVarResponse = MarketsAllWithHttpInfo(version);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsMarketsAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<OddsMarketsAllResponse> MarketsAllWithHttpInfo(string version = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }

            localVarRequestOptions.Operation = "OddsApi.MarketsAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OddsMarketsAllResponse>("/{version}/odds/markets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarketsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsMarketsAllResponse</returns>
        public async System.Threading.Tasks.Task<OddsMarketsAllResponse> MarketsAllAsync(string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<OddsMarketsAllResponse> localVarResponse = await MarketsAllWithHttpInfoAsync(version, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsMarketsAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<OddsMarketsAllResponse>> MarketsAllWithHttpInfoAsync(string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }

            localVarRequestOptions.Operation = "OddsApi.MarketsAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OddsMarketsAllResponse>("/{version}/odds/markets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarketsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OddsMarketsSearchResponse</returns>
        public OddsMarketsSearchResponse MarketsSearch(string name, string version = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<OddsMarketsSearchResponse> localVarResponse = MarketsSearchWithHttpInfo(name, version);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OddsMarketsSearchResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<OddsMarketsSearchResponse> MarketsSearchWithHttpInfo(string name, string version = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling OddsApi->MarketsSearch");
            }

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "OddsApi.MarketsSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OddsMarketsSearchResponse>("/{version}/odds/markets/search/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarketsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OddsMarketsSearchResponse</returns>
        public async System.Threading.Tasks.Task<OddsMarketsSearchResponse> MarketsSearchAsync(string name, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<OddsMarketsSearchResponse> localVarResponse = await MarketsSearchWithHttpInfoAsync(name, version, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OddsMarketsSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<OddsMarketsSearchResponse>> MarketsSearchWithHttpInfoAsync(string name, string version = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling OddsApi->MarketsSearch");
            }


            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "OddsApi.MarketsSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OddsMarketsSearchResponse>("/{version}/odds/markets/search/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarketsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
