/*
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sportmonks.Net.Client;
using Sportmonks.Net.Model;

namespace Sportmonks.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISportApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// By ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coachId">The ID of the coach you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportCoachByIdResponse</returns>
        SportCoachByIdResponse CoachById(int coachId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coachId">The ID of the coach you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportCoachByIdResponse</returns>
        ApiResponse<SportCoachByIdResponse> CoachByIdWithHttpInfo(int coachId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportCoachesAllResponse</returns>
        SportCoachesAllResponse CoachesAll(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportCoachesAllResponse</returns>
        ApiResponse<SportCoachesAllResponse> CoachesAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Country ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve coaches from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportCoachesByCountryIdResponse</returns>
        SportCoachesByCountryIdResponse CoachesByCountryId(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Country ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve coaches from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportCoachesByCountryIdResponse</returns>
        ApiResponse<SportCoachesByCountryIdResponse> CoachesByCountryIdWithHttpInfo(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Last updated
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportCoachesLatestResponse</returns>
        SportCoachesLatestResponse CoachesLatest(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Last updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportCoachesLatestResponse</returns>
        ApiResponse<SportCoachesLatestResponse> CoachesLatestWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Search
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportCoachesSearchResponse</returns>
        SportCoachesSearchResponse CoachesSearch(string name, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportCoachesSearchResponse</returns>
        ApiResponse<SportCoachesSearchResponse> CoachesSearchWithHttpInfo(string name, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportCommentariesAllResponse</returns>
        SportCommentariesAllResponse CommentariesAll(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportCommentariesAllResponse</returns>
        ApiResponse<SportCommentariesAllResponse> CommentariesAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Fixture ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve commentaries from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportCommentariesByFixtureIdResponse</returns>
        SportCommentariesByFixtureIdResponse CommentariesByFixtureId(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve commentaries from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportCommentariesByFixtureIdResponse</returns>
        ApiResponse<SportCommentariesByFixtureIdResponse> CommentariesByFixtureIdWithHttpInfo(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Date Range for Team
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="teamId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportFixtureByDateRangeForTeamResponse</returns>
        SportFixtureByDateRangeForTeamResponse FixtureByDateRangeForTeam(string startDate, string endDate, string teamId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Date Range for Team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="teamId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportFixtureByDateRangeForTeamResponse</returns>
        ApiResponse<SportFixtureByDateRangeForTeamResponse> FixtureByDateRangeForTeamWithHttpInfo(string startDate, string endDate, string teamId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Fixture ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportFixtureByIdResponse</returns>
        SportFixtureByIdResponse FixtureById(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportFixtureByIdResponse</returns>
        ApiResponse<SportFixtureByIdResponse> FixtureByIdWithHttpInfo(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportFixturesAllResponse</returns>
        SportFixturesAllResponse FixturesAll(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportFixturesAllResponse</returns>
        ApiResponse<SportFixturesAllResponse> FixturesAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Date
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The date you want to retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportFixturesByDateResponse</returns>
        SportFixturesByDateResponse FixturesByDate(string date, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The date you want to retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportFixturesByDateResponse</returns>
        ApiResponse<SportFixturesByDateResponse> FixturesByDateWithHttpInfo(string date, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Date Range
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date you want to retrieve fixtures from.</param>
        /// <param name="endDate">The end date you want to retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportFixturesByDateRangeResponse</returns>
        SportFixturesByDateRangeResponse FixturesByDateRange(string startDate, string endDate, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Date Range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date you want to retrieve fixtures from.</param>
        /// <param name="endDate">The end date you want to retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportFixturesByDateRangeResponse</returns>
        ApiResponse<SportFixturesByDateRangeResponse> FixturesByDateRangeWithHttpInfo(string startDate, string endDate, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By IDs
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureIds">The IDs you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportFixturesByIdsResponse</returns>
        SportFixturesByIdsResponse FixturesByIds(string fixtureIds, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureIds">The IDs you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportFixturesByIdsResponse</returns>
        ApiResponse<SportFixturesByIdsResponse> FixturesByIdsWithHttpInfo(string fixtureIds, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Head to Head
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstTeam">The ID of the first team retrieve fixtures from.</param>
        /// <param name="secondTeam">The ID of the second team retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportFixturesHeadToHeadResponse</returns>
        SportFixturesHeadToHeadResponse FixturesHeadToHead(int firstTeam, int secondTeam, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Head to Head
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstTeam">The ID of the first team retrieve fixtures from.</param>
        /// <param name="secondTeam">The ID of the second team retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportFixturesHeadToHeadResponse</returns>
        ApiResponse<SportFixturesHeadToHeadResponse> FixturesHeadToHeadWithHttpInfo(int firstTeam, int secondTeam, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Last Updated
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string FixturesLatest(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Last Updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> FixturesLatestWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Search
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportFixturesSearchResponse</returns>
        SportFixturesSearchResponse FixturesSearch(string name, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportFixturesSearchResponse</returns>
        ApiResponse<SportFixturesSearchResponse> FixturesSearchWithHttpInfo(string name, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLeagueByIdResponse</returns>
        SportLeagueByIdResponse LeagueById(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLeagueByIdResponse</returns>
        ApiResponse<SportLeagueByIdResponse> LeagueByIdWithHttpInfo(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Enrichments
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve enrichments from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object LeagueEnrichments(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Enrichments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve enrichments from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LeagueEnrichmentsWithHttpInfo(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Shirts By League ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object LeagueShirts(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Shirts By League ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LeagueShirtsWithHttpInfo(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLeaguesAllResponse</returns>
        SportLeaguesAllResponse LeaguesAll(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLeaguesAllResponse</returns>
        ApiResponse<SportLeaguesAllResponse> LeaguesAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Country ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLeaguesByCountryIdResponse</returns>
        SportLeaguesByCountryIdResponse LeaguesByCountryId(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Country ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLeaguesByCountryIdResponse</returns>
        ApiResponse<SportLeaguesByCountryIdResponse> LeaguesByCountryIdWithHttpInfo(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Date
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The date of fixtures you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLeaguesByDateResponse</returns>
        SportLeaguesByDateResponse LeaguesByDate(string date, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The date of fixtures you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLeaguesByDateResponse</returns>
        ApiResponse<SportLeaguesByDateResponse> LeaguesByDateWithHttpInfo(string date, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Leagues By Team ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object LeaguesByTeamId(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Leagues By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LeaguesByTeamIdWithHttpInfo(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Current Leagues By Team ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve current leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object LeaguesCurrentByTeamId(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Current Leagues By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve current leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LeaguesCurrentByTeamIdWithHttpInfo(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Live
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLeaguesLiveResponse</returns>
        SportLeaguesLiveResponse LeaguesLive(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Live
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLeaguesLiveResponse</returns>
        ApiResponse<SportLeaguesLiveResponse> LeaguesLiveWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Search
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLeaguesSearchResponse</returns>
        SportLeaguesSearchResponse LeaguesSearch(string name, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLeaguesSearchResponse</returns>
        ApiResponse<SportLeaguesSearchResponse> LeaguesSearchWithHttpInfo(string name, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLivescoresAllResponse</returns>
        SportLivescoresAllResponse LivescoresAll(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLivescoresAllResponse</returns>
        ApiResponse<SportLivescoresAllResponse> LivescoresAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All In-play
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLivescoresAllInPlayResponse</returns>
        SportLivescoresAllInPlayResponse LivescoresAllInPlay(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All In-play
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLivescoresAllInPlayResponse</returns>
        ApiResponse<SportLivescoresAllInPlayResponse> LivescoresAllInPlayWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Last Updated In-play
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLivescoresLatestResponse</returns>
        SportLivescoresLatestResponse LivescoresLatest(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Last Updated In-play
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLivescoresLatestResponse</returns>
        ApiResponse<SportLivescoresLatestResponse> LivescoresLatestWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All Post Match
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string NewsAllPostMatch(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All Post Match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> NewsAllPostMatchWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All Pre-match
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportNewsAllPreMatchResponse</returns>
        SportNewsAllPreMatchResponse NewsAllPreMatch(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All Pre-match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportNewsAllPreMatchResponse</returns>
        ApiResponse<SportNewsAllPreMatchResponse> NewsAllPreMatchWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Post Match by Season ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve post-match news from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string NewsPostMatchBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Post Match by Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve post-match news from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> NewsPostMatchBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Pre-match By Season ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve post-match news from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportNewsPreMatchBySeasonIdResponse</returns>
        SportNewsPreMatchBySeasonIdResponse NewsPreMatchBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Pre-match By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve post-match news from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportNewsPreMatchBySeasonIdResponse</returns>
        ApiResponse<SportNewsPreMatchBySeasonIdResponse> NewsPreMatchBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Upcoming Post Match
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string NewsUpcomingPostMatch(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Upcoming Post Match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> NewsUpcomingPostMatchWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Upcoming Pre-match
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportNewsUpcomingPreMatchResponse</returns>
        SportNewsUpcomingPreMatchResponse NewsUpcomingPreMatch(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Upcoming Pre-match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportNewsUpcomingPreMatchResponse</returns>
        ApiResponse<SportNewsUpcomingPreMatchResponse> NewsUpcomingPreMatchWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All In-play
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportOddsAllInPlayResponse</returns>
        SportOddsAllInPlayResponse OddsAllInPlay(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All In-play
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportOddsAllInPlayResponse</returns>
        ApiResponse<SportOddsAllInPlayResponse> OddsAllInPlayWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All Pre-match
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportOddsAllPreMatchResponse</returns>
        SportOddsAllPreMatchResponse OddsAllPreMatch(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All Pre-match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportOddsAllPreMatchResponse</returns>
        ApiResponse<SportOddsAllPreMatchResponse> OddsAllPreMatchWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// In-play by Fixture and Bookmaker ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object OddsInPlayByFixtureAndBookmakerId(int fixtureId, int bookmakerId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// In-play by Fixture and Bookmaker ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> OddsInPlayByFixtureAndBookmakerIdWithHttpInfo(int fixtureId, int bookmakerId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// In-play by Fixture and Market ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="marketId">The ID of the market you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object OddsInPlayByFixtureAndMarketId(int fixtureId, int marketId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// In-play by Fixture and Market ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="marketId">The ID of the market you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> OddsInPlayByFixtureAndMarketIdWithHttpInfo(int fixtureId, int marketId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// In-play by Fixture ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportOddsInPlayByFixtureIdResponse</returns>
        SportOddsInPlayByFixtureIdResponse OddsInPlayByFixtureId(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// In-play by Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportOddsInPlayByFixtureIdResponse</returns>
        ApiResponse<SportOddsInPlayByFixtureIdResponse> OddsInPlayByFixtureIdWithHttpInfo(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Latest In-play
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object OddsLatestInPlay(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Latest In-play
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> OddsLatestInPlayWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Last Updated Pre-match
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object OddsLatestPreMatch(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Last Updated Pre-match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> OddsLatestPreMatchWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Pre-match by Fixture and Bookmaker ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportOddsPreMatchByFixtureAndBookmakerIdResponse</returns>
        SportOddsPreMatchByFixtureAndBookmakerIdResponse OddsPreMatchByFixtureAndBookmakerId(int fixtureId, int bookmakerId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Pre-match by Fixture and Bookmaker ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportOddsPreMatchByFixtureAndBookmakerIdResponse</returns>
        ApiResponse<SportOddsPreMatchByFixtureAndBookmakerIdResponse> OddsPreMatchByFixtureAndBookmakerIdWithHttpInfo(int fixtureId, int bookmakerId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Pre-match by Fixture and Market ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="marketId">The ID of the market you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportOddsPreMatchByFixtureAndMarketIdResponse</returns>
        SportOddsPreMatchByFixtureAndMarketIdResponse OddsPreMatchByFixtureAndMarketId(int fixtureId, int marketId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Pre-match by Fixture and Market ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="marketId">The ID of the market you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportOddsPreMatchByFixtureAndMarketIdResponse</returns>
        ApiResponse<SportOddsPreMatchByFixtureAndMarketIdResponse> OddsPreMatchByFixtureAndMarketIdWithHttpInfo(int fixtureId, int marketId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Pre-match by Fixture ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportOddsPreMatchByFixtureIdResponse</returns>
        SportOddsPreMatchByFixtureIdResponse OddsPreMatchByFixtureId(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Pre-match by Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportOddsPreMatchByFixtureIdResponse</returns>
        ApiResponse<SportOddsPreMatchByFixtureIdResponse> OddsPreMatchByFixtureIdWithHttpInfo(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">The ID of the player you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportPlayerByIdResponse</returns>
        SportPlayerByIdResponse PlayerById(int playerId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">The ID of the player you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportPlayerByIdResponse</returns>
        ApiResponse<SportPlayerByIdResponse> PlayerByIdWithHttpInfo(int playerId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportPlayersAllResponse</returns>
        SportPlayersAllResponse PlayersAll(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportPlayersAllResponse</returns>
        ApiResponse<SportPlayersAllResponse> PlayersAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Country ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve players from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportPlayersByCountryIdResponse</returns>
        SportPlayersByCountryIdResponse PlayersByCountryId(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Country ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve players from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportPlayersByCountryIdResponse</returns>
        ApiResponse<SportPlayersByCountryIdResponse> PlayersByCountryIdWithHttpInfo(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Latest Updated
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportPlayersLatestResponse</returns>
        SportPlayersLatestResponse PlayersLatest(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Latest Updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportPlayersLatestResponse</returns>
        ApiResponse<SportPlayersLatestResponse> PlayersLatestWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Search
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportPlayersSearchResponse</returns>
        SportPlayersSearchResponse PlayersSearch(string name, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportPlayersSearchResponse</returns>
        ApiResponse<SportPlayersSearchResponse> PlayersSearchWithHttpInfo(string name, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportPredictionsAllResponse</returns>
        SportPredictionsAllResponse PredictionsAll(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportPredictionsAllResponse</returns>
        ApiResponse<SportPredictionsAllResponse> PredictionsAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All Value Bets
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportPredictionsAllValueBetsResponse</returns>
        SportPredictionsAllValueBetsResponse PredictionsAllValueBets(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All Value Bets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportPredictionsAllValueBetsResponse</returns>
        ApiResponse<SportPredictionsAllValueBetsResponse> PredictionsAllValueBetsWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Fixture ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve predictions from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportPredictionsByFixtureIdResponse</returns>
        SportPredictionsByFixtureIdResponse PredictionsByFixtureId(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve predictions from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportPredictionsByFixtureIdResponse</returns>
        ApiResponse<SportPredictionsByFixtureIdResponse> PredictionsByFixtureIdWithHttpInfo(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Value Bets by Fixture ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve value bets from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object PredictionsValueBetsByFixtureId(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Value Bets by Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve value bets from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PredictionsValueBetsByFixtureIdWithHttpInfo(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refereeId">The ID of the referee you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRefereeByIdResponse</returns>
        SportRefereeByIdResponse RefereeById(int refereeId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refereeId">The ID of the referee you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRefereeByIdResponse</returns>
        ApiResponse<SportRefereeByIdResponse> RefereeByIdWithHttpInfo(int refereeId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRefereesAllResponse</returns>
        SportRefereesAllResponse RefereesAll(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRefereesAllResponse</returns>
        ApiResponse<SportRefereesAllResponse> RefereesAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Country ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve referees from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRefereesByCountryIdResponse</returns>
        SportRefereesByCountryIdResponse RefereesByCountryId(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Country ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve referees from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRefereesByCountryIdResponse</returns>
        ApiResponse<SportRefereesByCountryIdResponse> RefereesByCountryIdWithHttpInfo(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Season ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve referees from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRefereesBySeasonIdResponse</returns>
        SportRefereesBySeasonIdResponse RefereesBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve referees from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRefereesBySeasonIdResponse</returns>
        ApiResponse<SportRefereesBySeasonIdResponse> RefereesBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Search
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRefereesSearchResponse</returns>
        SportRefereesSearchResponse RefereesSearch(string name, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRefereesSearchResponse</returns>
        ApiResponse<SportRefereesSearchResponse> RefereesSearchWithHttpInfo(string name, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRivalsAllResponse</returns>
        SportRivalsAllResponse RivalsAll(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRivalsAllResponse</returns>
        ApiResponse<SportRivalsAllResponse> RivalsAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Team ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve rivals from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRivalsByTeamIdResponse</returns>
        SportRivalsByTeamIdResponse RivalsByTeamId(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve rivals from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRivalsByTeamIdResponse</returns>
        ApiResponse<SportRivalsByTeamIdResponse> RivalsByTeamIdWithHttpInfo(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roundId">The ID of the round you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRoundByIdResponse</returns>
        SportRoundByIdResponse RoundById(int roundId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roundId">The ID of the round you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRoundByIdResponse</returns>
        ApiResponse<SportRoundByIdResponse> RoundByIdWithHttpInfo(int roundId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRoundsAllResponse</returns>
        SportRoundsAllResponse RoundsAll(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRoundsAllResponse</returns>
        ApiResponse<SportRoundsAllResponse> RoundsAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Season ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve rounds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRoundsBySeasonIdResponse</returns>
        SportRoundsBySeasonIdResponse RoundsBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve rounds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRoundsBySeasonIdResponse</returns>
        ApiResponse<SportRoundsBySeasonIdResponse> RoundsBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Search
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRoundsSearchResponse</returns>
        SportRoundsSearchResponse RoundsSearch(int name, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRoundsSearchResponse</returns>
        ApiResponse<SportRoundsSearchResponse> RoundsSearchWithHttpInfo(int name, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Season ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportSchedulesBySeasonIdResponse</returns>
        SportSchedulesBySeasonIdResponse SchedulesBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportSchedulesBySeasonIdResponse</returns>
        ApiResponse<SportSchedulesBySeasonIdResponse> SchedulesBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Team and Season ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve schedule from.</param>
        /// <param name="teamId">The ID of the team you want to retrieve schedule from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportSchedulesByTeamAndSeasonIdResponse</returns>
        SportSchedulesByTeamAndSeasonIdResponse SchedulesByTeamAndSeasonId(int seasonId, int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Team and Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve schedule from.</param>
        /// <param name="teamId">The ID of the team you want to retrieve schedule from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportSchedulesByTeamAndSeasonIdResponse</returns>
        ApiResponse<SportSchedulesByTeamAndSeasonIdResponse> SchedulesByTeamAndSeasonIdWithHttpInfo(int seasonId, int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Team ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve schedule from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportSchedulesByTeamIdResponse</returns>
        SportSchedulesByTeamIdResponse SchedulesByTeamId(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve schedule from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportSchedulesByTeamIdResponse</returns>
        ApiResponse<SportSchedulesByTeamIdResponse> SchedulesByTeamIdWithHttpInfo(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportSeasonByIdResponse</returns>
        SportSeasonByIdResponse SeasonById(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportSeasonByIdResponse</returns>
        ApiResponse<SportSeasonByIdResponse> SeasonByIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportSeasonsAllResponse</returns>
        SportSeasonsAllResponse SeasonsAll(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportSeasonsAllResponse</returns>
        ApiResponse<SportSeasonsAllResponse> SeasonsAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Team ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve seasons from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SeasonsByTeamId(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve seasons from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SeasonsByTeamIdWithHttpInfo(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Search
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportSeasonsSearchResponse</returns>
        SportSeasonsSearchResponse SeasonsSearch(int name, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportSeasonsSearchResponse</returns>
        ApiResponse<SportSeasonsSearchResponse> SeasonsSearchWithHttpInfo(int name, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Season and Team ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve squads from.</param>
        /// <param name="teamId">The ID of the team you want to retrieve squads from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportSquadsBySeasonAndTeamIdResponse</returns>
        SportSquadsBySeasonAndTeamIdResponse SquadsBySeasonAndTeamId(int seasonId, int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Season and Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve squads from.</param>
        /// <param name="teamId">The ID of the team you want to retrieve squads from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportSquadsBySeasonAndTeamIdResponse</returns>
        ApiResponse<SportSquadsBySeasonAndTeamIdResponse> SquadsBySeasonAndTeamIdWithHttpInfo(int seasonId, int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Team ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve squads from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportSquadsByTeamIdResponse</returns>
        SportSquadsByTeamIdResponse SquadsByTeamId(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve squads from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportSquadsByTeamIdResponse</returns>
        ApiResponse<SportSquadsByTeamIdResponse> SquadsByTeamIdWithHttpInfo(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">The ID of the stage you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStageByIdResponse</returns>
        SportStageByIdResponse StageById(int stageId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">The ID of the stage you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStageByIdResponse</returns>
        ApiResponse<SportStageByIdResponse> StageByIdWithHttpInfo(int stageId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStagesAllResponse</returns>
        SportStagesAllResponse StagesAll(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStagesAllResponse</returns>
        ApiResponse<SportStagesAllResponse> StagesAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Season ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve stages from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStagesBySeasonIdResponse</returns>
        SportStagesBySeasonIdResponse StagesBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve stages from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStagesBySeasonIdResponse</returns>
        ApiResponse<SportStagesBySeasonIdResponse> StagesBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Search
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStagesSearchResponse</returns>
        SportStagesSearchResponse StagesSearch(string name, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStagesSearchResponse</returns>
        ApiResponse<SportStagesSearchResponse> StagesSearchWithHttpInfo(string name, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Correction by Season ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve standing corrections from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStandingCorrectionsBySeasonIdResponse</returns>
        SportStandingCorrectionsBySeasonIdResponse StandingCorrectionsBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Correction by Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve standing corrections from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStandingCorrectionsBySeasonIdResponse</returns>
        ApiResponse<SportStandingCorrectionsBySeasonIdResponse> StandingCorrectionsBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStandingsAllResponse</returns>
        SportStandingsAllResponse StandingsAll(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStandingsAllResponse</returns>
        ApiResponse<SportStandingsAllResponse> StandingsAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Round ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roundId">The ID of the round you want to retrieve standing from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStandingsByRoundIdResponse</returns>
        SportStandingsByRoundIdResponse StandingsByRoundId(int roundId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Round ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roundId">The ID of the round you want to retrieve standing from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStandingsByRoundIdResponse</returns>
        ApiResponse<SportStandingsByRoundIdResponse> StandingsByRoundIdWithHttpInfo(int roundId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Season ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve standing from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStandingsBySeasonIdResponse</returns>
        SportStandingsBySeasonIdResponse StandingsBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve standing from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStandingsBySeasonIdResponse</returns>
        ApiResponse<SportStandingsBySeasonIdResponse> StandingsBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By League ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve standings from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStandingsLiveByLeagueIdResponse</returns>
        SportStandingsLiveByLeagueIdResponse StandingsLiveByLeagueId(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By League ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve standings from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStandingsLiveByLeagueIdResponse</returns>
        ApiResponse<SportStandingsLiveByLeagueIdResponse> StandingsLiveByLeagueIdWithHttpInfo(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateId">The ID of the state you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStateByIdResponse</returns>
        SportStateByIdResponse StateById(int stateId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateId">The ID of the state you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStateByIdResponse</returns>
        ApiResponse<SportStateByIdResponse> StateByIdWithHttpInfo(int stateId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Sport
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStatesBySportResponse</returns>
        SportStatesBySportResponse StatesBySport(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Sport
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStatesBySportResponse</returns>
        ApiResponse<SportStatesBySportResponse> StatesBySportWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTeamsAllResponse</returns>
        SportTeamsAllResponse TeamsAll(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTeamsAllResponse</returns>
        ApiResponse<SportTeamsAllResponse> TeamsAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Country ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve teams from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTeamsByCountryIdResponse</returns>
        SportTeamsByCountryIdResponse TeamsByCountryId(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Country ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve teams from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTeamsByCountryIdResponse</returns>
        ApiResponse<SportTeamsByCountryIdResponse> TeamsByCountryIdWithHttpInfo(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTeamsByIdResponse</returns>
        SportTeamsByIdResponse TeamsById(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTeamsByIdResponse</returns>
        ApiResponse<SportTeamsByIdResponse> TeamsByIdWithHttpInfo(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Season ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve teams from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTeamsBySeasonIdResponse</returns>
        SportTeamsBySeasonIdResponse TeamsBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve teams from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTeamsBySeasonIdResponse</returns>
        ApiResponse<SportTeamsBySeasonIdResponse> TeamsBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Search
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTeamsSearchResponse</returns>
        SportTeamsSearchResponse TeamsSearch(string name, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTeamsSearchResponse</returns>
        ApiResponse<SportTeamsSearchResponse> TeamsSearchWithHttpInfo(string name, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Season ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve topscorers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTopScorersBySeasonIdResponse</returns>
        SportTopScorersBySeasonIdResponse TopScorersBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve topscorers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTopScorersBySeasonIdResponse</returns>
        ApiResponse<SportTopScorersBySeasonIdResponse> TopScorersBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Stage ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">The ID of the stage you want to retrieve topscorers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTopScorersByStageIdResponse</returns>
        SportTopScorersByStageIdResponse TopScorersByStageId(int stageId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Stage ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">The ID of the stage you want to retrieve topscorers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTopScorersByStageIdResponse</returns>
        ApiResponse<SportTopScorersByStageIdResponse> TopScorersByStageIdWithHttpInfo(int stageId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Date Range
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date you want to retrieve transfers from.</param>
        /// <param name="endDate">The end date you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTranfersByDateRangeResponse</returns>
        SportTranfersByDateRangeResponse TranfersByDateRange(string startDate, string endDate, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Date Range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date you want to retrieve transfers from.</param>
        /// <param name="endDate">The end date you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTranfersByDateRangeResponse</returns>
        ApiResponse<SportTranfersByDateRangeResponse> TranfersByDateRangeWithHttpInfo(string startDate, string endDate, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTransferByIdResponse</returns>
        SportTransferByIdResponse TransferById(int transferId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTransferByIdResponse</returns>
        ApiResponse<SportTransferByIdResponse> TransferByIdWithHttpInfo(int transferId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTransfersAllResponse</returns>
        SportTransfersAllResponse TransfersAll(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTransfersAllResponse</returns>
        ApiResponse<SportTransfersAllResponse> TransfersAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Player ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">The ID of the player you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTransfersByPlayerIdResponse</returns>
        SportTransfersByPlayerIdResponse TransfersByPlayerId(int playerId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Player ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">The ID of the player you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTransfersByPlayerIdResponse</returns>
        ApiResponse<SportTransfersByPlayerIdResponse> TransfersByPlayerIdWithHttpInfo(int playerId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Team ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTransfersByTeamIdResponse</returns>
        SportTransfersByTeamIdResponse TransfersByTeamId(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTransfersByTeamIdResponse</returns>
        ApiResponse<SportTransfersByTeamIdResponse> TransfersByTeamIdWithHttpInfo(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Last Updated
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTransfersLatestResponse</returns>
        SportTransfersLatestResponse TransfersLatest(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Last Updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTransfersLatestResponse</returns>
        ApiResponse<SportTransfersLatestResponse> TransfersLatestWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvStationId">The ID of the tv station you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTvStationByIdResponse</returns>
        SportTvStationByIdResponse TvStationById(int tvStationId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvStationId">The ID of the tv station you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTvStationByIdResponse</returns>
        ApiResponse<SportTvStationByIdResponse> TvStationByIdWithHttpInfo(int tvStationId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTvStationsAllResponse</returns>
        SportTvStationsAllResponse TvStationsAll(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTvStationsAllResponse</returns>
        ApiResponse<SportTvStationsAllResponse> TvStationsAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Fixture ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve tv-stations from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTvStationsByFixtureIdResponse</returns>
        SportTvStationsByFixtureIdResponse TvStationsByFixtureId(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve tv-stations from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTvStationsByFixtureIdResponse</returns>
        ApiResponse<SportTvStationsByFixtureIdResponse> TvStationsByFixtureIdWithHttpInfo(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="venueId">The ID of the venue you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportVenueByIdResponse</returns>
        SportVenueByIdResponse VenueById(int venueId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="venueId">The ID of the venue you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportVenueByIdResponse</returns>
        ApiResponse<SportVenueByIdResponse> VenueByIdWithHttpInfo(int venueId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// All
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportVenuesAllResponse</returns>
        SportVenuesAllResponse VenuesAll(string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportVenuesAllResponse</returns>
        ApiResponse<SportVenuesAllResponse> VenuesAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// By Season ID
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve venues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportVenuesBySeasonIdResponse</returns>
        SportVenuesBySeasonIdResponse VenuesBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve venues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportVenuesBySeasonIdResponse</returns>
        ApiResponse<SportVenuesBySeasonIdResponse> VenuesBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0);
        /// <summary>
        /// Search
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportVenuesSearchResponse</returns>
        SportVenuesSearchResponse VenuesSearch(string name, string version = default(string), string sport = default(string), int operationIndex = 0);

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportVenuesSearchResponse</returns>
        ApiResponse<SportVenuesSearchResponse> VenuesSearchWithHttpInfo(string name, string version = default(string), string sport = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISportApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coachId">The ID of the coach you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportCoachByIdResponse</returns>
        System.Threading.Tasks.Task<SportCoachByIdResponse> CoachByIdAsync(int coachId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coachId">The ID of the coach you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportCoachByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportCoachByIdResponse>> CoachByIdWithHttpInfoAsync(int coachId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportCoachesAllResponse</returns>
        System.Threading.Tasks.Task<SportCoachesAllResponse> CoachesAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportCoachesAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportCoachesAllResponse>> CoachesAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Country ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve coaches from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportCoachesByCountryIdResponse</returns>
        System.Threading.Tasks.Task<SportCoachesByCountryIdResponse> CoachesByCountryIdAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Country ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve coaches from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportCoachesByCountryIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportCoachesByCountryIdResponse>> CoachesByCountryIdWithHttpInfoAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Last updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportCoachesLatestResponse</returns>
        System.Threading.Tasks.Task<SportCoachesLatestResponse> CoachesLatestAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Last updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportCoachesLatestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportCoachesLatestResponse>> CoachesLatestWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportCoachesSearchResponse</returns>
        System.Threading.Tasks.Task<SportCoachesSearchResponse> CoachesSearchAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportCoachesSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportCoachesSearchResponse>> CoachesSearchWithHttpInfoAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportCommentariesAllResponse</returns>
        System.Threading.Tasks.Task<SportCommentariesAllResponse> CommentariesAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportCommentariesAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportCommentariesAllResponse>> CommentariesAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve commentaries from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportCommentariesByFixtureIdResponse</returns>
        System.Threading.Tasks.Task<SportCommentariesByFixtureIdResponse> CommentariesByFixtureIdAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve commentaries from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportCommentariesByFixtureIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportCommentariesByFixtureIdResponse>> CommentariesByFixtureIdWithHttpInfoAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Date Range for Team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="teamId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportFixtureByDateRangeForTeamResponse</returns>
        System.Threading.Tasks.Task<SportFixtureByDateRangeForTeamResponse> FixtureByDateRangeForTeamAsync(string startDate, string endDate, string teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Date Range for Team
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="teamId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportFixtureByDateRangeForTeamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportFixtureByDateRangeForTeamResponse>> FixtureByDateRangeForTeamWithHttpInfoAsync(string startDate, string endDate, string teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportFixtureByIdResponse</returns>
        System.Threading.Tasks.Task<SportFixtureByIdResponse> FixtureByIdAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportFixtureByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportFixtureByIdResponse>> FixtureByIdWithHttpInfoAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportFixturesAllResponse</returns>
        System.Threading.Tasks.Task<SportFixturesAllResponse> FixturesAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportFixturesAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportFixturesAllResponse>> FixturesAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The date you want to retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportFixturesByDateResponse</returns>
        System.Threading.Tasks.Task<SportFixturesByDateResponse> FixturesByDateAsync(string date, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The date you want to retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportFixturesByDateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportFixturesByDateResponse>> FixturesByDateWithHttpInfoAsync(string date, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Date Range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date you want to retrieve fixtures from.</param>
        /// <param name="endDate">The end date you want to retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportFixturesByDateRangeResponse</returns>
        System.Threading.Tasks.Task<SportFixturesByDateRangeResponse> FixturesByDateRangeAsync(string startDate, string endDate, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Date Range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date you want to retrieve fixtures from.</param>
        /// <param name="endDate">The end date you want to retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportFixturesByDateRangeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportFixturesByDateRangeResponse>> FixturesByDateRangeWithHttpInfoAsync(string startDate, string endDate, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureIds">The IDs you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportFixturesByIdsResponse</returns>
        System.Threading.Tasks.Task<SportFixturesByIdsResponse> FixturesByIdsAsync(string fixtureIds, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureIds">The IDs you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportFixturesByIdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportFixturesByIdsResponse>> FixturesByIdsWithHttpInfoAsync(string fixtureIds, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Head to Head
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstTeam">The ID of the first team retrieve fixtures from.</param>
        /// <param name="secondTeam">The ID of the second team retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportFixturesHeadToHeadResponse</returns>
        System.Threading.Tasks.Task<SportFixturesHeadToHeadResponse> FixturesHeadToHeadAsync(int firstTeam, int secondTeam, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Head to Head
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstTeam">The ID of the first team retrieve fixtures from.</param>
        /// <param name="secondTeam">The ID of the second team retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportFixturesHeadToHeadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportFixturesHeadToHeadResponse>> FixturesHeadToHeadWithHttpInfoAsync(int firstTeam, int secondTeam, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Last Updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> FixturesLatestAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Last Updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> FixturesLatestWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportFixturesSearchResponse</returns>
        System.Threading.Tasks.Task<SportFixturesSearchResponse> FixturesSearchAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportFixturesSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportFixturesSearchResponse>> FixturesSearchWithHttpInfoAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLeagueByIdResponse</returns>
        System.Threading.Tasks.Task<SportLeagueByIdResponse> LeagueByIdAsync(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLeagueByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportLeagueByIdResponse>> LeagueByIdWithHttpInfoAsync(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enrichments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve enrichments from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LeagueEnrichmentsAsync(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enrichments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve enrichments from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeagueEnrichmentsWithHttpInfoAsync(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Shirts By League ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LeagueShirtsAsync(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Shirts By League ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeagueShirtsWithHttpInfoAsync(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLeaguesAllResponse</returns>
        System.Threading.Tasks.Task<SportLeaguesAllResponse> LeaguesAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLeaguesAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportLeaguesAllResponse>> LeaguesAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Country ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLeaguesByCountryIdResponse</returns>
        System.Threading.Tasks.Task<SportLeaguesByCountryIdResponse> LeaguesByCountryIdAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Country ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLeaguesByCountryIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportLeaguesByCountryIdResponse>> LeaguesByCountryIdWithHttpInfoAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The date of fixtures you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLeaguesByDateResponse</returns>
        System.Threading.Tasks.Task<SportLeaguesByDateResponse> LeaguesByDateAsync(string date, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The date of fixtures you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLeaguesByDateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportLeaguesByDateResponse>> LeaguesByDateWithHttpInfoAsync(string date, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Leagues By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LeaguesByTeamIdAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Leagues By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeaguesByTeamIdWithHttpInfoAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Current Leagues By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve current leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LeaguesCurrentByTeamIdAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Current Leagues By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve current leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeaguesCurrentByTeamIdWithHttpInfoAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Live
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLeaguesLiveResponse</returns>
        System.Threading.Tasks.Task<SportLeaguesLiveResponse> LeaguesLiveAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Live
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLeaguesLiveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportLeaguesLiveResponse>> LeaguesLiveWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLeaguesSearchResponse</returns>
        System.Threading.Tasks.Task<SportLeaguesSearchResponse> LeaguesSearchAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLeaguesSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportLeaguesSearchResponse>> LeaguesSearchWithHttpInfoAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLivescoresAllResponse</returns>
        System.Threading.Tasks.Task<SportLivescoresAllResponse> LivescoresAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLivescoresAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportLivescoresAllResponse>> LivescoresAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All In-play
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLivescoresAllInPlayResponse</returns>
        System.Threading.Tasks.Task<SportLivescoresAllInPlayResponse> LivescoresAllInPlayAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All In-play
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLivescoresAllInPlayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportLivescoresAllInPlayResponse>> LivescoresAllInPlayWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Last Updated In-play
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLivescoresLatestResponse</returns>
        System.Threading.Tasks.Task<SportLivescoresLatestResponse> LivescoresLatestAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Last Updated In-play
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLivescoresLatestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportLivescoresLatestResponse>> LivescoresLatestWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All Post Match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> NewsAllPostMatchAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All Post Match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> NewsAllPostMatchWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All Pre-match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportNewsAllPreMatchResponse</returns>
        System.Threading.Tasks.Task<SportNewsAllPreMatchResponse> NewsAllPreMatchAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All Pre-match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportNewsAllPreMatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportNewsAllPreMatchResponse>> NewsAllPreMatchWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Post Match by Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve post-match news from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> NewsPostMatchBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Post Match by Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve post-match news from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> NewsPostMatchBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pre-match By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve post-match news from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportNewsPreMatchBySeasonIdResponse</returns>
        System.Threading.Tasks.Task<SportNewsPreMatchBySeasonIdResponse> NewsPreMatchBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pre-match By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve post-match news from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportNewsPreMatchBySeasonIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportNewsPreMatchBySeasonIdResponse>> NewsPreMatchBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upcoming Post Match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> NewsUpcomingPostMatchAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upcoming Post Match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> NewsUpcomingPostMatchWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upcoming Pre-match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportNewsUpcomingPreMatchResponse</returns>
        System.Threading.Tasks.Task<SportNewsUpcomingPreMatchResponse> NewsUpcomingPreMatchAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upcoming Pre-match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportNewsUpcomingPreMatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportNewsUpcomingPreMatchResponse>> NewsUpcomingPreMatchWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All In-play
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportOddsAllInPlayResponse</returns>
        System.Threading.Tasks.Task<SportOddsAllInPlayResponse> OddsAllInPlayAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All In-play
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportOddsAllInPlayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportOddsAllInPlayResponse>> OddsAllInPlayWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All Pre-match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportOddsAllPreMatchResponse</returns>
        System.Threading.Tasks.Task<SportOddsAllPreMatchResponse> OddsAllPreMatchAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All Pre-match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportOddsAllPreMatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportOddsAllPreMatchResponse>> OddsAllPreMatchWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// In-play by Fixture and Bookmaker ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> OddsInPlayByFixtureAndBookmakerIdAsync(int fixtureId, int bookmakerId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// In-play by Fixture and Bookmaker ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OddsInPlayByFixtureAndBookmakerIdWithHttpInfoAsync(int fixtureId, int bookmakerId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// In-play by Fixture and Market ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="marketId">The ID of the market you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> OddsInPlayByFixtureAndMarketIdAsync(int fixtureId, int marketId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// In-play by Fixture and Market ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="marketId">The ID of the market you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OddsInPlayByFixtureAndMarketIdWithHttpInfoAsync(int fixtureId, int marketId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// In-play by Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportOddsInPlayByFixtureIdResponse</returns>
        System.Threading.Tasks.Task<SportOddsInPlayByFixtureIdResponse> OddsInPlayByFixtureIdAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// In-play by Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportOddsInPlayByFixtureIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportOddsInPlayByFixtureIdResponse>> OddsInPlayByFixtureIdWithHttpInfoAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Latest In-play
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> OddsLatestInPlayAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Latest In-play
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OddsLatestInPlayWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Last Updated Pre-match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> OddsLatestPreMatchAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Last Updated Pre-match
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OddsLatestPreMatchWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pre-match by Fixture and Bookmaker ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportOddsPreMatchByFixtureAndBookmakerIdResponse</returns>
        System.Threading.Tasks.Task<SportOddsPreMatchByFixtureAndBookmakerIdResponse> OddsPreMatchByFixtureAndBookmakerIdAsync(int fixtureId, int bookmakerId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pre-match by Fixture and Bookmaker ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportOddsPreMatchByFixtureAndBookmakerIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportOddsPreMatchByFixtureAndBookmakerIdResponse>> OddsPreMatchByFixtureAndBookmakerIdWithHttpInfoAsync(int fixtureId, int bookmakerId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pre-match by Fixture and Market ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="marketId">The ID of the market you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportOddsPreMatchByFixtureAndMarketIdResponse</returns>
        System.Threading.Tasks.Task<SportOddsPreMatchByFixtureAndMarketIdResponse> OddsPreMatchByFixtureAndMarketIdAsync(int fixtureId, int marketId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pre-match by Fixture and Market ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="marketId">The ID of the market you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportOddsPreMatchByFixtureAndMarketIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportOddsPreMatchByFixtureAndMarketIdResponse>> OddsPreMatchByFixtureAndMarketIdWithHttpInfoAsync(int fixtureId, int marketId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pre-match by Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportOddsPreMatchByFixtureIdResponse</returns>
        System.Threading.Tasks.Task<SportOddsPreMatchByFixtureIdResponse> OddsPreMatchByFixtureIdAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pre-match by Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportOddsPreMatchByFixtureIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportOddsPreMatchByFixtureIdResponse>> OddsPreMatchByFixtureIdWithHttpInfoAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">The ID of the player you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportPlayerByIdResponse</returns>
        System.Threading.Tasks.Task<SportPlayerByIdResponse> PlayerByIdAsync(int playerId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">The ID of the player you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportPlayerByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportPlayerByIdResponse>> PlayerByIdWithHttpInfoAsync(int playerId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportPlayersAllResponse</returns>
        System.Threading.Tasks.Task<SportPlayersAllResponse> PlayersAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportPlayersAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportPlayersAllResponse>> PlayersAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Country ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve players from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportPlayersByCountryIdResponse</returns>
        System.Threading.Tasks.Task<SportPlayersByCountryIdResponse> PlayersByCountryIdAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Country ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve players from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportPlayersByCountryIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportPlayersByCountryIdResponse>> PlayersByCountryIdWithHttpInfoAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Latest Updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportPlayersLatestResponse</returns>
        System.Threading.Tasks.Task<SportPlayersLatestResponse> PlayersLatestAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Latest Updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportPlayersLatestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportPlayersLatestResponse>> PlayersLatestWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportPlayersSearchResponse</returns>
        System.Threading.Tasks.Task<SportPlayersSearchResponse> PlayersSearchAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportPlayersSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportPlayersSearchResponse>> PlayersSearchWithHttpInfoAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportPredictionsAllResponse</returns>
        System.Threading.Tasks.Task<SportPredictionsAllResponse> PredictionsAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportPredictionsAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportPredictionsAllResponse>> PredictionsAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All Value Bets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportPredictionsAllValueBetsResponse</returns>
        System.Threading.Tasks.Task<SportPredictionsAllValueBetsResponse> PredictionsAllValueBetsAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All Value Bets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportPredictionsAllValueBetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportPredictionsAllValueBetsResponse>> PredictionsAllValueBetsWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve predictions from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportPredictionsByFixtureIdResponse</returns>
        System.Threading.Tasks.Task<SportPredictionsByFixtureIdResponse> PredictionsByFixtureIdAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve predictions from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportPredictionsByFixtureIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportPredictionsByFixtureIdResponse>> PredictionsByFixtureIdWithHttpInfoAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Value Bets by Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve value bets from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PredictionsValueBetsByFixtureIdAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Value Bets by Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve value bets from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PredictionsValueBetsByFixtureIdWithHttpInfoAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refereeId">The ID of the referee you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRefereeByIdResponse</returns>
        System.Threading.Tasks.Task<SportRefereeByIdResponse> RefereeByIdAsync(int refereeId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refereeId">The ID of the referee you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRefereeByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportRefereeByIdResponse>> RefereeByIdWithHttpInfoAsync(int refereeId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRefereesAllResponse</returns>
        System.Threading.Tasks.Task<SportRefereesAllResponse> RefereesAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRefereesAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportRefereesAllResponse>> RefereesAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Country ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve referees from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRefereesByCountryIdResponse</returns>
        System.Threading.Tasks.Task<SportRefereesByCountryIdResponse> RefereesByCountryIdAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Country ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve referees from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRefereesByCountryIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportRefereesByCountryIdResponse>> RefereesByCountryIdWithHttpInfoAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve referees from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRefereesBySeasonIdResponse</returns>
        System.Threading.Tasks.Task<SportRefereesBySeasonIdResponse> RefereesBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve referees from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRefereesBySeasonIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportRefereesBySeasonIdResponse>> RefereesBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRefereesSearchResponse</returns>
        System.Threading.Tasks.Task<SportRefereesSearchResponse> RefereesSearchAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRefereesSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportRefereesSearchResponse>> RefereesSearchWithHttpInfoAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRivalsAllResponse</returns>
        System.Threading.Tasks.Task<SportRivalsAllResponse> RivalsAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRivalsAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportRivalsAllResponse>> RivalsAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve rivals from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRivalsByTeamIdResponse</returns>
        System.Threading.Tasks.Task<SportRivalsByTeamIdResponse> RivalsByTeamIdAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve rivals from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRivalsByTeamIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportRivalsByTeamIdResponse>> RivalsByTeamIdWithHttpInfoAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roundId">The ID of the round you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRoundByIdResponse</returns>
        System.Threading.Tasks.Task<SportRoundByIdResponse> RoundByIdAsync(int roundId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roundId">The ID of the round you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRoundByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportRoundByIdResponse>> RoundByIdWithHttpInfoAsync(int roundId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRoundsAllResponse</returns>
        System.Threading.Tasks.Task<SportRoundsAllResponse> RoundsAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRoundsAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportRoundsAllResponse>> RoundsAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve rounds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRoundsBySeasonIdResponse</returns>
        System.Threading.Tasks.Task<SportRoundsBySeasonIdResponse> RoundsBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve rounds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRoundsBySeasonIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportRoundsBySeasonIdResponse>> RoundsBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRoundsSearchResponse</returns>
        System.Threading.Tasks.Task<SportRoundsSearchResponse> RoundsSearchAsync(int name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRoundsSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportRoundsSearchResponse>> RoundsSearchWithHttpInfoAsync(int name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportSchedulesBySeasonIdResponse</returns>
        System.Threading.Tasks.Task<SportSchedulesBySeasonIdResponse> SchedulesBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportSchedulesBySeasonIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportSchedulesBySeasonIdResponse>> SchedulesBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Team and Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve schedule from.</param>
        /// <param name="teamId">The ID of the team you want to retrieve schedule from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportSchedulesByTeamAndSeasonIdResponse</returns>
        System.Threading.Tasks.Task<SportSchedulesByTeamAndSeasonIdResponse> SchedulesByTeamAndSeasonIdAsync(int seasonId, int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Team and Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve schedule from.</param>
        /// <param name="teamId">The ID of the team you want to retrieve schedule from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportSchedulesByTeamAndSeasonIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportSchedulesByTeamAndSeasonIdResponse>> SchedulesByTeamAndSeasonIdWithHttpInfoAsync(int seasonId, int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve schedule from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportSchedulesByTeamIdResponse</returns>
        System.Threading.Tasks.Task<SportSchedulesByTeamIdResponse> SchedulesByTeamIdAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve schedule from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportSchedulesByTeamIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportSchedulesByTeamIdResponse>> SchedulesByTeamIdWithHttpInfoAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportSeasonByIdResponse</returns>
        System.Threading.Tasks.Task<SportSeasonByIdResponse> SeasonByIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportSeasonByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportSeasonByIdResponse>> SeasonByIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportSeasonsAllResponse</returns>
        System.Threading.Tasks.Task<SportSeasonsAllResponse> SeasonsAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportSeasonsAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportSeasonsAllResponse>> SeasonsAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve seasons from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SeasonsByTeamIdAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve seasons from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SeasonsByTeamIdWithHttpInfoAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportSeasonsSearchResponse</returns>
        System.Threading.Tasks.Task<SportSeasonsSearchResponse> SeasonsSearchAsync(int name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportSeasonsSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportSeasonsSearchResponse>> SeasonsSearchWithHttpInfoAsync(int name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Season and Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve squads from.</param>
        /// <param name="teamId">The ID of the team you want to retrieve squads from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportSquadsBySeasonAndTeamIdResponse</returns>
        System.Threading.Tasks.Task<SportSquadsBySeasonAndTeamIdResponse> SquadsBySeasonAndTeamIdAsync(int seasonId, int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Season and Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve squads from.</param>
        /// <param name="teamId">The ID of the team you want to retrieve squads from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportSquadsBySeasonAndTeamIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportSquadsBySeasonAndTeamIdResponse>> SquadsBySeasonAndTeamIdWithHttpInfoAsync(int seasonId, int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve squads from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportSquadsByTeamIdResponse</returns>
        System.Threading.Tasks.Task<SportSquadsByTeamIdResponse> SquadsByTeamIdAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve squads from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportSquadsByTeamIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportSquadsByTeamIdResponse>> SquadsByTeamIdWithHttpInfoAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">The ID of the stage you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStageByIdResponse</returns>
        System.Threading.Tasks.Task<SportStageByIdResponse> StageByIdAsync(int stageId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">The ID of the stage you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStageByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportStageByIdResponse>> StageByIdWithHttpInfoAsync(int stageId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStagesAllResponse</returns>
        System.Threading.Tasks.Task<SportStagesAllResponse> StagesAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStagesAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportStagesAllResponse>> StagesAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve stages from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStagesBySeasonIdResponse</returns>
        System.Threading.Tasks.Task<SportStagesBySeasonIdResponse> StagesBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve stages from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStagesBySeasonIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportStagesBySeasonIdResponse>> StagesBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStagesSearchResponse</returns>
        System.Threading.Tasks.Task<SportStagesSearchResponse> StagesSearchAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStagesSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportStagesSearchResponse>> StagesSearchWithHttpInfoAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Correction by Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve standing corrections from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStandingCorrectionsBySeasonIdResponse</returns>
        System.Threading.Tasks.Task<SportStandingCorrectionsBySeasonIdResponse> StandingCorrectionsBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Correction by Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve standing corrections from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStandingCorrectionsBySeasonIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportStandingCorrectionsBySeasonIdResponse>> StandingCorrectionsBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStandingsAllResponse</returns>
        System.Threading.Tasks.Task<SportStandingsAllResponse> StandingsAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStandingsAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportStandingsAllResponse>> StandingsAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Round ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roundId">The ID of the round you want to retrieve standing from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStandingsByRoundIdResponse</returns>
        System.Threading.Tasks.Task<SportStandingsByRoundIdResponse> StandingsByRoundIdAsync(int roundId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Round ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roundId">The ID of the round you want to retrieve standing from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStandingsByRoundIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportStandingsByRoundIdResponse>> StandingsByRoundIdWithHttpInfoAsync(int roundId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve standing from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStandingsBySeasonIdResponse</returns>
        System.Threading.Tasks.Task<SportStandingsBySeasonIdResponse> StandingsBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve standing from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStandingsBySeasonIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportStandingsBySeasonIdResponse>> StandingsBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By League ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve standings from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStandingsLiveByLeagueIdResponse</returns>
        System.Threading.Tasks.Task<SportStandingsLiveByLeagueIdResponse> StandingsLiveByLeagueIdAsync(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By League ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve standings from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStandingsLiveByLeagueIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportStandingsLiveByLeagueIdResponse>> StandingsLiveByLeagueIdWithHttpInfoAsync(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateId">The ID of the state you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStateByIdResponse</returns>
        System.Threading.Tasks.Task<SportStateByIdResponse> StateByIdAsync(int stateId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateId">The ID of the state you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStateByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportStateByIdResponse>> StateByIdWithHttpInfoAsync(int stateId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Sport
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStatesBySportResponse</returns>
        System.Threading.Tasks.Task<SportStatesBySportResponse> StatesBySportAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Sport
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStatesBySportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportStatesBySportResponse>> StatesBySportWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTeamsAllResponse</returns>
        System.Threading.Tasks.Task<SportTeamsAllResponse> TeamsAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTeamsAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportTeamsAllResponse>> TeamsAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Country ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve teams from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTeamsByCountryIdResponse</returns>
        System.Threading.Tasks.Task<SportTeamsByCountryIdResponse> TeamsByCountryIdAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Country ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve teams from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTeamsByCountryIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportTeamsByCountryIdResponse>> TeamsByCountryIdWithHttpInfoAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTeamsByIdResponse</returns>
        System.Threading.Tasks.Task<SportTeamsByIdResponse> TeamsByIdAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTeamsByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportTeamsByIdResponse>> TeamsByIdWithHttpInfoAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve teams from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTeamsBySeasonIdResponse</returns>
        System.Threading.Tasks.Task<SportTeamsBySeasonIdResponse> TeamsBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve teams from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTeamsBySeasonIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportTeamsBySeasonIdResponse>> TeamsBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTeamsSearchResponse</returns>
        System.Threading.Tasks.Task<SportTeamsSearchResponse> TeamsSearchAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTeamsSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportTeamsSearchResponse>> TeamsSearchWithHttpInfoAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve topscorers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTopScorersBySeasonIdResponse</returns>
        System.Threading.Tasks.Task<SportTopScorersBySeasonIdResponse> TopScorersBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve topscorers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTopScorersBySeasonIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportTopScorersBySeasonIdResponse>> TopScorersBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Stage ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">The ID of the stage you want to retrieve topscorers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTopScorersByStageIdResponse</returns>
        System.Threading.Tasks.Task<SportTopScorersByStageIdResponse> TopScorersByStageIdAsync(int stageId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Stage ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">The ID of the stage you want to retrieve topscorers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTopScorersByStageIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportTopScorersByStageIdResponse>> TopScorersByStageIdWithHttpInfoAsync(int stageId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Date Range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date you want to retrieve transfers from.</param>
        /// <param name="endDate">The end date you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTranfersByDateRangeResponse</returns>
        System.Threading.Tasks.Task<SportTranfersByDateRangeResponse> TranfersByDateRangeAsync(string startDate, string endDate, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Date Range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date you want to retrieve transfers from.</param>
        /// <param name="endDate">The end date you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTranfersByDateRangeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportTranfersByDateRangeResponse>> TranfersByDateRangeWithHttpInfoAsync(string startDate, string endDate, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTransferByIdResponse</returns>
        System.Threading.Tasks.Task<SportTransferByIdResponse> TransferByIdAsync(int transferId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTransferByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportTransferByIdResponse>> TransferByIdWithHttpInfoAsync(int transferId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTransfersAllResponse</returns>
        System.Threading.Tasks.Task<SportTransfersAllResponse> TransfersAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTransfersAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportTransfersAllResponse>> TransfersAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Player ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">The ID of the player you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTransfersByPlayerIdResponse</returns>
        System.Threading.Tasks.Task<SportTransfersByPlayerIdResponse> TransfersByPlayerIdAsync(int playerId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Player ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">The ID of the player you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTransfersByPlayerIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportTransfersByPlayerIdResponse>> TransfersByPlayerIdWithHttpInfoAsync(int playerId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTransfersByTeamIdResponse</returns>
        System.Threading.Tasks.Task<SportTransfersByTeamIdResponse> TransfersByTeamIdAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Team ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTransfersByTeamIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportTransfersByTeamIdResponse>> TransfersByTeamIdWithHttpInfoAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Last Updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTransfersLatestResponse</returns>
        System.Threading.Tasks.Task<SportTransfersLatestResponse> TransfersLatestAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Last Updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTransfersLatestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportTransfersLatestResponse>> TransfersLatestWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvStationId">The ID of the tv station you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTvStationByIdResponse</returns>
        System.Threading.Tasks.Task<SportTvStationByIdResponse> TvStationByIdAsync(int tvStationId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvStationId">The ID of the tv station you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTvStationByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportTvStationByIdResponse>> TvStationByIdWithHttpInfoAsync(int tvStationId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTvStationsAllResponse</returns>
        System.Threading.Tasks.Task<SportTvStationsAllResponse> TvStationsAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTvStationsAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportTvStationsAllResponse>> TvStationsAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve tv-stations from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTvStationsByFixtureIdResponse</returns>
        System.Threading.Tasks.Task<SportTvStationsByFixtureIdResponse> TvStationsByFixtureIdAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Fixture ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve tv-stations from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTvStationsByFixtureIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportTvStationsByFixtureIdResponse>> TvStationsByFixtureIdWithHttpInfoAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="venueId">The ID of the venue you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportVenueByIdResponse</returns>
        System.Threading.Tasks.Task<SportVenueByIdResponse> VenueByIdAsync(int venueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="venueId">The ID of the venue you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportVenueByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportVenueByIdResponse>> VenueByIdWithHttpInfoAsync(int venueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportVenuesAllResponse</returns>
        System.Threading.Tasks.Task<SportVenuesAllResponse> VenuesAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// All
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportVenuesAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportVenuesAllResponse>> VenuesAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve venues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportVenuesBySeasonIdResponse</returns>
        System.Threading.Tasks.Task<SportVenuesBySeasonIdResponse> VenuesBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// By Season ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve venues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportVenuesBySeasonIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportVenuesBySeasonIdResponse>> VenuesBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportVenuesSearchResponse</returns>
        System.Threading.Tasks.Task<SportVenuesSearchResponse> VenuesSearchAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportVenuesSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SportVenuesSearchResponse>> VenuesSearchWithHttpInfoAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISportApi : ISportApiSync, ISportApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SportApi : ISportApi
    {
        private Sportmonks.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SportApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SportApi(string basePath)
        {
            this.Configuration = Sportmonks.Net.Client.Configuration.MergeConfigurations(
                Sportmonks.Net.Client.GlobalConfiguration.Instance,
                new Sportmonks.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Sportmonks.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Sportmonks.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Sportmonks.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SportApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SportApi(Sportmonks.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sportmonks.Net.Client.Configuration.MergeConfigurations(
                Sportmonks.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Sportmonks.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Sportmonks.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Sportmonks.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SportApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SportApi(Sportmonks.Net.Client.ISynchronousClient client, Sportmonks.Net.Client.IAsynchronousClient asyncClient, Sportmonks.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sportmonks.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Sportmonks.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Sportmonks.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Sportmonks.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sportmonks.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coachId">The ID of the coach you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportCoachByIdResponse</returns>
        public SportCoachByIdResponse CoachById(int coachId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportCoachByIdResponse> localVarResponse = CoachByIdWithHttpInfo(coachId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coachId">The ID of the coach you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportCoachByIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportCoachByIdResponse> CoachByIdWithHttpInfo(int coachId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("coachId", Sportmonks.Net.Client.ClientUtils.ParameterToString(coachId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.CoachById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportCoachByIdResponse>("/{version}/{sport}/coaches/{coachId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CoachById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coachId">The ID of the coach you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportCoachByIdResponse</returns>
        public async System.Threading.Tasks.Task<SportCoachByIdResponse> CoachByIdAsync(int coachId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportCoachByIdResponse> localVarResponse = await CoachByIdWithHttpInfoAsync(coachId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coachId">The ID of the coach you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportCoachByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportCoachByIdResponse>> CoachByIdWithHttpInfoAsync(int coachId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("coachId", Sportmonks.Net.Client.ClientUtils.ParameterToString(coachId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.CoachById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportCoachByIdResponse>("/{version}/{sport}/coaches/{coachId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CoachById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportCoachesAllResponse</returns>
        public SportCoachesAllResponse CoachesAll(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportCoachesAllResponse> localVarResponse = CoachesAllWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportCoachesAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportCoachesAllResponse> CoachesAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.CoachesAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportCoachesAllResponse>("/{version}/{sport}/coaches", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CoachesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportCoachesAllResponse</returns>
        public async System.Threading.Tasks.Task<SportCoachesAllResponse> CoachesAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportCoachesAllResponse> localVarResponse = await CoachesAllWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportCoachesAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportCoachesAllResponse>> CoachesAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.CoachesAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportCoachesAllResponse>("/{version}/{sport}/coaches", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CoachesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve coaches from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportCoachesByCountryIdResponse</returns>
        public SportCoachesByCountryIdResponse CoachesByCountryId(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportCoachesByCountryIdResponse> localVarResponse = CoachesByCountryIdWithHttpInfo(countryId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve coaches from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportCoachesByCountryIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportCoachesByCountryIdResponse> CoachesByCountryIdWithHttpInfo(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("countryId", Sportmonks.Net.Client.ClientUtils.ParameterToString(countryId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.CoachesByCountryId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportCoachesByCountryIdResponse>("/{version}/{sport}/coaches/countries/{countryId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CoachesByCountryId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve coaches from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportCoachesByCountryIdResponse</returns>
        public async System.Threading.Tasks.Task<SportCoachesByCountryIdResponse> CoachesByCountryIdAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportCoachesByCountryIdResponse> localVarResponse = await CoachesByCountryIdWithHttpInfoAsync(countryId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve coaches from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportCoachesByCountryIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportCoachesByCountryIdResponse>> CoachesByCountryIdWithHttpInfoAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("countryId", Sportmonks.Net.Client.ClientUtils.ParameterToString(countryId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.CoachesByCountryId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportCoachesByCountryIdResponse>("/{version}/{sport}/coaches/countries/{countryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CoachesByCountryId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Last updated 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportCoachesLatestResponse</returns>
        public SportCoachesLatestResponse CoachesLatest(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportCoachesLatestResponse> localVarResponse = CoachesLatestWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Last updated 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportCoachesLatestResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportCoachesLatestResponse> CoachesLatestWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.CoachesLatest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportCoachesLatestResponse>("/{version}/{sport}/coaches/latest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CoachesLatest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Last updated 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportCoachesLatestResponse</returns>
        public async System.Threading.Tasks.Task<SportCoachesLatestResponse> CoachesLatestAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportCoachesLatestResponse> localVarResponse = await CoachesLatestWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Last updated 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportCoachesLatestResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportCoachesLatestResponse>> CoachesLatestWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.CoachesLatest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportCoachesLatestResponse>("/{version}/{sport}/coaches/latest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CoachesLatest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportCoachesSearchResponse</returns>
        public SportCoachesSearchResponse CoachesSearch(string name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportCoachesSearchResponse> localVarResponse = CoachesSearchWithHttpInfo(name, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportCoachesSearchResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportCoachesSearchResponse> CoachesSearchWithHttpInfo(string name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling SportApi->CoachesSearch");
            }

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.CoachesSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportCoachesSearchResponse>("/{version}/{sport}/coaches/search/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CoachesSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportCoachesSearchResponse</returns>
        public async System.Threading.Tasks.Task<SportCoachesSearchResponse> CoachesSearchAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportCoachesSearchResponse> localVarResponse = await CoachesSearchWithHttpInfoAsync(name, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportCoachesSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportCoachesSearchResponse>> CoachesSearchWithHttpInfoAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling SportApi->CoachesSearch");
            }


            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.CoachesSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportCoachesSearchResponse>("/{version}/{sport}/coaches/search/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CoachesSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportCommentariesAllResponse</returns>
        public SportCommentariesAllResponse CommentariesAll(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportCommentariesAllResponse> localVarResponse = CommentariesAllWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportCommentariesAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportCommentariesAllResponse> CommentariesAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.CommentariesAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportCommentariesAllResponse>("/{version}/{sport}/commentaries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommentariesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportCommentariesAllResponse</returns>
        public async System.Threading.Tasks.Task<SportCommentariesAllResponse> CommentariesAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportCommentariesAllResponse> localVarResponse = await CommentariesAllWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportCommentariesAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportCommentariesAllResponse>> CommentariesAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.CommentariesAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportCommentariesAllResponse>("/{version}/{sport}/commentaries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommentariesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve commentaries from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportCommentariesByFixtureIdResponse</returns>
        public SportCommentariesByFixtureIdResponse CommentariesByFixtureId(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportCommentariesByFixtureIdResponse> localVarResponse = CommentariesByFixtureIdWithHttpInfo(fixtureId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve commentaries from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportCommentariesByFixtureIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportCommentariesByFixtureIdResponse> CommentariesByFixtureIdWithHttpInfo(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.CommentariesByFixtureId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportCommentariesByFixtureIdResponse>("/{version}/{sport}/commentaries/fixtures/{fixtureId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommentariesByFixtureId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve commentaries from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportCommentariesByFixtureIdResponse</returns>
        public async System.Threading.Tasks.Task<SportCommentariesByFixtureIdResponse> CommentariesByFixtureIdAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportCommentariesByFixtureIdResponse> localVarResponse = await CommentariesByFixtureIdWithHttpInfoAsync(fixtureId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve commentaries from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportCommentariesByFixtureIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportCommentariesByFixtureIdResponse>> CommentariesByFixtureIdWithHttpInfoAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.CommentariesByFixtureId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportCommentariesByFixtureIdResponse>("/{version}/{sport}/commentaries/fixtures/{fixtureId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CommentariesByFixtureId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Date Range for Team 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="teamId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportFixtureByDateRangeForTeamResponse</returns>
        public SportFixtureByDateRangeForTeamResponse FixtureByDateRangeForTeam(string startDate, string endDate, string teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportFixtureByDateRangeForTeamResponse> localVarResponse = FixtureByDateRangeForTeamWithHttpInfo(startDate, endDate, teamId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Date Range for Team 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="teamId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportFixtureByDateRangeForTeamResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportFixtureByDateRangeForTeamResponse> FixtureByDateRangeForTeamWithHttpInfo(string startDate, string endDate, string teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'startDate' when calling SportApi->FixtureByDateRangeForTeam");
            }

            // verify the required parameter 'endDate' is set
            if (endDate == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'endDate' when calling SportApi->FixtureByDateRangeForTeam");
            }

            // verify the required parameter 'teamId' is set
            if (teamId == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'teamId' when calling SportApi->FixtureByDateRangeForTeam");
            }

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("startDate", Sportmonks.Net.Client.ClientUtils.ParameterToString(startDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("endDate", Sportmonks.Net.Client.ClientUtils.ParameterToString(endDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.FixtureByDateRangeForTeam";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportFixtureByDateRangeForTeamResponse>("/{version}/{sport}/fixtures/between/{startDate}/{endDate}/{teamId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixtureByDateRangeForTeam", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Date Range for Team 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="teamId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportFixtureByDateRangeForTeamResponse</returns>
        public async System.Threading.Tasks.Task<SportFixtureByDateRangeForTeamResponse> FixtureByDateRangeForTeamAsync(string startDate, string endDate, string teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportFixtureByDateRangeForTeamResponse> localVarResponse = await FixtureByDateRangeForTeamWithHttpInfoAsync(startDate, endDate, teamId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Date Range for Team 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="teamId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportFixtureByDateRangeForTeamResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportFixtureByDateRangeForTeamResponse>> FixtureByDateRangeForTeamWithHttpInfoAsync(string startDate, string endDate, string teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'startDate' when calling SportApi->FixtureByDateRangeForTeam");
            }

            // verify the required parameter 'endDate' is set
            if (endDate == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'endDate' when calling SportApi->FixtureByDateRangeForTeam");
            }

            // verify the required parameter 'teamId' is set
            if (teamId == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'teamId' when calling SportApi->FixtureByDateRangeForTeam");
            }


            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("startDate", Sportmonks.Net.Client.ClientUtils.ParameterToString(startDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("endDate", Sportmonks.Net.Client.ClientUtils.ParameterToString(endDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.FixtureByDateRangeForTeam";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportFixtureByDateRangeForTeamResponse>("/{version}/{sport}/fixtures/between/{startDate}/{endDate}/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixtureByDateRangeForTeam", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportFixtureByIdResponse</returns>
        public SportFixtureByIdResponse FixtureById(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportFixtureByIdResponse> localVarResponse = FixtureByIdWithHttpInfo(fixtureId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportFixtureByIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportFixtureByIdResponse> FixtureByIdWithHttpInfo(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.FixtureById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportFixtureByIdResponse>("/{version}/{sport}/fixtures/{fixtureId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixtureById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportFixtureByIdResponse</returns>
        public async System.Threading.Tasks.Task<SportFixtureByIdResponse> FixtureByIdAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportFixtureByIdResponse> localVarResponse = await FixtureByIdWithHttpInfoAsync(fixtureId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportFixtureByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportFixtureByIdResponse>> FixtureByIdWithHttpInfoAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.FixtureById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportFixtureByIdResponse>("/{version}/{sport}/fixtures/{fixtureId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixtureById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportFixturesAllResponse</returns>
        public SportFixturesAllResponse FixturesAll(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportFixturesAllResponse> localVarResponse = FixturesAllWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportFixturesAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportFixturesAllResponse> FixturesAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.FixturesAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportFixturesAllResponse>("/{version}/{sport}/fixtures", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixturesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportFixturesAllResponse</returns>
        public async System.Threading.Tasks.Task<SportFixturesAllResponse> FixturesAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportFixturesAllResponse> localVarResponse = await FixturesAllWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportFixturesAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportFixturesAllResponse>> FixturesAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.FixturesAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportFixturesAllResponse>("/{version}/{sport}/fixtures", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixturesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Date 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The date you want to retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportFixturesByDateResponse</returns>
        public SportFixturesByDateResponse FixturesByDate(string date, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportFixturesByDateResponse> localVarResponse = FixturesByDateWithHttpInfo(date, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Date 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The date you want to retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportFixturesByDateResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportFixturesByDateResponse> FixturesByDateWithHttpInfo(string date, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'date' when calling SportApi->FixturesByDate");
            }

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("date", Sportmonks.Net.Client.ClientUtils.ParameterToString(date)); // path parameter

            localVarRequestOptions.Operation = "SportApi.FixturesByDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportFixturesByDateResponse>("/{version}/{sport}/fixtures/date/{date}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixturesByDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Date 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The date you want to retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportFixturesByDateResponse</returns>
        public async System.Threading.Tasks.Task<SportFixturesByDateResponse> FixturesByDateAsync(string date, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportFixturesByDateResponse> localVarResponse = await FixturesByDateWithHttpInfoAsync(date, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Date 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The date you want to retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportFixturesByDateResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportFixturesByDateResponse>> FixturesByDateWithHttpInfoAsync(string date, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'date' when calling SportApi->FixturesByDate");
            }


            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("date", Sportmonks.Net.Client.ClientUtils.ParameterToString(date)); // path parameter

            localVarRequestOptions.Operation = "SportApi.FixturesByDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportFixturesByDateResponse>("/{version}/{sport}/fixtures/date/{date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixturesByDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Date Range 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date you want to retrieve fixtures from.</param>
        /// <param name="endDate">The end date you want to retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportFixturesByDateRangeResponse</returns>
        public SportFixturesByDateRangeResponse FixturesByDateRange(string startDate, string endDate, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportFixturesByDateRangeResponse> localVarResponse = FixturesByDateRangeWithHttpInfo(startDate, endDate, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Date Range 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date you want to retrieve fixtures from.</param>
        /// <param name="endDate">The end date you want to retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportFixturesByDateRangeResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportFixturesByDateRangeResponse> FixturesByDateRangeWithHttpInfo(string startDate, string endDate, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'startDate' when calling SportApi->FixturesByDateRange");
            }

            // verify the required parameter 'endDate' is set
            if (endDate == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'endDate' when calling SportApi->FixturesByDateRange");
            }

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("startDate", Sportmonks.Net.Client.ClientUtils.ParameterToString(startDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("endDate", Sportmonks.Net.Client.ClientUtils.ParameterToString(endDate)); // path parameter

            localVarRequestOptions.Operation = "SportApi.FixturesByDateRange";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportFixturesByDateRangeResponse>("/{version}/{sport}/fixtures/between/{startDate}/{endDate}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixturesByDateRange", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Date Range 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date you want to retrieve fixtures from.</param>
        /// <param name="endDate">The end date you want to retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportFixturesByDateRangeResponse</returns>
        public async System.Threading.Tasks.Task<SportFixturesByDateRangeResponse> FixturesByDateRangeAsync(string startDate, string endDate, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportFixturesByDateRangeResponse> localVarResponse = await FixturesByDateRangeWithHttpInfoAsync(startDate, endDate, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Date Range 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date you want to retrieve fixtures from.</param>
        /// <param name="endDate">The end date you want to retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportFixturesByDateRangeResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportFixturesByDateRangeResponse>> FixturesByDateRangeWithHttpInfoAsync(string startDate, string endDate, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'startDate' when calling SportApi->FixturesByDateRange");
            }

            // verify the required parameter 'endDate' is set
            if (endDate == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'endDate' when calling SportApi->FixturesByDateRange");
            }


            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("startDate", Sportmonks.Net.Client.ClientUtils.ParameterToString(startDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("endDate", Sportmonks.Net.Client.ClientUtils.ParameterToString(endDate)); // path parameter

            localVarRequestOptions.Operation = "SportApi.FixturesByDateRange";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportFixturesByDateRangeResponse>("/{version}/{sport}/fixtures/between/{startDate}/{endDate}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixturesByDateRange", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By IDs 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureIds">The IDs you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportFixturesByIdsResponse</returns>
        public SportFixturesByIdsResponse FixturesByIds(string fixtureIds, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportFixturesByIdsResponse> localVarResponse = FixturesByIdsWithHttpInfo(fixtureIds, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By IDs 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureIds">The IDs you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportFixturesByIdsResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportFixturesByIdsResponse> FixturesByIdsWithHttpInfo(string fixtureIds, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'fixtureIds' is set
            if (fixtureIds == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'fixtureIds' when calling SportApi->FixturesByIds");
            }

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureIds", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureIds)); // path parameter

            localVarRequestOptions.Operation = "SportApi.FixturesByIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportFixturesByIdsResponse>("/{version}/{sport}/fixtures/multi/{fixtureIds}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixturesByIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By IDs 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureIds">The IDs you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportFixturesByIdsResponse</returns>
        public async System.Threading.Tasks.Task<SportFixturesByIdsResponse> FixturesByIdsAsync(string fixtureIds, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportFixturesByIdsResponse> localVarResponse = await FixturesByIdsWithHttpInfoAsync(fixtureIds, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By IDs 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureIds">The IDs you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportFixturesByIdsResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportFixturesByIdsResponse>> FixturesByIdsWithHttpInfoAsync(string fixtureIds, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fixtureIds' is set
            if (fixtureIds == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'fixtureIds' when calling SportApi->FixturesByIds");
            }


            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureIds", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureIds)); // path parameter

            localVarRequestOptions.Operation = "SportApi.FixturesByIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportFixturesByIdsResponse>("/{version}/{sport}/fixtures/multi/{fixtureIds}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixturesByIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Head to Head 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstTeam">The ID of the first team retrieve fixtures from.</param>
        /// <param name="secondTeam">The ID of the second team retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportFixturesHeadToHeadResponse</returns>
        public SportFixturesHeadToHeadResponse FixturesHeadToHead(int firstTeam, int secondTeam, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportFixturesHeadToHeadResponse> localVarResponse = FixturesHeadToHeadWithHttpInfo(firstTeam, secondTeam, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Head to Head 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstTeam">The ID of the first team retrieve fixtures from.</param>
        /// <param name="secondTeam">The ID of the second team retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportFixturesHeadToHeadResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportFixturesHeadToHeadResponse> FixturesHeadToHeadWithHttpInfo(int firstTeam, int secondTeam, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("firstTeam", Sportmonks.Net.Client.ClientUtils.ParameterToString(firstTeam)); // path parameter
            localVarRequestOptions.PathParameters.Add("secondTeam", Sportmonks.Net.Client.ClientUtils.ParameterToString(secondTeam)); // path parameter

            localVarRequestOptions.Operation = "SportApi.FixturesHeadToHead";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportFixturesHeadToHeadResponse>("/{version}/{sport}/fixtures/head-to-head/{firstTeam}/{secondTeam}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixturesHeadToHead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Head to Head 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstTeam">The ID of the first team retrieve fixtures from.</param>
        /// <param name="secondTeam">The ID of the second team retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportFixturesHeadToHeadResponse</returns>
        public async System.Threading.Tasks.Task<SportFixturesHeadToHeadResponse> FixturesHeadToHeadAsync(int firstTeam, int secondTeam, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportFixturesHeadToHeadResponse> localVarResponse = await FixturesHeadToHeadWithHttpInfoAsync(firstTeam, secondTeam, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Head to Head 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstTeam">The ID of the first team retrieve fixtures from.</param>
        /// <param name="secondTeam">The ID of the second team retrieve fixtures from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportFixturesHeadToHeadResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportFixturesHeadToHeadResponse>> FixturesHeadToHeadWithHttpInfoAsync(int firstTeam, int secondTeam, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("firstTeam", Sportmonks.Net.Client.ClientUtils.ParameterToString(firstTeam)); // path parameter
            localVarRequestOptions.PathParameters.Add("secondTeam", Sportmonks.Net.Client.ClientUtils.ParameterToString(secondTeam)); // path parameter

            localVarRequestOptions.Operation = "SportApi.FixturesHeadToHead";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportFixturesHeadToHeadResponse>("/{version}/{sport}/fixtures/head-to-head/{firstTeam}/{secondTeam}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixturesHeadToHead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Last Updated 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string FixturesLatest(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<string> localVarResponse = FixturesLatestWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Last Updated 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Sportmonks.Net.Client.ApiResponse<string> FixturesLatestWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.FixturesLatest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/{version}/{sport}/fixtures/latest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixturesLatest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Last Updated 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> FixturesLatestAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<string> localVarResponse = await FixturesLatestWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Last Updated 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<string>> FixturesLatestWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.FixturesLatest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/{version}/{sport}/fixtures/latest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixturesLatest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportFixturesSearchResponse</returns>
        public SportFixturesSearchResponse FixturesSearch(string name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportFixturesSearchResponse> localVarResponse = FixturesSearchWithHttpInfo(name, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportFixturesSearchResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportFixturesSearchResponse> FixturesSearchWithHttpInfo(string name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling SportApi->FixturesSearch");
            }

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.FixturesSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportFixturesSearchResponse>("/{version}/{sport}/fixtures/search/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixturesSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportFixturesSearchResponse</returns>
        public async System.Threading.Tasks.Task<SportFixturesSearchResponse> FixturesSearchAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportFixturesSearchResponse> localVarResponse = await FixturesSearchWithHttpInfoAsync(name, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportFixturesSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportFixturesSearchResponse>> FixturesSearchWithHttpInfoAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling SportApi->FixturesSearch");
            }


            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.FixturesSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportFixturesSearchResponse>("/{version}/{sport}/fixtures/search/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FixturesSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLeagueByIdResponse</returns>
        public SportLeagueByIdResponse LeagueById(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportLeagueByIdResponse> localVarResponse = LeagueByIdWithHttpInfo(leagueId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLeagueByIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportLeagueByIdResponse> LeagueByIdWithHttpInfo(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("leagueId", Sportmonks.Net.Client.ClientUtils.ParameterToString(leagueId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.LeagueById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportLeagueByIdResponse>("/{version}/{sport}/leagues/{leagueId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeagueById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLeagueByIdResponse</returns>
        public async System.Threading.Tasks.Task<SportLeagueByIdResponse> LeagueByIdAsync(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportLeagueByIdResponse> localVarResponse = await LeagueByIdWithHttpInfoAsync(leagueId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLeagueByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportLeagueByIdResponse>> LeagueByIdWithHttpInfoAsync(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("leagueId", Sportmonks.Net.Client.ClientUtils.ParameterToString(leagueId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.LeagueById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportLeagueByIdResponse>("/{version}/{sport}/leagues/{leagueId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeagueById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enrichments 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve enrichments from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object LeagueEnrichments(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = LeagueEnrichmentsWithHttpInfo(leagueId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enrichments 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve enrichments from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Sportmonks.Net.Client.ApiResponse<Object> LeagueEnrichmentsWithHttpInfo(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("leagueId", Sportmonks.Net.Client.ClientUtils.ParameterToString(leagueId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.LeagueEnrichments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/{version}/{sport}/leagues/{leagueId}/includes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeagueEnrichments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enrichments 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve enrichments from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LeagueEnrichmentsAsync(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = await LeagueEnrichmentsWithHttpInfoAsync(leagueId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enrichments 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve enrichments from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<Object>> LeagueEnrichmentsWithHttpInfoAsync(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("leagueId", Sportmonks.Net.Client.ClientUtils.ParameterToString(leagueId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.LeagueEnrichments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/{version}/{sport}/leagues/{leagueId}/includes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeagueEnrichments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Shirts By League ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object LeagueShirts(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = LeagueShirtsWithHttpInfo(leagueId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Shirts By League ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Sportmonks.Net.Client.ApiResponse<Object> LeagueShirtsWithHttpInfo(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("leagueId", Sportmonks.Net.Client.ClientUtils.ParameterToString(leagueId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.LeagueShirts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/{version}/{sport}/leagues/{leagueId}/jerseys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeagueShirts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Shirts By League ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LeagueShirtsAsync(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = await LeagueShirtsWithHttpInfoAsync(leagueId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Shirts By League ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<Object>> LeagueShirtsWithHttpInfoAsync(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("leagueId", Sportmonks.Net.Client.ClientUtils.ParameterToString(leagueId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.LeagueShirts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/{version}/{sport}/leagues/{leagueId}/jerseys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeagueShirts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLeaguesAllResponse</returns>
        public SportLeaguesAllResponse LeaguesAll(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportLeaguesAllResponse> localVarResponse = LeaguesAllWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLeaguesAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportLeaguesAllResponse> LeaguesAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.LeaguesAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportLeaguesAllResponse>("/{version}/{sport}/leagues", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaguesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLeaguesAllResponse</returns>
        public async System.Threading.Tasks.Task<SportLeaguesAllResponse> LeaguesAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportLeaguesAllResponse> localVarResponse = await LeaguesAllWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLeaguesAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportLeaguesAllResponse>> LeaguesAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.LeaguesAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportLeaguesAllResponse>("/{version}/{sport}/leagues", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaguesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLeaguesByCountryIdResponse</returns>
        public SportLeaguesByCountryIdResponse LeaguesByCountryId(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportLeaguesByCountryIdResponse> localVarResponse = LeaguesByCountryIdWithHttpInfo(countryId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLeaguesByCountryIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportLeaguesByCountryIdResponse> LeaguesByCountryIdWithHttpInfo(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("countryId", Sportmonks.Net.Client.ClientUtils.ParameterToString(countryId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.LeaguesByCountryId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportLeaguesByCountryIdResponse>("/{version}/{sport}/leagues/countries/{countryId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaguesByCountryId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLeaguesByCountryIdResponse</returns>
        public async System.Threading.Tasks.Task<SportLeaguesByCountryIdResponse> LeaguesByCountryIdAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportLeaguesByCountryIdResponse> localVarResponse = await LeaguesByCountryIdWithHttpInfoAsync(countryId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLeaguesByCountryIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportLeaguesByCountryIdResponse>> LeaguesByCountryIdWithHttpInfoAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("countryId", Sportmonks.Net.Client.ClientUtils.ParameterToString(countryId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.LeaguesByCountryId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportLeaguesByCountryIdResponse>("/{version}/{sport}/leagues/countries/{countryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaguesByCountryId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Date 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The date of fixtures you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLeaguesByDateResponse</returns>
        public SportLeaguesByDateResponse LeaguesByDate(string date, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportLeaguesByDateResponse> localVarResponse = LeaguesByDateWithHttpInfo(date, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Date 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The date of fixtures you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLeaguesByDateResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportLeaguesByDateResponse> LeaguesByDateWithHttpInfo(string date, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'date' when calling SportApi->LeaguesByDate");
            }

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("date", Sportmonks.Net.Client.ClientUtils.ParameterToString(date)); // path parameter

            localVarRequestOptions.Operation = "SportApi.LeaguesByDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportLeaguesByDateResponse>("/{version}/{sport}/leagues/date/{date}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaguesByDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Date 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The date of fixtures you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLeaguesByDateResponse</returns>
        public async System.Threading.Tasks.Task<SportLeaguesByDateResponse> LeaguesByDateAsync(string date, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportLeaguesByDateResponse> localVarResponse = await LeaguesByDateWithHttpInfoAsync(date, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Date 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">The date of fixtures you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLeaguesByDateResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportLeaguesByDateResponse>> LeaguesByDateWithHttpInfoAsync(string date, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'date' when calling SportApi->LeaguesByDate");
            }


            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("date", Sportmonks.Net.Client.ClientUtils.ParameterToString(date)); // path parameter

            localVarRequestOptions.Operation = "SportApi.LeaguesByDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportLeaguesByDateResponse>("/{version}/{sport}/leagues/date/{date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaguesByDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Leagues By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object LeaguesByTeamId(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = LeaguesByTeamIdWithHttpInfo(teamId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Leagues By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Sportmonks.Net.Client.ApiResponse<Object> LeaguesByTeamIdWithHttpInfo(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.LeaguesByTeamId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/{version}/{sport}/teams/{teamId}/leagues", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaguesByTeamId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Leagues By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LeaguesByTeamIdAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = await LeaguesByTeamIdWithHttpInfoAsync(teamId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Leagues By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<Object>> LeaguesByTeamIdWithHttpInfoAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.LeaguesByTeamId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/{version}/{sport}/teams/{teamId}/leagues", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaguesByTeamId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Current Leagues By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve current leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object LeaguesCurrentByTeamId(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = LeaguesCurrentByTeamIdWithHttpInfo(teamId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Current Leagues By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve current leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Sportmonks.Net.Client.ApiResponse<Object> LeaguesCurrentByTeamIdWithHttpInfo(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.LeaguesCurrentByTeamId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/{version}/{sport}/teams/{teamId}/leagues/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaguesCurrentByTeamId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Current Leagues By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve current leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LeaguesCurrentByTeamIdAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = await LeaguesCurrentByTeamIdWithHttpInfoAsync(teamId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Current Leagues By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve current leagues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<Object>> LeaguesCurrentByTeamIdWithHttpInfoAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.LeaguesCurrentByTeamId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/{version}/{sport}/teams/{teamId}/leagues/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaguesCurrentByTeamId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Live 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLeaguesLiveResponse</returns>
        public SportLeaguesLiveResponse LeaguesLive(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportLeaguesLiveResponse> localVarResponse = LeaguesLiveWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Live 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLeaguesLiveResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportLeaguesLiveResponse> LeaguesLiveWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.LeaguesLive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportLeaguesLiveResponse>("/{version}/{sport}/leagues/live", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaguesLive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Live 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLeaguesLiveResponse</returns>
        public async System.Threading.Tasks.Task<SportLeaguesLiveResponse> LeaguesLiveAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportLeaguesLiveResponse> localVarResponse = await LeaguesLiveWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Live 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLeaguesLiveResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportLeaguesLiveResponse>> LeaguesLiveWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.LeaguesLive";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportLeaguesLiveResponse>("/{version}/{sport}/leagues/live", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaguesLive", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLeaguesSearchResponse</returns>
        public SportLeaguesSearchResponse LeaguesSearch(string name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportLeaguesSearchResponse> localVarResponse = LeaguesSearchWithHttpInfo(name, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLeaguesSearchResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportLeaguesSearchResponse> LeaguesSearchWithHttpInfo(string name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling SportApi->LeaguesSearch");
            }

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.LeaguesSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportLeaguesSearchResponse>("/{version}/{sport}/leagues/search/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaguesSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLeaguesSearchResponse</returns>
        public async System.Threading.Tasks.Task<SportLeaguesSearchResponse> LeaguesSearchAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportLeaguesSearchResponse> localVarResponse = await LeaguesSearchWithHttpInfoAsync(name, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLeaguesSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportLeaguesSearchResponse>> LeaguesSearchWithHttpInfoAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling SportApi->LeaguesSearch");
            }


            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.LeaguesSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportLeaguesSearchResponse>("/{version}/{sport}/leagues/search/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaguesSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLivescoresAllResponse</returns>
        public SportLivescoresAllResponse LivescoresAll(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportLivescoresAllResponse> localVarResponse = LivescoresAllWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLivescoresAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportLivescoresAllResponse> LivescoresAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.LivescoresAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportLivescoresAllResponse>("/{version}/{sport}/livescores", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LivescoresAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLivescoresAllResponse</returns>
        public async System.Threading.Tasks.Task<SportLivescoresAllResponse> LivescoresAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportLivescoresAllResponse> localVarResponse = await LivescoresAllWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLivescoresAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportLivescoresAllResponse>> LivescoresAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.LivescoresAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportLivescoresAllResponse>("/{version}/{sport}/livescores", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LivescoresAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All In-play 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLivescoresAllInPlayResponse</returns>
        public SportLivescoresAllInPlayResponse LivescoresAllInPlay(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportLivescoresAllInPlayResponse> localVarResponse = LivescoresAllInPlayWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All In-play 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLivescoresAllInPlayResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportLivescoresAllInPlayResponse> LivescoresAllInPlayWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.LivescoresAllInPlay";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportLivescoresAllInPlayResponse>("/{version}/{sport}/livescores/inplay", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LivescoresAllInPlay", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All In-play 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLivescoresAllInPlayResponse</returns>
        public async System.Threading.Tasks.Task<SportLivescoresAllInPlayResponse> LivescoresAllInPlayAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportLivescoresAllInPlayResponse> localVarResponse = await LivescoresAllInPlayWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All In-play 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLivescoresAllInPlayResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportLivescoresAllInPlayResponse>> LivescoresAllInPlayWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.LivescoresAllInPlay";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportLivescoresAllInPlayResponse>("/{version}/{sport}/livescores/inplay", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LivescoresAllInPlay", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Last Updated In-play 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportLivescoresLatestResponse</returns>
        public SportLivescoresLatestResponse LivescoresLatest(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportLivescoresLatestResponse> localVarResponse = LivescoresLatestWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Last Updated In-play 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportLivescoresLatestResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportLivescoresLatestResponse> LivescoresLatestWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.LivescoresLatest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportLivescoresLatestResponse>("/{version}/{sport}/livescores/latest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LivescoresLatest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Last Updated In-play 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportLivescoresLatestResponse</returns>
        public async System.Threading.Tasks.Task<SportLivescoresLatestResponse> LivescoresLatestAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportLivescoresLatestResponse> localVarResponse = await LivescoresLatestWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Last Updated In-play 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportLivescoresLatestResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportLivescoresLatestResponse>> LivescoresLatestWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.LivescoresLatest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportLivescoresLatestResponse>("/{version}/{sport}/livescores/latest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LivescoresLatest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All Post Match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string NewsAllPostMatch(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<string> localVarResponse = NewsAllPostMatchWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All Post Match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Sportmonks.Net.Client.ApiResponse<string> NewsAllPostMatchWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.NewsAllPostMatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/{version}/{sport}/news/post-match", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewsAllPostMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All Post Match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> NewsAllPostMatchAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<string> localVarResponse = await NewsAllPostMatchWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All Post Match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<string>> NewsAllPostMatchWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.NewsAllPostMatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/{version}/{sport}/news/post-match", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewsAllPostMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All Pre-match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportNewsAllPreMatchResponse</returns>
        public SportNewsAllPreMatchResponse NewsAllPreMatch(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportNewsAllPreMatchResponse> localVarResponse = NewsAllPreMatchWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All Pre-match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportNewsAllPreMatchResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportNewsAllPreMatchResponse> NewsAllPreMatchWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.NewsAllPreMatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportNewsAllPreMatchResponse>("/{version}/{sport}/news/pre-match", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewsAllPreMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All Pre-match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportNewsAllPreMatchResponse</returns>
        public async System.Threading.Tasks.Task<SportNewsAllPreMatchResponse> NewsAllPreMatchAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportNewsAllPreMatchResponse> localVarResponse = await NewsAllPreMatchWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All Pre-match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportNewsAllPreMatchResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportNewsAllPreMatchResponse>> NewsAllPreMatchWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.NewsAllPreMatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportNewsAllPreMatchResponse>("/{version}/{sport}/news/pre-match", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewsAllPreMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Post Match by Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve post-match news from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string NewsPostMatchBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<string> localVarResponse = NewsPostMatchBySeasonIdWithHttpInfo(seasonId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Post Match by Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve post-match news from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Sportmonks.Net.Client.ApiResponse<string> NewsPostMatchBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.NewsPostMatchBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/{version}/{sport}/news/post-match/seasons/{seasonId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewsPostMatchBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Post Match by Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve post-match news from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> NewsPostMatchBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<string> localVarResponse = await NewsPostMatchBySeasonIdWithHttpInfoAsync(seasonId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Post Match by Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve post-match news from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<string>> NewsPostMatchBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.NewsPostMatchBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/{version}/{sport}/news/post-match/seasons/{seasonId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewsPostMatchBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pre-match By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve post-match news from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportNewsPreMatchBySeasonIdResponse</returns>
        public SportNewsPreMatchBySeasonIdResponse NewsPreMatchBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportNewsPreMatchBySeasonIdResponse> localVarResponse = NewsPreMatchBySeasonIdWithHttpInfo(seasonId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pre-match By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve post-match news from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportNewsPreMatchBySeasonIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportNewsPreMatchBySeasonIdResponse> NewsPreMatchBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.NewsPreMatchBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportNewsPreMatchBySeasonIdResponse>("/{version}/{sport}/news/pre-match/seasons/{seasonId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewsPreMatchBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pre-match By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve post-match news from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportNewsPreMatchBySeasonIdResponse</returns>
        public async System.Threading.Tasks.Task<SportNewsPreMatchBySeasonIdResponse> NewsPreMatchBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportNewsPreMatchBySeasonIdResponse> localVarResponse = await NewsPreMatchBySeasonIdWithHttpInfoAsync(seasonId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pre-match By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve post-match news from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportNewsPreMatchBySeasonIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportNewsPreMatchBySeasonIdResponse>> NewsPreMatchBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.NewsPreMatchBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportNewsPreMatchBySeasonIdResponse>("/{version}/{sport}/news/pre-match/seasons/{seasonId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewsPreMatchBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upcoming Post Match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string NewsUpcomingPostMatch(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<string> localVarResponse = NewsUpcomingPostMatchWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upcoming Post Match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Sportmonks.Net.Client.ApiResponse<string> NewsUpcomingPostMatchWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.NewsUpcomingPostMatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/{version}/{sport}/news/post-match/upcoming", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewsUpcomingPostMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upcoming Post Match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> NewsUpcomingPostMatchAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<string> localVarResponse = await NewsUpcomingPostMatchWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upcoming Post Match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<string>> NewsUpcomingPostMatchWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.NewsUpcomingPostMatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/{version}/{sport}/news/post-match/upcoming", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewsUpcomingPostMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upcoming Pre-match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportNewsUpcomingPreMatchResponse</returns>
        public SportNewsUpcomingPreMatchResponse NewsUpcomingPreMatch(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportNewsUpcomingPreMatchResponse> localVarResponse = NewsUpcomingPreMatchWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upcoming Pre-match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportNewsUpcomingPreMatchResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportNewsUpcomingPreMatchResponse> NewsUpcomingPreMatchWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.NewsUpcomingPreMatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportNewsUpcomingPreMatchResponse>("/{version}/{sport}/news/pre-match/upcoming", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewsUpcomingPreMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upcoming Pre-match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportNewsUpcomingPreMatchResponse</returns>
        public async System.Threading.Tasks.Task<SportNewsUpcomingPreMatchResponse> NewsUpcomingPreMatchAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportNewsUpcomingPreMatchResponse> localVarResponse = await NewsUpcomingPreMatchWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upcoming Pre-match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportNewsUpcomingPreMatchResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportNewsUpcomingPreMatchResponse>> NewsUpcomingPreMatchWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.NewsUpcomingPreMatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportNewsUpcomingPreMatchResponse>("/{version}/{sport}/news/pre-match/upcoming", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewsUpcomingPreMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All In-play 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportOddsAllInPlayResponse</returns>
        public SportOddsAllInPlayResponse OddsAllInPlay(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportOddsAllInPlayResponse> localVarResponse = OddsAllInPlayWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All In-play 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportOddsAllInPlayResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportOddsAllInPlayResponse> OddsAllInPlayWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.OddsAllInPlay";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportOddsAllInPlayResponse>("/{version}/{sport}/odds/inplay", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsAllInPlay", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All In-play 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportOddsAllInPlayResponse</returns>
        public async System.Threading.Tasks.Task<SportOddsAllInPlayResponse> OddsAllInPlayAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportOddsAllInPlayResponse> localVarResponse = await OddsAllInPlayWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All In-play 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportOddsAllInPlayResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportOddsAllInPlayResponse>> OddsAllInPlayWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.OddsAllInPlay";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportOddsAllInPlayResponse>("/{version}/{sport}/odds/inplay", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsAllInPlay", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All Pre-match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportOddsAllPreMatchResponse</returns>
        public SportOddsAllPreMatchResponse OddsAllPreMatch(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportOddsAllPreMatchResponse> localVarResponse = OddsAllPreMatchWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All Pre-match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportOddsAllPreMatchResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportOddsAllPreMatchResponse> OddsAllPreMatchWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.OddsAllPreMatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportOddsAllPreMatchResponse>("/{version}/{sport}/odds/pre-match", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsAllPreMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All Pre-match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportOddsAllPreMatchResponse</returns>
        public async System.Threading.Tasks.Task<SportOddsAllPreMatchResponse> OddsAllPreMatchAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportOddsAllPreMatchResponse> localVarResponse = await OddsAllPreMatchWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All Pre-match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportOddsAllPreMatchResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportOddsAllPreMatchResponse>> OddsAllPreMatchWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.OddsAllPreMatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportOddsAllPreMatchResponse>("/{version}/{sport}/odds/pre-match", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsAllPreMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// In-play by Fixture and Bookmaker ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object OddsInPlayByFixtureAndBookmakerId(int fixtureId, int bookmakerId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = OddsInPlayByFixtureAndBookmakerIdWithHttpInfo(fixtureId, bookmakerId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// In-play by Fixture and Bookmaker ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Sportmonks.Net.Client.ApiResponse<Object> OddsInPlayByFixtureAndBookmakerIdWithHttpInfo(int fixtureId, int bookmakerId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter
            localVarRequestOptions.PathParameters.Add("bookmakerId", Sportmonks.Net.Client.ClientUtils.ParameterToString(bookmakerId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.OddsInPlayByFixtureAndBookmakerId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/{version}/{sport}/odds/inplay/fixtures/{fixtureId}/bookmakers/{bookmakerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsInPlayByFixtureAndBookmakerId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// In-play by Fixture and Bookmaker ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> OddsInPlayByFixtureAndBookmakerIdAsync(int fixtureId, int bookmakerId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = await OddsInPlayByFixtureAndBookmakerIdWithHttpInfoAsync(fixtureId, bookmakerId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// In-play by Fixture and Bookmaker ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<Object>> OddsInPlayByFixtureAndBookmakerIdWithHttpInfoAsync(int fixtureId, int bookmakerId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter
            localVarRequestOptions.PathParameters.Add("bookmakerId", Sportmonks.Net.Client.ClientUtils.ParameterToString(bookmakerId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.OddsInPlayByFixtureAndBookmakerId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/{version}/{sport}/odds/inplay/fixtures/{fixtureId}/bookmakers/{bookmakerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsInPlayByFixtureAndBookmakerId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// In-play by Fixture and Market ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="marketId">The ID of the market you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object OddsInPlayByFixtureAndMarketId(int fixtureId, int marketId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = OddsInPlayByFixtureAndMarketIdWithHttpInfo(fixtureId, marketId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// In-play by Fixture and Market ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="marketId">The ID of the market you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Sportmonks.Net.Client.ApiResponse<Object> OddsInPlayByFixtureAndMarketIdWithHttpInfo(int fixtureId, int marketId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter
            localVarRequestOptions.PathParameters.Add("marketId", Sportmonks.Net.Client.ClientUtils.ParameterToString(marketId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.OddsInPlayByFixtureAndMarketId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/{version}/{sport}/odds/inplay/fixtures/{fixtureId}/markets/{marketId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsInPlayByFixtureAndMarketId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// In-play by Fixture and Market ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="marketId">The ID of the market you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> OddsInPlayByFixtureAndMarketIdAsync(int fixtureId, int marketId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = await OddsInPlayByFixtureAndMarketIdWithHttpInfoAsync(fixtureId, marketId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// In-play by Fixture and Market ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="marketId">The ID of the market you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<Object>> OddsInPlayByFixtureAndMarketIdWithHttpInfoAsync(int fixtureId, int marketId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter
            localVarRequestOptions.PathParameters.Add("marketId", Sportmonks.Net.Client.ClientUtils.ParameterToString(marketId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.OddsInPlayByFixtureAndMarketId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/{version}/{sport}/odds/inplay/fixtures/{fixtureId}/markets/{marketId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsInPlayByFixtureAndMarketId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// In-play by Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportOddsInPlayByFixtureIdResponse</returns>
        public SportOddsInPlayByFixtureIdResponse OddsInPlayByFixtureId(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportOddsInPlayByFixtureIdResponse> localVarResponse = OddsInPlayByFixtureIdWithHttpInfo(fixtureId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// In-play by Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportOddsInPlayByFixtureIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportOddsInPlayByFixtureIdResponse> OddsInPlayByFixtureIdWithHttpInfo(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.OddsInPlayByFixtureId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportOddsInPlayByFixtureIdResponse>("/{version}/{sport}/odds/inplay/fixtures/{fixtureId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsInPlayByFixtureId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// In-play by Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportOddsInPlayByFixtureIdResponse</returns>
        public async System.Threading.Tasks.Task<SportOddsInPlayByFixtureIdResponse> OddsInPlayByFixtureIdAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportOddsInPlayByFixtureIdResponse> localVarResponse = await OddsInPlayByFixtureIdWithHttpInfoAsync(fixtureId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// In-play by Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve in-play odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportOddsInPlayByFixtureIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportOddsInPlayByFixtureIdResponse>> OddsInPlayByFixtureIdWithHttpInfoAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.OddsInPlayByFixtureId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportOddsInPlayByFixtureIdResponse>("/{version}/{sport}/odds/inplay/fixtures/{fixtureId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsInPlayByFixtureId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Latest In-play 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object OddsLatestInPlay(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = OddsLatestInPlayWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Latest In-play 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Sportmonks.Net.Client.ApiResponse<Object> OddsLatestInPlayWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.OddsLatestInPlay";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/{version}/{sport}/odds/inplay/latest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsLatestInPlay", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Latest In-play 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> OddsLatestInPlayAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = await OddsLatestInPlayWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Latest In-play 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<Object>> OddsLatestInPlayWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.OddsLatestInPlay";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/{version}/{sport}/odds/inplay/latest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsLatestInPlay", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Last Updated Pre-match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object OddsLatestPreMatch(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = OddsLatestPreMatchWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Last Updated Pre-match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Sportmonks.Net.Client.ApiResponse<Object> OddsLatestPreMatchWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.OddsLatestPreMatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/{version}/{sport}/odds/pre-match/latest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsLatestPreMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Last Updated Pre-match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> OddsLatestPreMatchAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = await OddsLatestPreMatchWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Last Updated Pre-match 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<Object>> OddsLatestPreMatchWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.OddsLatestPreMatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/{version}/{sport}/odds/pre-match/latest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsLatestPreMatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pre-match by Fixture and Bookmaker ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportOddsPreMatchByFixtureAndBookmakerIdResponse</returns>
        public SportOddsPreMatchByFixtureAndBookmakerIdResponse OddsPreMatchByFixtureAndBookmakerId(int fixtureId, int bookmakerId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportOddsPreMatchByFixtureAndBookmakerIdResponse> localVarResponse = OddsPreMatchByFixtureAndBookmakerIdWithHttpInfo(fixtureId, bookmakerId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pre-match by Fixture and Bookmaker ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportOddsPreMatchByFixtureAndBookmakerIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportOddsPreMatchByFixtureAndBookmakerIdResponse> OddsPreMatchByFixtureAndBookmakerIdWithHttpInfo(int fixtureId, int bookmakerId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter
            localVarRequestOptions.PathParameters.Add("bookmakerId", Sportmonks.Net.Client.ClientUtils.ParameterToString(bookmakerId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.OddsPreMatchByFixtureAndBookmakerId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportOddsPreMatchByFixtureAndBookmakerIdResponse>("/{version}/{sport}/odds/pre-match/fixtures/{fixtureId}/bookmakers/{bookmakerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsPreMatchByFixtureAndBookmakerId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pre-match by Fixture and Bookmaker ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportOddsPreMatchByFixtureAndBookmakerIdResponse</returns>
        public async System.Threading.Tasks.Task<SportOddsPreMatchByFixtureAndBookmakerIdResponse> OddsPreMatchByFixtureAndBookmakerIdAsync(int fixtureId, int bookmakerId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportOddsPreMatchByFixtureAndBookmakerIdResponse> localVarResponse = await OddsPreMatchByFixtureAndBookmakerIdWithHttpInfoAsync(fixtureId, bookmakerId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pre-match by Fixture and Bookmaker ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="bookmakerId">The ID of the bookmaker you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportOddsPreMatchByFixtureAndBookmakerIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportOddsPreMatchByFixtureAndBookmakerIdResponse>> OddsPreMatchByFixtureAndBookmakerIdWithHttpInfoAsync(int fixtureId, int bookmakerId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter
            localVarRequestOptions.PathParameters.Add("bookmakerId", Sportmonks.Net.Client.ClientUtils.ParameterToString(bookmakerId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.OddsPreMatchByFixtureAndBookmakerId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportOddsPreMatchByFixtureAndBookmakerIdResponse>("/{version}/{sport}/odds/pre-match/fixtures/{fixtureId}/bookmakers/{bookmakerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsPreMatchByFixtureAndBookmakerId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pre-match by Fixture and Market ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="marketId">The ID of the market you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportOddsPreMatchByFixtureAndMarketIdResponse</returns>
        public SportOddsPreMatchByFixtureAndMarketIdResponse OddsPreMatchByFixtureAndMarketId(int fixtureId, int marketId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportOddsPreMatchByFixtureAndMarketIdResponse> localVarResponse = OddsPreMatchByFixtureAndMarketIdWithHttpInfo(fixtureId, marketId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pre-match by Fixture and Market ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="marketId">The ID of the market you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportOddsPreMatchByFixtureAndMarketIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportOddsPreMatchByFixtureAndMarketIdResponse> OddsPreMatchByFixtureAndMarketIdWithHttpInfo(int fixtureId, int marketId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter
            localVarRequestOptions.PathParameters.Add("marketId", Sportmonks.Net.Client.ClientUtils.ParameterToString(marketId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.OddsPreMatchByFixtureAndMarketId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportOddsPreMatchByFixtureAndMarketIdResponse>("/{version}/{sport}/odds/pre-match/fixtures/{fixtureId}/markets/{marketId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsPreMatchByFixtureAndMarketId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pre-match by Fixture and Market ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="marketId">The ID of the market you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportOddsPreMatchByFixtureAndMarketIdResponse</returns>
        public async System.Threading.Tasks.Task<SportOddsPreMatchByFixtureAndMarketIdResponse> OddsPreMatchByFixtureAndMarketIdAsync(int fixtureId, int marketId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportOddsPreMatchByFixtureAndMarketIdResponse> localVarResponse = await OddsPreMatchByFixtureAndMarketIdWithHttpInfoAsync(fixtureId, marketId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pre-match by Fixture and Market ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="marketId">The ID of the market you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportOddsPreMatchByFixtureAndMarketIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportOddsPreMatchByFixtureAndMarketIdResponse>> OddsPreMatchByFixtureAndMarketIdWithHttpInfoAsync(int fixtureId, int marketId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter
            localVarRequestOptions.PathParameters.Add("marketId", Sportmonks.Net.Client.ClientUtils.ParameterToString(marketId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.OddsPreMatchByFixtureAndMarketId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportOddsPreMatchByFixtureAndMarketIdResponse>("/{version}/{sport}/odds/pre-match/fixtures/{fixtureId}/markets/{marketId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsPreMatchByFixtureAndMarketId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pre-match by Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportOddsPreMatchByFixtureIdResponse</returns>
        public SportOddsPreMatchByFixtureIdResponse OddsPreMatchByFixtureId(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportOddsPreMatchByFixtureIdResponse> localVarResponse = OddsPreMatchByFixtureIdWithHttpInfo(fixtureId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pre-match by Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportOddsPreMatchByFixtureIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportOddsPreMatchByFixtureIdResponse> OddsPreMatchByFixtureIdWithHttpInfo(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.OddsPreMatchByFixtureId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportOddsPreMatchByFixtureIdResponse>("/{version}/{sport}/odds/pre-match/fixtures/{fixtureId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsPreMatchByFixtureId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pre-match by Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportOddsPreMatchByFixtureIdResponse</returns>
        public async System.Threading.Tasks.Task<SportOddsPreMatchByFixtureIdResponse> OddsPreMatchByFixtureIdAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportOddsPreMatchByFixtureIdResponse> localVarResponse = await OddsPreMatchByFixtureIdWithHttpInfoAsync(fixtureId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pre-match by Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve pre-match odds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportOddsPreMatchByFixtureIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportOddsPreMatchByFixtureIdResponse>> OddsPreMatchByFixtureIdWithHttpInfoAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.OddsPreMatchByFixtureId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportOddsPreMatchByFixtureIdResponse>("/{version}/{sport}/odds/pre-match/fixtures/{fixtureId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OddsPreMatchByFixtureId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">The ID of the player you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportPlayerByIdResponse</returns>
        public SportPlayerByIdResponse PlayerById(int playerId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportPlayerByIdResponse> localVarResponse = PlayerByIdWithHttpInfo(playerId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">The ID of the player you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportPlayerByIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportPlayerByIdResponse> PlayerByIdWithHttpInfo(int playerId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("playerId", Sportmonks.Net.Client.ClientUtils.ParameterToString(playerId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.PlayerById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportPlayerByIdResponse>("/{version}/{sport}/players/{playerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayerById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">The ID of the player you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportPlayerByIdResponse</returns>
        public async System.Threading.Tasks.Task<SportPlayerByIdResponse> PlayerByIdAsync(int playerId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportPlayerByIdResponse> localVarResponse = await PlayerByIdWithHttpInfoAsync(playerId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">The ID of the player you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportPlayerByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportPlayerByIdResponse>> PlayerByIdWithHttpInfoAsync(int playerId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("playerId", Sportmonks.Net.Client.ClientUtils.ParameterToString(playerId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.PlayerById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportPlayerByIdResponse>("/{version}/{sport}/players/{playerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayerById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportPlayersAllResponse</returns>
        public SportPlayersAllResponse PlayersAll(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportPlayersAllResponse> localVarResponse = PlayersAllWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportPlayersAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportPlayersAllResponse> PlayersAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.PlayersAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportPlayersAllResponse>("/{version}/{sport}/players", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayersAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportPlayersAllResponse</returns>
        public async System.Threading.Tasks.Task<SportPlayersAllResponse> PlayersAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportPlayersAllResponse> localVarResponse = await PlayersAllWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportPlayersAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportPlayersAllResponse>> PlayersAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.PlayersAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportPlayersAllResponse>("/{version}/{sport}/players", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayersAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve players from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportPlayersByCountryIdResponse</returns>
        public SportPlayersByCountryIdResponse PlayersByCountryId(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportPlayersByCountryIdResponse> localVarResponse = PlayersByCountryIdWithHttpInfo(countryId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve players from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportPlayersByCountryIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportPlayersByCountryIdResponse> PlayersByCountryIdWithHttpInfo(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("countryId", Sportmonks.Net.Client.ClientUtils.ParameterToString(countryId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.PlayersByCountryId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportPlayersByCountryIdResponse>("/{version}/{sport}/players/countries/{countryId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayersByCountryId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve players from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportPlayersByCountryIdResponse</returns>
        public async System.Threading.Tasks.Task<SportPlayersByCountryIdResponse> PlayersByCountryIdAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportPlayersByCountryIdResponse> localVarResponse = await PlayersByCountryIdWithHttpInfoAsync(countryId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve players from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportPlayersByCountryIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportPlayersByCountryIdResponse>> PlayersByCountryIdWithHttpInfoAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("countryId", Sportmonks.Net.Client.ClientUtils.ParameterToString(countryId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.PlayersByCountryId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportPlayersByCountryIdResponse>("/{version}/{sport}/players/countries/{countryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayersByCountryId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Latest Updated 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportPlayersLatestResponse</returns>
        public SportPlayersLatestResponse PlayersLatest(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportPlayersLatestResponse> localVarResponse = PlayersLatestWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Latest Updated 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportPlayersLatestResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportPlayersLatestResponse> PlayersLatestWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.PlayersLatest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportPlayersLatestResponse>("/{version}/{sport}/players/latest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayersLatest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Latest Updated 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportPlayersLatestResponse</returns>
        public async System.Threading.Tasks.Task<SportPlayersLatestResponse> PlayersLatestAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportPlayersLatestResponse> localVarResponse = await PlayersLatestWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Latest Updated 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportPlayersLatestResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportPlayersLatestResponse>> PlayersLatestWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.PlayersLatest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportPlayersLatestResponse>("/{version}/{sport}/players/latest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayersLatest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportPlayersSearchResponse</returns>
        public SportPlayersSearchResponse PlayersSearch(string name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportPlayersSearchResponse> localVarResponse = PlayersSearchWithHttpInfo(name, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportPlayersSearchResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportPlayersSearchResponse> PlayersSearchWithHttpInfo(string name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling SportApi->PlayersSearch");
            }

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.PlayersSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportPlayersSearchResponse>("/{version}/{sport}/players/search/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayersSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportPlayersSearchResponse</returns>
        public async System.Threading.Tasks.Task<SportPlayersSearchResponse> PlayersSearchAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportPlayersSearchResponse> localVarResponse = await PlayersSearchWithHttpInfoAsync(name, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportPlayersSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportPlayersSearchResponse>> PlayersSearchWithHttpInfoAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling SportApi->PlayersSearch");
            }


            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.PlayersSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportPlayersSearchResponse>("/{version}/{sport}/players/search/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayersSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportPredictionsAllResponse</returns>
        public SportPredictionsAllResponse PredictionsAll(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportPredictionsAllResponse> localVarResponse = PredictionsAllWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportPredictionsAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportPredictionsAllResponse> PredictionsAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.PredictionsAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportPredictionsAllResponse>("/{version}/{sport}/predictions/probabilities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PredictionsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportPredictionsAllResponse</returns>
        public async System.Threading.Tasks.Task<SportPredictionsAllResponse> PredictionsAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportPredictionsAllResponse> localVarResponse = await PredictionsAllWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportPredictionsAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportPredictionsAllResponse>> PredictionsAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.PredictionsAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportPredictionsAllResponse>("/{version}/{sport}/predictions/probabilities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PredictionsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All Value Bets 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportPredictionsAllValueBetsResponse</returns>
        public SportPredictionsAllValueBetsResponse PredictionsAllValueBets(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportPredictionsAllValueBetsResponse> localVarResponse = PredictionsAllValueBetsWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All Value Bets 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportPredictionsAllValueBetsResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportPredictionsAllValueBetsResponse> PredictionsAllValueBetsWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.PredictionsAllValueBets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportPredictionsAllValueBetsResponse>("/{version}/{sport}/predictions/value-bets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PredictionsAllValueBets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All Value Bets 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportPredictionsAllValueBetsResponse</returns>
        public async System.Threading.Tasks.Task<SportPredictionsAllValueBetsResponse> PredictionsAllValueBetsAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportPredictionsAllValueBetsResponse> localVarResponse = await PredictionsAllValueBetsWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All Value Bets 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportPredictionsAllValueBetsResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportPredictionsAllValueBetsResponse>> PredictionsAllValueBetsWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.PredictionsAllValueBets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportPredictionsAllValueBetsResponse>("/{version}/{sport}/predictions/value-bets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PredictionsAllValueBets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve predictions from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportPredictionsByFixtureIdResponse</returns>
        public SportPredictionsByFixtureIdResponse PredictionsByFixtureId(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportPredictionsByFixtureIdResponse> localVarResponse = PredictionsByFixtureIdWithHttpInfo(fixtureId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve predictions from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportPredictionsByFixtureIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportPredictionsByFixtureIdResponse> PredictionsByFixtureIdWithHttpInfo(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.PredictionsByFixtureId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportPredictionsByFixtureIdResponse>("/{version}/{sport}/predictions/probabilities/fixtures/{fixtureId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PredictionsByFixtureId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve predictions from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportPredictionsByFixtureIdResponse</returns>
        public async System.Threading.Tasks.Task<SportPredictionsByFixtureIdResponse> PredictionsByFixtureIdAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportPredictionsByFixtureIdResponse> localVarResponse = await PredictionsByFixtureIdWithHttpInfoAsync(fixtureId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve predictions from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportPredictionsByFixtureIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportPredictionsByFixtureIdResponse>> PredictionsByFixtureIdWithHttpInfoAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.PredictionsByFixtureId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportPredictionsByFixtureIdResponse>("/{version}/{sport}/predictions/probabilities/fixtures/{fixtureId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PredictionsByFixtureId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Value Bets by Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve value bets from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object PredictionsValueBetsByFixtureId(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = PredictionsValueBetsByFixtureIdWithHttpInfo(fixtureId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Value Bets by Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve value bets from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Sportmonks.Net.Client.ApiResponse<Object> PredictionsValueBetsByFixtureIdWithHttpInfo(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.PredictionsValueBetsByFixtureId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/{version}/{sport}/predictions/value-bets/fixtures/{fixtureId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PredictionsValueBetsByFixtureId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Value Bets by Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve value bets from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PredictionsValueBetsByFixtureIdAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = await PredictionsValueBetsByFixtureIdWithHttpInfoAsync(fixtureId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Value Bets by Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve value bets from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<Object>> PredictionsValueBetsByFixtureIdWithHttpInfoAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.PredictionsValueBetsByFixtureId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/{version}/{sport}/predictions/value-bets/fixtures/{fixtureId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PredictionsValueBetsByFixtureId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refereeId">The ID of the referee you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRefereeByIdResponse</returns>
        public SportRefereeByIdResponse RefereeById(int refereeId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportRefereeByIdResponse> localVarResponse = RefereeByIdWithHttpInfo(refereeId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refereeId">The ID of the referee you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRefereeByIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportRefereeByIdResponse> RefereeByIdWithHttpInfo(int refereeId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("refereeId", Sportmonks.Net.Client.ClientUtils.ParameterToString(refereeId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.RefereeById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportRefereeByIdResponse>("/{version}/{sport}/referees/{refereeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefereeById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refereeId">The ID of the referee you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRefereeByIdResponse</returns>
        public async System.Threading.Tasks.Task<SportRefereeByIdResponse> RefereeByIdAsync(int refereeId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportRefereeByIdResponse> localVarResponse = await RefereeByIdWithHttpInfoAsync(refereeId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refereeId">The ID of the referee you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRefereeByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportRefereeByIdResponse>> RefereeByIdWithHttpInfoAsync(int refereeId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("refereeId", Sportmonks.Net.Client.ClientUtils.ParameterToString(refereeId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.RefereeById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportRefereeByIdResponse>("/{version}/{sport}/referees/{refereeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefereeById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRefereesAllResponse</returns>
        public SportRefereesAllResponse RefereesAll(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportRefereesAllResponse> localVarResponse = RefereesAllWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRefereesAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportRefereesAllResponse> RefereesAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.RefereesAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportRefereesAllResponse>("/{version}/{sport}/referees", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefereesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRefereesAllResponse</returns>
        public async System.Threading.Tasks.Task<SportRefereesAllResponse> RefereesAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportRefereesAllResponse> localVarResponse = await RefereesAllWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRefereesAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportRefereesAllResponse>> RefereesAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.RefereesAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportRefereesAllResponse>("/{version}/{sport}/referees", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefereesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve referees from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRefereesByCountryIdResponse</returns>
        public SportRefereesByCountryIdResponse RefereesByCountryId(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportRefereesByCountryIdResponse> localVarResponse = RefereesByCountryIdWithHttpInfo(countryId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve referees from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRefereesByCountryIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportRefereesByCountryIdResponse> RefereesByCountryIdWithHttpInfo(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("countryId", Sportmonks.Net.Client.ClientUtils.ParameterToString(countryId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.RefereesByCountryId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportRefereesByCountryIdResponse>("/{version}/{sport}/referees/countries/{countryId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefereesByCountryId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve referees from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRefereesByCountryIdResponse</returns>
        public async System.Threading.Tasks.Task<SportRefereesByCountryIdResponse> RefereesByCountryIdAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportRefereesByCountryIdResponse> localVarResponse = await RefereesByCountryIdWithHttpInfoAsync(countryId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve referees from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRefereesByCountryIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportRefereesByCountryIdResponse>> RefereesByCountryIdWithHttpInfoAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("countryId", Sportmonks.Net.Client.ClientUtils.ParameterToString(countryId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.RefereesByCountryId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportRefereesByCountryIdResponse>("/{version}/{sport}/referees/countries/{countryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefereesByCountryId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve referees from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRefereesBySeasonIdResponse</returns>
        public SportRefereesBySeasonIdResponse RefereesBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportRefereesBySeasonIdResponse> localVarResponse = RefereesBySeasonIdWithHttpInfo(seasonId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve referees from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRefereesBySeasonIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportRefereesBySeasonIdResponse> RefereesBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.RefereesBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportRefereesBySeasonIdResponse>("/{version}/{sport}/referees/seasons/{seasonId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefereesBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve referees from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRefereesBySeasonIdResponse</returns>
        public async System.Threading.Tasks.Task<SportRefereesBySeasonIdResponse> RefereesBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportRefereesBySeasonIdResponse> localVarResponse = await RefereesBySeasonIdWithHttpInfoAsync(seasonId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve referees from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRefereesBySeasonIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportRefereesBySeasonIdResponse>> RefereesBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.RefereesBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportRefereesBySeasonIdResponse>("/{version}/{sport}/referees/seasons/{seasonId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefereesBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRefereesSearchResponse</returns>
        public SportRefereesSearchResponse RefereesSearch(string name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportRefereesSearchResponse> localVarResponse = RefereesSearchWithHttpInfo(name, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRefereesSearchResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportRefereesSearchResponse> RefereesSearchWithHttpInfo(string name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling SportApi->RefereesSearch");
            }

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.RefereesSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportRefereesSearchResponse>("/{version}/{sport}/referees/search/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefereesSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRefereesSearchResponse</returns>
        public async System.Threading.Tasks.Task<SportRefereesSearchResponse> RefereesSearchAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportRefereesSearchResponse> localVarResponse = await RefereesSearchWithHttpInfoAsync(name, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRefereesSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportRefereesSearchResponse>> RefereesSearchWithHttpInfoAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling SportApi->RefereesSearch");
            }


            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.RefereesSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportRefereesSearchResponse>("/{version}/{sport}/referees/search/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefereesSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRivalsAllResponse</returns>
        public SportRivalsAllResponse RivalsAll(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportRivalsAllResponse> localVarResponse = RivalsAllWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRivalsAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportRivalsAllResponse> RivalsAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.RivalsAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportRivalsAllResponse>("/{version}/{sport}/rivals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RivalsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRivalsAllResponse</returns>
        public async System.Threading.Tasks.Task<SportRivalsAllResponse> RivalsAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportRivalsAllResponse> localVarResponse = await RivalsAllWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRivalsAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportRivalsAllResponse>> RivalsAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.RivalsAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportRivalsAllResponse>("/{version}/{sport}/rivals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RivalsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve rivals from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRivalsByTeamIdResponse</returns>
        public SportRivalsByTeamIdResponse RivalsByTeamId(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportRivalsByTeamIdResponse> localVarResponse = RivalsByTeamIdWithHttpInfo(teamId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve rivals from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRivalsByTeamIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportRivalsByTeamIdResponse> RivalsByTeamIdWithHttpInfo(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.RivalsByTeamId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportRivalsByTeamIdResponse>("/{version}/{sport}/rivals/teams/{teamId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RivalsByTeamId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve rivals from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRivalsByTeamIdResponse</returns>
        public async System.Threading.Tasks.Task<SportRivalsByTeamIdResponse> RivalsByTeamIdAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportRivalsByTeamIdResponse> localVarResponse = await RivalsByTeamIdWithHttpInfoAsync(teamId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve rivals from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRivalsByTeamIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportRivalsByTeamIdResponse>> RivalsByTeamIdWithHttpInfoAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.RivalsByTeamId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportRivalsByTeamIdResponse>("/{version}/{sport}/rivals/teams/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RivalsByTeamId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roundId">The ID of the round you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRoundByIdResponse</returns>
        public SportRoundByIdResponse RoundById(int roundId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportRoundByIdResponse> localVarResponse = RoundByIdWithHttpInfo(roundId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roundId">The ID of the round you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRoundByIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportRoundByIdResponse> RoundByIdWithHttpInfo(int roundId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("roundId", Sportmonks.Net.Client.ClientUtils.ParameterToString(roundId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.RoundById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportRoundByIdResponse>("/{version}/{sport}/rounds/{roundId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RoundById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roundId">The ID of the round you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRoundByIdResponse</returns>
        public async System.Threading.Tasks.Task<SportRoundByIdResponse> RoundByIdAsync(int roundId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportRoundByIdResponse> localVarResponse = await RoundByIdWithHttpInfoAsync(roundId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roundId">The ID of the round you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRoundByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportRoundByIdResponse>> RoundByIdWithHttpInfoAsync(int roundId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("roundId", Sportmonks.Net.Client.ClientUtils.ParameterToString(roundId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.RoundById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportRoundByIdResponse>("/{version}/{sport}/rounds/{roundId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RoundById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRoundsAllResponse</returns>
        public SportRoundsAllResponse RoundsAll(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportRoundsAllResponse> localVarResponse = RoundsAllWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRoundsAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportRoundsAllResponse> RoundsAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.RoundsAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportRoundsAllResponse>("/{version}/{sport}/rounds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RoundsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRoundsAllResponse</returns>
        public async System.Threading.Tasks.Task<SportRoundsAllResponse> RoundsAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportRoundsAllResponse> localVarResponse = await RoundsAllWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRoundsAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportRoundsAllResponse>> RoundsAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.RoundsAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportRoundsAllResponse>("/{version}/{sport}/rounds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RoundsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve rounds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRoundsBySeasonIdResponse</returns>
        public SportRoundsBySeasonIdResponse RoundsBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportRoundsBySeasonIdResponse> localVarResponse = RoundsBySeasonIdWithHttpInfo(seasonId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve rounds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRoundsBySeasonIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportRoundsBySeasonIdResponse> RoundsBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.RoundsBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportRoundsBySeasonIdResponse>("/{version}/{sport}/rounds/seasons/{seasonId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RoundsBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve rounds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRoundsBySeasonIdResponse</returns>
        public async System.Threading.Tasks.Task<SportRoundsBySeasonIdResponse> RoundsBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportRoundsBySeasonIdResponse> localVarResponse = await RoundsBySeasonIdWithHttpInfoAsync(seasonId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve rounds from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRoundsBySeasonIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportRoundsBySeasonIdResponse>> RoundsBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.RoundsBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportRoundsBySeasonIdResponse>("/{version}/{sport}/rounds/seasons/{seasonId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RoundsBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportRoundsSearchResponse</returns>
        public SportRoundsSearchResponse RoundsSearch(int name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportRoundsSearchResponse> localVarResponse = RoundsSearchWithHttpInfo(name, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportRoundsSearchResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportRoundsSearchResponse> RoundsSearchWithHttpInfo(int name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.RoundsSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportRoundsSearchResponse>("/{version}/{sport}/rounds/search/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RoundsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportRoundsSearchResponse</returns>
        public async System.Threading.Tasks.Task<SportRoundsSearchResponse> RoundsSearchAsync(int name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportRoundsSearchResponse> localVarResponse = await RoundsSearchWithHttpInfoAsync(name, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportRoundsSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportRoundsSearchResponse>> RoundsSearchWithHttpInfoAsync(int name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.RoundsSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportRoundsSearchResponse>("/{version}/{sport}/rounds/search/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RoundsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportSchedulesBySeasonIdResponse</returns>
        public SportSchedulesBySeasonIdResponse SchedulesBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportSchedulesBySeasonIdResponse> localVarResponse = SchedulesBySeasonIdWithHttpInfo(seasonId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportSchedulesBySeasonIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportSchedulesBySeasonIdResponse> SchedulesBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.SchedulesBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportSchedulesBySeasonIdResponse>("/{version}/{sport}/schedules/seasons/{seasonId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SchedulesBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportSchedulesBySeasonIdResponse</returns>
        public async System.Threading.Tasks.Task<SportSchedulesBySeasonIdResponse> SchedulesBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportSchedulesBySeasonIdResponse> localVarResponse = await SchedulesBySeasonIdWithHttpInfoAsync(seasonId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportSchedulesBySeasonIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportSchedulesBySeasonIdResponse>> SchedulesBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.SchedulesBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportSchedulesBySeasonIdResponse>("/{version}/{sport}/schedules/seasons/{seasonId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SchedulesBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Team and Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve schedule from.</param>
        /// <param name="teamId">The ID of the team you want to retrieve schedule from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportSchedulesByTeamAndSeasonIdResponse</returns>
        public SportSchedulesByTeamAndSeasonIdResponse SchedulesByTeamAndSeasonId(int seasonId, int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportSchedulesByTeamAndSeasonIdResponse> localVarResponse = SchedulesByTeamAndSeasonIdWithHttpInfo(seasonId, teamId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Team and Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve schedule from.</param>
        /// <param name="teamId">The ID of the team you want to retrieve schedule from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportSchedulesByTeamAndSeasonIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportSchedulesByTeamAndSeasonIdResponse> SchedulesByTeamAndSeasonIdWithHttpInfo(int seasonId, int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.SchedulesByTeamAndSeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportSchedulesByTeamAndSeasonIdResponse>("/{version}/{sport}/schedules/seasons/{seasonId}/teams/{teamId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SchedulesByTeamAndSeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Team and Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve schedule from.</param>
        /// <param name="teamId">The ID of the team you want to retrieve schedule from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportSchedulesByTeamAndSeasonIdResponse</returns>
        public async System.Threading.Tasks.Task<SportSchedulesByTeamAndSeasonIdResponse> SchedulesByTeamAndSeasonIdAsync(int seasonId, int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportSchedulesByTeamAndSeasonIdResponse> localVarResponse = await SchedulesByTeamAndSeasonIdWithHttpInfoAsync(seasonId, teamId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Team and Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve schedule from.</param>
        /// <param name="teamId">The ID of the team you want to retrieve schedule from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportSchedulesByTeamAndSeasonIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportSchedulesByTeamAndSeasonIdResponse>> SchedulesByTeamAndSeasonIdWithHttpInfoAsync(int seasonId, int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.SchedulesByTeamAndSeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportSchedulesByTeamAndSeasonIdResponse>("/{version}/{sport}/schedules/seasons/{seasonId}/teams/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SchedulesByTeamAndSeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve schedule from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportSchedulesByTeamIdResponse</returns>
        public SportSchedulesByTeamIdResponse SchedulesByTeamId(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportSchedulesByTeamIdResponse> localVarResponse = SchedulesByTeamIdWithHttpInfo(teamId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve schedule from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportSchedulesByTeamIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportSchedulesByTeamIdResponse> SchedulesByTeamIdWithHttpInfo(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.SchedulesByTeamId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportSchedulesByTeamIdResponse>("/{version}/{sport}/schedules/teams/{teamId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SchedulesByTeamId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve schedule from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportSchedulesByTeamIdResponse</returns>
        public async System.Threading.Tasks.Task<SportSchedulesByTeamIdResponse> SchedulesByTeamIdAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportSchedulesByTeamIdResponse> localVarResponse = await SchedulesByTeamIdWithHttpInfoAsync(teamId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve schedule from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportSchedulesByTeamIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportSchedulesByTeamIdResponse>> SchedulesByTeamIdWithHttpInfoAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.SchedulesByTeamId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportSchedulesByTeamIdResponse>("/{version}/{sport}/schedules/teams/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SchedulesByTeamId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportSeasonByIdResponse</returns>
        public SportSeasonByIdResponse SeasonById(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportSeasonByIdResponse> localVarResponse = SeasonByIdWithHttpInfo(seasonId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportSeasonByIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportSeasonByIdResponse> SeasonByIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.SeasonById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportSeasonByIdResponse>("/{version}/{sport}/seasons/{seasonId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SeasonById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportSeasonByIdResponse</returns>
        public async System.Threading.Tasks.Task<SportSeasonByIdResponse> SeasonByIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportSeasonByIdResponse> localVarResponse = await SeasonByIdWithHttpInfoAsync(seasonId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportSeasonByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportSeasonByIdResponse>> SeasonByIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.SeasonById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportSeasonByIdResponse>("/{version}/{sport}/seasons/{seasonId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SeasonById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportSeasonsAllResponse</returns>
        public SportSeasonsAllResponse SeasonsAll(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportSeasonsAllResponse> localVarResponse = SeasonsAllWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportSeasonsAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportSeasonsAllResponse> SeasonsAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.SeasonsAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportSeasonsAllResponse>("/{version}/{sport}/seasons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SeasonsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportSeasonsAllResponse</returns>
        public async System.Threading.Tasks.Task<SportSeasonsAllResponse> SeasonsAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportSeasonsAllResponse> localVarResponse = await SeasonsAllWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportSeasonsAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportSeasonsAllResponse>> SeasonsAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.SeasonsAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportSeasonsAllResponse>("/{version}/{sport}/seasons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SeasonsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve seasons from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SeasonsByTeamId(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = SeasonsByTeamIdWithHttpInfo(teamId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve seasons from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Sportmonks.Net.Client.ApiResponse<Object> SeasonsByTeamIdWithHttpInfo(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.SeasonsByTeamId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/{version}/{sport}/seasons/teams/{teamId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SeasonsByTeamId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve seasons from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SeasonsByTeamIdAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<Object> localVarResponse = await SeasonsByTeamIdWithHttpInfoAsync(teamId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve seasons from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<Object>> SeasonsByTeamIdWithHttpInfoAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.SeasonsByTeamId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/{version}/{sport}/seasons/teams/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SeasonsByTeamId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportSeasonsSearchResponse</returns>
        public SportSeasonsSearchResponse SeasonsSearch(int name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportSeasonsSearchResponse> localVarResponse = SeasonsSearchWithHttpInfo(name, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportSeasonsSearchResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportSeasonsSearchResponse> SeasonsSearchWithHttpInfo(int name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.SeasonsSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportSeasonsSearchResponse>("/{version}/{sport}/seasons/search/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SeasonsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportSeasonsSearchResponse</returns>
        public async System.Threading.Tasks.Task<SportSeasonsSearchResponse> SeasonsSearchAsync(int name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportSeasonsSearchResponse> localVarResponse = await SeasonsSearchWithHttpInfoAsync(name, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportSeasonsSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportSeasonsSearchResponse>> SeasonsSearchWithHttpInfoAsync(int name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.SeasonsSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportSeasonsSearchResponse>("/{version}/{sport}/seasons/search/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SeasonsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Season and Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve squads from.</param>
        /// <param name="teamId">The ID of the team you want to retrieve squads from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportSquadsBySeasonAndTeamIdResponse</returns>
        public SportSquadsBySeasonAndTeamIdResponse SquadsBySeasonAndTeamId(int seasonId, int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportSquadsBySeasonAndTeamIdResponse> localVarResponse = SquadsBySeasonAndTeamIdWithHttpInfo(seasonId, teamId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Season and Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve squads from.</param>
        /// <param name="teamId">The ID of the team you want to retrieve squads from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportSquadsBySeasonAndTeamIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportSquadsBySeasonAndTeamIdResponse> SquadsBySeasonAndTeamIdWithHttpInfo(int seasonId, int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.SquadsBySeasonAndTeamId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportSquadsBySeasonAndTeamIdResponse>("/{version}/{sport}/squads/seasons/{seasonId}/teams/{teamId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SquadsBySeasonAndTeamId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Season and Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve squads from.</param>
        /// <param name="teamId">The ID of the team you want to retrieve squads from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportSquadsBySeasonAndTeamIdResponse</returns>
        public async System.Threading.Tasks.Task<SportSquadsBySeasonAndTeamIdResponse> SquadsBySeasonAndTeamIdAsync(int seasonId, int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportSquadsBySeasonAndTeamIdResponse> localVarResponse = await SquadsBySeasonAndTeamIdWithHttpInfoAsync(seasonId, teamId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Season and Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve squads from.</param>
        /// <param name="teamId">The ID of the team you want to retrieve squads from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportSquadsBySeasonAndTeamIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportSquadsBySeasonAndTeamIdResponse>> SquadsBySeasonAndTeamIdWithHttpInfoAsync(int seasonId, int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.SquadsBySeasonAndTeamId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportSquadsBySeasonAndTeamIdResponse>("/{version}/{sport}/squads/seasons/{seasonId}/teams/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SquadsBySeasonAndTeamId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve squads from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportSquadsByTeamIdResponse</returns>
        public SportSquadsByTeamIdResponse SquadsByTeamId(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportSquadsByTeamIdResponse> localVarResponse = SquadsByTeamIdWithHttpInfo(teamId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve squads from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportSquadsByTeamIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportSquadsByTeamIdResponse> SquadsByTeamIdWithHttpInfo(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.SquadsByTeamId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportSquadsByTeamIdResponse>("/{version}/{sport}/squads/teams/{teamId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SquadsByTeamId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve squads from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportSquadsByTeamIdResponse</returns>
        public async System.Threading.Tasks.Task<SportSquadsByTeamIdResponse> SquadsByTeamIdAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportSquadsByTeamIdResponse> localVarResponse = await SquadsByTeamIdWithHttpInfoAsync(teamId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve squads from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportSquadsByTeamIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportSquadsByTeamIdResponse>> SquadsByTeamIdWithHttpInfoAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.SquadsByTeamId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportSquadsByTeamIdResponse>("/{version}/{sport}/squads/teams/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SquadsByTeamId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">The ID of the stage you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStageByIdResponse</returns>
        public SportStageByIdResponse StageById(int stageId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportStageByIdResponse> localVarResponse = StageByIdWithHttpInfo(stageId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">The ID of the stage you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStageByIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportStageByIdResponse> StageByIdWithHttpInfo(int stageId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("stageId", Sportmonks.Net.Client.ClientUtils.ParameterToString(stageId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.StageById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportStageByIdResponse>("/{version}/{sport}/stages/{stageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StageById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">The ID of the stage you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStageByIdResponse</returns>
        public async System.Threading.Tasks.Task<SportStageByIdResponse> StageByIdAsync(int stageId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportStageByIdResponse> localVarResponse = await StageByIdWithHttpInfoAsync(stageId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">The ID of the stage you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStageByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportStageByIdResponse>> StageByIdWithHttpInfoAsync(int stageId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("stageId", Sportmonks.Net.Client.ClientUtils.ParameterToString(stageId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.StageById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportStageByIdResponse>("/{version}/{sport}/stages/{stageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StageById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStagesAllResponse</returns>
        public SportStagesAllResponse StagesAll(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportStagesAllResponse> localVarResponse = StagesAllWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStagesAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportStagesAllResponse> StagesAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.StagesAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportStagesAllResponse>("/{version}/{sport}/stages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StagesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStagesAllResponse</returns>
        public async System.Threading.Tasks.Task<SportStagesAllResponse> StagesAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportStagesAllResponse> localVarResponse = await StagesAllWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStagesAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportStagesAllResponse>> StagesAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.StagesAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportStagesAllResponse>("/{version}/{sport}/stages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StagesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve stages from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStagesBySeasonIdResponse</returns>
        public SportStagesBySeasonIdResponse StagesBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportStagesBySeasonIdResponse> localVarResponse = StagesBySeasonIdWithHttpInfo(seasonId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve stages from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStagesBySeasonIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportStagesBySeasonIdResponse> StagesBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.StagesBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportStagesBySeasonIdResponse>("/{version}/{sport}/stages/seasons/{seasonId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StagesBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve stages from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStagesBySeasonIdResponse</returns>
        public async System.Threading.Tasks.Task<SportStagesBySeasonIdResponse> StagesBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportStagesBySeasonIdResponse> localVarResponse = await StagesBySeasonIdWithHttpInfoAsync(seasonId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve stages from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStagesBySeasonIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportStagesBySeasonIdResponse>> StagesBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.StagesBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportStagesBySeasonIdResponse>("/{version}/{sport}/stages/seasons/{seasonId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StagesBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStagesSearchResponse</returns>
        public SportStagesSearchResponse StagesSearch(string name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportStagesSearchResponse> localVarResponse = StagesSearchWithHttpInfo(name, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStagesSearchResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportStagesSearchResponse> StagesSearchWithHttpInfo(string name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling SportApi->StagesSearch");
            }

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.StagesSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportStagesSearchResponse>("/{version}/{sport}/stages/search/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StagesSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStagesSearchResponse</returns>
        public async System.Threading.Tasks.Task<SportStagesSearchResponse> StagesSearchAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportStagesSearchResponse> localVarResponse = await StagesSearchWithHttpInfoAsync(name, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStagesSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportStagesSearchResponse>> StagesSearchWithHttpInfoAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling SportApi->StagesSearch");
            }


            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.StagesSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportStagesSearchResponse>("/{version}/{sport}/stages/search/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StagesSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Correction by Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve standing corrections from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStandingCorrectionsBySeasonIdResponse</returns>
        public SportStandingCorrectionsBySeasonIdResponse StandingCorrectionsBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportStandingCorrectionsBySeasonIdResponse> localVarResponse = StandingCorrectionsBySeasonIdWithHttpInfo(seasonId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Correction by Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve standing corrections from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStandingCorrectionsBySeasonIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportStandingCorrectionsBySeasonIdResponse> StandingCorrectionsBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.StandingCorrectionsBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportStandingCorrectionsBySeasonIdResponse>("/{version}/{sport}/standings/corrections/seasons/{seasonId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StandingCorrectionsBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Correction by Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve standing corrections from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStandingCorrectionsBySeasonIdResponse</returns>
        public async System.Threading.Tasks.Task<SportStandingCorrectionsBySeasonIdResponse> StandingCorrectionsBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportStandingCorrectionsBySeasonIdResponse> localVarResponse = await StandingCorrectionsBySeasonIdWithHttpInfoAsync(seasonId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Correction by Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve standing corrections from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStandingCorrectionsBySeasonIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportStandingCorrectionsBySeasonIdResponse>> StandingCorrectionsBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.StandingCorrectionsBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportStandingCorrectionsBySeasonIdResponse>("/{version}/{sport}/standings/corrections/seasons/{seasonId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StandingCorrectionsBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStandingsAllResponse</returns>
        public SportStandingsAllResponse StandingsAll(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportStandingsAllResponse> localVarResponse = StandingsAllWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStandingsAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportStandingsAllResponse> StandingsAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.StandingsAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportStandingsAllResponse>("/{version}/{sport}/standings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StandingsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStandingsAllResponse</returns>
        public async System.Threading.Tasks.Task<SportStandingsAllResponse> StandingsAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportStandingsAllResponse> localVarResponse = await StandingsAllWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStandingsAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportStandingsAllResponse>> StandingsAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.StandingsAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportStandingsAllResponse>("/{version}/{sport}/standings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StandingsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Round ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roundId">The ID of the round you want to retrieve standing from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStandingsByRoundIdResponse</returns>
        public SportStandingsByRoundIdResponse StandingsByRoundId(int roundId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportStandingsByRoundIdResponse> localVarResponse = StandingsByRoundIdWithHttpInfo(roundId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Round ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roundId">The ID of the round you want to retrieve standing from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStandingsByRoundIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportStandingsByRoundIdResponse> StandingsByRoundIdWithHttpInfo(int roundId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("roundId", Sportmonks.Net.Client.ClientUtils.ParameterToString(roundId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.StandingsByRoundId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportStandingsByRoundIdResponse>("/{version}/{sport}/standings/rounds/{roundId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StandingsByRoundId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Round ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roundId">The ID of the round you want to retrieve standing from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStandingsByRoundIdResponse</returns>
        public async System.Threading.Tasks.Task<SportStandingsByRoundIdResponse> StandingsByRoundIdAsync(int roundId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportStandingsByRoundIdResponse> localVarResponse = await StandingsByRoundIdWithHttpInfoAsync(roundId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Round ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roundId">The ID of the round you want to retrieve standing from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStandingsByRoundIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportStandingsByRoundIdResponse>> StandingsByRoundIdWithHttpInfoAsync(int roundId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("roundId", Sportmonks.Net.Client.ClientUtils.ParameterToString(roundId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.StandingsByRoundId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportStandingsByRoundIdResponse>("/{version}/{sport}/standings/rounds/{roundId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StandingsByRoundId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve standing from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStandingsBySeasonIdResponse</returns>
        public SportStandingsBySeasonIdResponse StandingsBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportStandingsBySeasonIdResponse> localVarResponse = StandingsBySeasonIdWithHttpInfo(seasonId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve standing from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStandingsBySeasonIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportStandingsBySeasonIdResponse> StandingsBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.StandingsBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportStandingsBySeasonIdResponse>("/{version}/{sport}/standings/seasons/{seasonId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StandingsBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve standing from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStandingsBySeasonIdResponse</returns>
        public async System.Threading.Tasks.Task<SportStandingsBySeasonIdResponse> StandingsBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportStandingsBySeasonIdResponse> localVarResponse = await StandingsBySeasonIdWithHttpInfoAsync(seasonId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve standing from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStandingsBySeasonIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportStandingsBySeasonIdResponse>> StandingsBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.StandingsBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportStandingsBySeasonIdResponse>("/{version}/{sport}/standings/seasons/{seasonId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StandingsBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By League ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve standings from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStandingsLiveByLeagueIdResponse</returns>
        public SportStandingsLiveByLeagueIdResponse StandingsLiveByLeagueId(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportStandingsLiveByLeagueIdResponse> localVarResponse = StandingsLiveByLeagueIdWithHttpInfo(leagueId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By League ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve standings from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStandingsLiveByLeagueIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportStandingsLiveByLeagueIdResponse> StandingsLiveByLeagueIdWithHttpInfo(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("leagueId", Sportmonks.Net.Client.ClientUtils.ParameterToString(leagueId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.StandingsLiveByLeagueId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportStandingsLiveByLeagueIdResponse>("/{version}/{sport}/standings/live/leagues/{leagueId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StandingsLiveByLeagueId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By League ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve standings from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStandingsLiveByLeagueIdResponse</returns>
        public async System.Threading.Tasks.Task<SportStandingsLiveByLeagueIdResponse> StandingsLiveByLeagueIdAsync(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportStandingsLiveByLeagueIdResponse> localVarResponse = await StandingsLiveByLeagueIdWithHttpInfoAsync(leagueId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By League ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">The ID of the league you want to retrieve standings from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStandingsLiveByLeagueIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportStandingsLiveByLeagueIdResponse>> StandingsLiveByLeagueIdWithHttpInfoAsync(int leagueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("leagueId", Sportmonks.Net.Client.ClientUtils.ParameterToString(leagueId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.StandingsLiveByLeagueId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportStandingsLiveByLeagueIdResponse>("/{version}/{sport}/standings/live/leagues/{leagueId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StandingsLiveByLeagueId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateId">The ID of the state you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStateByIdResponse</returns>
        public SportStateByIdResponse StateById(int stateId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportStateByIdResponse> localVarResponse = StateByIdWithHttpInfo(stateId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateId">The ID of the state you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStateByIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportStateByIdResponse> StateByIdWithHttpInfo(int stateId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("stateId", Sportmonks.Net.Client.ClientUtils.ParameterToString(stateId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.StateById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportStateByIdResponse>("/{version}/{sport}/states/{stateId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StateById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateId">The ID of the state you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStateByIdResponse</returns>
        public async System.Threading.Tasks.Task<SportStateByIdResponse> StateByIdAsync(int stateId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportStateByIdResponse> localVarResponse = await StateByIdWithHttpInfoAsync(stateId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stateId">The ID of the state you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStateByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportStateByIdResponse>> StateByIdWithHttpInfoAsync(int stateId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("stateId", Sportmonks.Net.Client.ClientUtils.ParameterToString(stateId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.StateById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportStateByIdResponse>("/{version}/{sport}/states/{stateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StateById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Sport 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportStatesBySportResponse</returns>
        public SportStatesBySportResponse StatesBySport(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportStatesBySportResponse> localVarResponse = StatesBySportWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Sport 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportStatesBySportResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportStatesBySportResponse> StatesBySportWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.StatesBySport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportStatesBySportResponse>("/{version}/{sport}/states", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatesBySport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Sport 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportStatesBySportResponse</returns>
        public async System.Threading.Tasks.Task<SportStatesBySportResponse> StatesBySportAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportStatesBySportResponse> localVarResponse = await StatesBySportWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Sport 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportStatesBySportResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportStatesBySportResponse>> StatesBySportWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.StatesBySport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportStatesBySportResponse>("/{version}/{sport}/states", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatesBySport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTeamsAllResponse</returns>
        public SportTeamsAllResponse TeamsAll(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportTeamsAllResponse> localVarResponse = TeamsAllWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTeamsAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportTeamsAllResponse> TeamsAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.TeamsAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportTeamsAllResponse>("/{version}/{sport}/teams", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TeamsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTeamsAllResponse</returns>
        public async System.Threading.Tasks.Task<SportTeamsAllResponse> TeamsAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportTeamsAllResponse> localVarResponse = await TeamsAllWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTeamsAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportTeamsAllResponse>> TeamsAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.TeamsAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportTeamsAllResponse>("/{version}/{sport}/teams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TeamsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve teams from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTeamsByCountryIdResponse</returns>
        public SportTeamsByCountryIdResponse TeamsByCountryId(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportTeamsByCountryIdResponse> localVarResponse = TeamsByCountryIdWithHttpInfo(countryId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve teams from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTeamsByCountryIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportTeamsByCountryIdResponse> TeamsByCountryIdWithHttpInfo(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("countryId", Sportmonks.Net.Client.ClientUtils.ParameterToString(countryId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TeamsByCountryId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportTeamsByCountryIdResponse>("/{version}/{sport}/teams/countries/{countryId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TeamsByCountryId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve teams from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTeamsByCountryIdResponse</returns>
        public async System.Threading.Tasks.Task<SportTeamsByCountryIdResponse> TeamsByCountryIdAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportTeamsByCountryIdResponse> localVarResponse = await TeamsByCountryIdWithHttpInfoAsync(countryId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Country ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId">The ID of the country you want to retrieve teams from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTeamsByCountryIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportTeamsByCountryIdResponse>> TeamsByCountryIdWithHttpInfoAsync(int countryId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("countryId", Sportmonks.Net.Client.ClientUtils.ParameterToString(countryId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TeamsByCountryId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportTeamsByCountryIdResponse>("/{version}/{sport}/teams/countries/{countryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TeamsByCountryId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTeamsByIdResponse</returns>
        public SportTeamsByIdResponse TeamsById(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportTeamsByIdResponse> localVarResponse = TeamsByIdWithHttpInfo(teamId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTeamsByIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportTeamsByIdResponse> TeamsByIdWithHttpInfo(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TeamsById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportTeamsByIdResponse>("/{version}/{sport}/teams/{teamId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TeamsById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTeamsByIdResponse</returns>
        public async System.Threading.Tasks.Task<SportTeamsByIdResponse> TeamsByIdAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportTeamsByIdResponse> localVarResponse = await TeamsByIdWithHttpInfoAsync(teamId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTeamsByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportTeamsByIdResponse>> TeamsByIdWithHttpInfoAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TeamsById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportTeamsByIdResponse>("/{version}/{sport}/teams/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TeamsById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve teams from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTeamsBySeasonIdResponse</returns>
        public SportTeamsBySeasonIdResponse TeamsBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportTeamsBySeasonIdResponse> localVarResponse = TeamsBySeasonIdWithHttpInfo(seasonId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve teams from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTeamsBySeasonIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportTeamsBySeasonIdResponse> TeamsBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TeamsBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportTeamsBySeasonIdResponse>("/{version}/{sport}/teams/seasons/{seasonId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TeamsBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve teams from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTeamsBySeasonIdResponse</returns>
        public async System.Threading.Tasks.Task<SportTeamsBySeasonIdResponse> TeamsBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportTeamsBySeasonIdResponse> localVarResponse = await TeamsBySeasonIdWithHttpInfoAsync(seasonId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve teams from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTeamsBySeasonIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportTeamsBySeasonIdResponse>> TeamsBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TeamsBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportTeamsBySeasonIdResponse>("/{version}/{sport}/teams/seasons/{seasonId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TeamsBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTeamsSearchResponse</returns>
        public SportTeamsSearchResponse TeamsSearch(string name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportTeamsSearchResponse> localVarResponse = TeamsSearchWithHttpInfo(name, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTeamsSearchResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportTeamsSearchResponse> TeamsSearchWithHttpInfo(string name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling SportApi->TeamsSearch");
            }

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TeamsSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportTeamsSearchResponse>("/{version}/{sport}/teams/search/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TeamsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTeamsSearchResponse</returns>
        public async System.Threading.Tasks.Task<SportTeamsSearchResponse> TeamsSearchAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportTeamsSearchResponse> localVarResponse = await TeamsSearchWithHttpInfoAsync(name, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTeamsSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportTeamsSearchResponse>> TeamsSearchWithHttpInfoAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling SportApi->TeamsSearch");
            }


            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TeamsSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportTeamsSearchResponse>("/{version}/{sport}/teams/search/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TeamsSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve topscorers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTopScorersBySeasonIdResponse</returns>
        public SportTopScorersBySeasonIdResponse TopScorersBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportTopScorersBySeasonIdResponse> localVarResponse = TopScorersBySeasonIdWithHttpInfo(seasonId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve topscorers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTopScorersBySeasonIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportTopScorersBySeasonIdResponse> TopScorersBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TopScorersBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportTopScorersBySeasonIdResponse>("/{version}/{sport}/topscorers/seasons/{seasonId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TopScorersBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve topscorers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTopScorersBySeasonIdResponse</returns>
        public async System.Threading.Tasks.Task<SportTopScorersBySeasonIdResponse> TopScorersBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportTopScorersBySeasonIdResponse> localVarResponse = await TopScorersBySeasonIdWithHttpInfoAsync(seasonId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve topscorers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTopScorersBySeasonIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportTopScorersBySeasonIdResponse>> TopScorersBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TopScorersBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportTopScorersBySeasonIdResponse>("/{version}/{sport}/topscorers/seasons/{seasonId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TopScorersBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Stage ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">The ID of the stage you want to retrieve topscorers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTopScorersByStageIdResponse</returns>
        public SportTopScorersByStageIdResponse TopScorersByStageId(int stageId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportTopScorersByStageIdResponse> localVarResponse = TopScorersByStageIdWithHttpInfo(stageId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Stage ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">The ID of the stage you want to retrieve topscorers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTopScorersByStageIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportTopScorersByStageIdResponse> TopScorersByStageIdWithHttpInfo(int stageId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("stageId", Sportmonks.Net.Client.ClientUtils.ParameterToString(stageId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TopScorersByStageId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportTopScorersByStageIdResponse>("/{version}/{sport}/topscorers/stages/{stageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TopScorersByStageId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Stage ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">The ID of the stage you want to retrieve topscorers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTopScorersByStageIdResponse</returns>
        public async System.Threading.Tasks.Task<SportTopScorersByStageIdResponse> TopScorersByStageIdAsync(int stageId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportTopScorersByStageIdResponse> localVarResponse = await TopScorersByStageIdWithHttpInfoAsync(stageId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Stage ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">The ID of the stage you want to retrieve topscorers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTopScorersByStageIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportTopScorersByStageIdResponse>> TopScorersByStageIdWithHttpInfoAsync(int stageId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("stageId", Sportmonks.Net.Client.ClientUtils.ParameterToString(stageId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TopScorersByStageId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportTopScorersByStageIdResponse>("/{version}/{sport}/topscorers/stages/{stageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TopScorersByStageId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Date Range 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date you want to retrieve transfers from.</param>
        /// <param name="endDate">The end date you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTranfersByDateRangeResponse</returns>
        public SportTranfersByDateRangeResponse TranfersByDateRange(string startDate, string endDate, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportTranfersByDateRangeResponse> localVarResponse = TranfersByDateRangeWithHttpInfo(startDate, endDate, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Date Range 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date you want to retrieve transfers from.</param>
        /// <param name="endDate">The end date you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTranfersByDateRangeResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportTranfersByDateRangeResponse> TranfersByDateRangeWithHttpInfo(string startDate, string endDate, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'startDate' when calling SportApi->TranfersByDateRange");
            }

            // verify the required parameter 'endDate' is set
            if (endDate == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'endDate' when calling SportApi->TranfersByDateRange");
            }

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("startDate", Sportmonks.Net.Client.ClientUtils.ParameterToString(startDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("endDate", Sportmonks.Net.Client.ClientUtils.ParameterToString(endDate)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TranfersByDateRange";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportTranfersByDateRangeResponse>("/{version}/{sport}/transfers/between/{startDate}/{endDate}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TranfersByDateRange", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Date Range 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date you want to retrieve transfers from.</param>
        /// <param name="endDate">The end date you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTranfersByDateRangeResponse</returns>
        public async System.Threading.Tasks.Task<SportTranfersByDateRangeResponse> TranfersByDateRangeAsync(string startDate, string endDate, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportTranfersByDateRangeResponse> localVarResponse = await TranfersByDateRangeWithHttpInfoAsync(startDate, endDate, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Date Range 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date you want to retrieve transfers from.</param>
        /// <param name="endDate">The end date you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTranfersByDateRangeResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportTranfersByDateRangeResponse>> TranfersByDateRangeWithHttpInfoAsync(string startDate, string endDate, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'startDate' when calling SportApi->TranfersByDateRange");
            }

            // verify the required parameter 'endDate' is set
            if (endDate == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'endDate' when calling SportApi->TranfersByDateRange");
            }


            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("startDate", Sportmonks.Net.Client.ClientUtils.ParameterToString(startDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("endDate", Sportmonks.Net.Client.ClientUtils.ParameterToString(endDate)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TranfersByDateRange";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportTranfersByDateRangeResponse>("/{version}/{sport}/transfers/between/{startDate}/{endDate}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TranfersByDateRange", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTransferByIdResponse</returns>
        public SportTransferByIdResponse TransferById(int transferId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportTransferByIdResponse> localVarResponse = TransferByIdWithHttpInfo(transferId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTransferByIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportTransferByIdResponse> TransferByIdWithHttpInfo(int transferId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("transferId", Sportmonks.Net.Client.ClientUtils.ParameterToString(transferId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TransferById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportTransferByIdResponse>("/{version}/{sport}/transfers/{transferId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTransferByIdResponse</returns>
        public async System.Threading.Tasks.Task<SportTransferByIdResponse> TransferByIdAsync(int transferId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportTransferByIdResponse> localVarResponse = await TransferByIdWithHttpInfoAsync(transferId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId"></param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTransferByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportTransferByIdResponse>> TransferByIdWithHttpInfoAsync(int transferId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("transferId", Sportmonks.Net.Client.ClientUtils.ParameterToString(transferId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TransferById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportTransferByIdResponse>("/{version}/{sport}/transfers/{transferId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTransfersAllResponse</returns>
        public SportTransfersAllResponse TransfersAll(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportTransfersAllResponse> localVarResponse = TransfersAllWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTransfersAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportTransfersAllResponse> TransfersAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.TransfersAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportTransfersAllResponse>("/{version}/{sport}/transfers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransfersAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTransfersAllResponse</returns>
        public async System.Threading.Tasks.Task<SportTransfersAllResponse> TransfersAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportTransfersAllResponse> localVarResponse = await TransfersAllWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTransfersAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportTransfersAllResponse>> TransfersAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.TransfersAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportTransfersAllResponse>("/{version}/{sport}/transfers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransfersAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Player ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">The ID of the player you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTransfersByPlayerIdResponse</returns>
        public SportTransfersByPlayerIdResponse TransfersByPlayerId(int playerId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportTransfersByPlayerIdResponse> localVarResponse = TransfersByPlayerIdWithHttpInfo(playerId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Player ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">The ID of the player you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTransfersByPlayerIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportTransfersByPlayerIdResponse> TransfersByPlayerIdWithHttpInfo(int playerId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("playerId", Sportmonks.Net.Client.ClientUtils.ParameterToString(playerId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TransfersByPlayerId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportTransfersByPlayerIdResponse>("/{version}/{sport}/transfers/players/{playerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransfersByPlayerId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Player ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">The ID of the player you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTransfersByPlayerIdResponse</returns>
        public async System.Threading.Tasks.Task<SportTransfersByPlayerIdResponse> TransfersByPlayerIdAsync(int playerId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportTransfersByPlayerIdResponse> localVarResponse = await TransfersByPlayerIdWithHttpInfoAsync(playerId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Player ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">The ID of the player you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTransfersByPlayerIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportTransfersByPlayerIdResponse>> TransfersByPlayerIdWithHttpInfoAsync(int playerId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("playerId", Sportmonks.Net.Client.ClientUtils.ParameterToString(playerId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TransfersByPlayerId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportTransfersByPlayerIdResponse>("/{version}/{sport}/transfers/players/{playerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransfersByPlayerId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTransfersByTeamIdResponse</returns>
        public SportTransfersByTeamIdResponse TransfersByTeamId(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportTransfersByTeamIdResponse> localVarResponse = TransfersByTeamIdWithHttpInfo(teamId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTransfersByTeamIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportTransfersByTeamIdResponse> TransfersByTeamIdWithHttpInfo(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TransfersByTeamId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportTransfersByTeamIdResponse>("/{version}/{sport}/transfers/teams/{teamId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransfersByTeamId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTransfersByTeamIdResponse</returns>
        public async System.Threading.Tasks.Task<SportTransfersByTeamIdResponse> TransfersByTeamIdAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportTransfersByTeamIdResponse> localVarResponse = await TransfersByTeamIdWithHttpInfoAsync(teamId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Team ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The ID of the team you want to retrieve transfers from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTransfersByTeamIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportTransfersByTeamIdResponse>> TransfersByTeamIdWithHttpInfoAsync(int teamId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("teamId", Sportmonks.Net.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TransfersByTeamId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportTransfersByTeamIdResponse>("/{version}/{sport}/transfers/teams/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransfersByTeamId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Last Updated 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTransfersLatestResponse</returns>
        public SportTransfersLatestResponse TransfersLatest(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportTransfersLatestResponse> localVarResponse = TransfersLatestWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Last Updated 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTransfersLatestResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportTransfersLatestResponse> TransfersLatestWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.TransfersLatest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportTransfersLatestResponse>("/{version}/{sport}/transfers/latest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransfersLatest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Last Updated 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTransfersLatestResponse</returns>
        public async System.Threading.Tasks.Task<SportTransfersLatestResponse> TransfersLatestAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportTransfersLatestResponse> localVarResponse = await TransfersLatestWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Last Updated 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTransfersLatestResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportTransfersLatestResponse>> TransfersLatestWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.TransfersLatest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportTransfersLatestResponse>("/{version}/{sport}/transfers/latest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransfersLatest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvStationId">The ID of the tv station you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTvStationByIdResponse</returns>
        public SportTvStationByIdResponse TvStationById(int tvStationId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportTvStationByIdResponse> localVarResponse = TvStationByIdWithHttpInfo(tvStationId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvStationId">The ID of the tv station you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTvStationByIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportTvStationByIdResponse> TvStationByIdWithHttpInfo(int tvStationId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("tvStationId", Sportmonks.Net.Client.ClientUtils.ParameterToString(tvStationId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TvStationById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportTvStationByIdResponse>("/{version}/{sport}/tv-stations/{tvStationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TvStationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvStationId">The ID of the tv station you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTvStationByIdResponse</returns>
        public async System.Threading.Tasks.Task<SportTvStationByIdResponse> TvStationByIdAsync(int tvStationId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportTvStationByIdResponse> localVarResponse = await TvStationByIdWithHttpInfoAsync(tvStationId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tvStationId">The ID of the tv station you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTvStationByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportTvStationByIdResponse>> TvStationByIdWithHttpInfoAsync(int tvStationId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("tvStationId", Sportmonks.Net.Client.ClientUtils.ParameterToString(tvStationId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TvStationById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportTvStationByIdResponse>("/{version}/{sport}/tv-stations/{tvStationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TvStationById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTvStationsAllResponse</returns>
        public SportTvStationsAllResponse TvStationsAll(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportTvStationsAllResponse> localVarResponse = TvStationsAllWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTvStationsAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportTvStationsAllResponse> TvStationsAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.TvStationsAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportTvStationsAllResponse>("/{version}/{sport}/tv-stations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TvStationsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTvStationsAllResponse</returns>
        public async System.Threading.Tasks.Task<SportTvStationsAllResponse> TvStationsAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportTvStationsAllResponse> localVarResponse = await TvStationsAllWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTvStationsAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportTvStationsAllResponse>> TvStationsAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.TvStationsAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportTvStationsAllResponse>("/{version}/{sport}/tv-stations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TvStationsAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve tv-stations from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportTvStationsByFixtureIdResponse</returns>
        public SportTvStationsByFixtureIdResponse TvStationsByFixtureId(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportTvStationsByFixtureIdResponse> localVarResponse = TvStationsByFixtureIdWithHttpInfo(fixtureId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve tv-stations from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportTvStationsByFixtureIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportTvStationsByFixtureIdResponse> TvStationsByFixtureIdWithHttpInfo(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TvStationsByFixtureId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportTvStationsByFixtureIdResponse>("/{version}/{sport}/tv-stations/fixtures/{fixtureId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TvStationsByFixtureId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve tv-stations from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportTvStationsByFixtureIdResponse</returns>
        public async System.Threading.Tasks.Task<SportTvStationsByFixtureIdResponse> TvStationsByFixtureIdAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportTvStationsByFixtureIdResponse> localVarResponse = await TvStationsByFixtureIdWithHttpInfoAsync(fixtureId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Fixture ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fixtureId">The ID of the fixture you want to retrieve tv-stations from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportTvStationsByFixtureIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportTvStationsByFixtureIdResponse>> TvStationsByFixtureIdWithHttpInfoAsync(int fixtureId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("fixtureId", Sportmonks.Net.Client.ClientUtils.ParameterToString(fixtureId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.TvStationsByFixtureId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportTvStationsByFixtureIdResponse>("/{version}/{sport}/tv-stations/fixtures/{fixtureId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TvStationsByFixtureId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="venueId">The ID of the venue you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportVenueByIdResponse</returns>
        public SportVenueByIdResponse VenueById(int venueId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportVenueByIdResponse> localVarResponse = VenueByIdWithHttpInfo(venueId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="venueId">The ID of the venue you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportVenueByIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportVenueByIdResponse> VenueByIdWithHttpInfo(int venueId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("venueId", Sportmonks.Net.Client.ClientUtils.ParameterToString(venueId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.VenueById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportVenueByIdResponse>("/{version}/{sport}/venues/{venueId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VenueById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="venueId">The ID of the venue you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportVenueByIdResponse</returns>
        public async System.Threading.Tasks.Task<SportVenueByIdResponse> VenueByIdAsync(int venueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportVenueByIdResponse> localVarResponse = await VenueByIdWithHttpInfoAsync(venueId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="venueId">The ID of the venue you want to retrieve.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportVenueByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportVenueByIdResponse>> VenueByIdWithHttpInfoAsync(int venueId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("venueId", Sportmonks.Net.Client.ClientUtils.ParameterToString(venueId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.VenueById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportVenueByIdResponse>("/{version}/{sport}/venues/{venueId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VenueById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportVenuesAllResponse</returns>
        public SportVenuesAllResponse VenuesAll(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportVenuesAllResponse> localVarResponse = VenuesAllWithHttpInfo(version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportVenuesAllResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportVenuesAllResponse> VenuesAllWithHttpInfo(string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.VenuesAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportVenuesAllResponse>("/{version}/{sport}/venues", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VenuesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportVenuesAllResponse</returns>
        public async System.Threading.Tasks.Task<SportVenuesAllResponse> VenuesAllAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportVenuesAllResponse> localVarResponse = await VenuesAllWithHttpInfoAsync(version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// All 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportVenuesAllResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportVenuesAllResponse>> VenuesAllWithHttpInfoAsync(string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }

            localVarRequestOptions.Operation = "SportApi.VenuesAll";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportVenuesAllResponse>("/{version}/{sport}/venues", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VenuesAll", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve venues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportVenuesBySeasonIdResponse</returns>
        public SportVenuesBySeasonIdResponse VenuesBySeasonId(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportVenuesBySeasonIdResponse> localVarResponse = VenuesBySeasonIdWithHttpInfo(seasonId, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve venues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportVenuesBySeasonIdResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportVenuesBySeasonIdResponse> VenuesBySeasonIdWithHttpInfo(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.VenuesBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportVenuesBySeasonIdResponse>("/{version}/{sport}/venues/seasons/{seasonId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VenuesBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve venues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportVenuesBySeasonIdResponse</returns>
        public async System.Threading.Tasks.Task<SportVenuesBySeasonIdResponse> VenuesBySeasonIdAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportVenuesBySeasonIdResponse> localVarResponse = await VenuesBySeasonIdWithHttpInfoAsync(seasonId, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// By Season ID 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seasonId">The ID of the season you want to retrieve venues from.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportVenuesBySeasonIdResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportVenuesBySeasonIdResponse>> VenuesBySeasonIdWithHttpInfoAsync(int seasonId, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("seasonId", Sportmonks.Net.Client.ClientUtils.ParameterToString(seasonId)); // path parameter

            localVarRequestOptions.Operation = "SportApi.VenuesBySeasonId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportVenuesBySeasonIdResponse>("/{version}/{sport}/venues/seasons/{seasonId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VenuesBySeasonId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SportVenuesSearchResponse</returns>
        public SportVenuesSearchResponse VenuesSearch(string name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            Sportmonks.Net.Client.ApiResponse<SportVenuesSearchResponse> localVarResponse = VenuesSearchWithHttpInfo(name, version, sport);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SportVenuesSearchResponse</returns>
        public Sportmonks.Net.Client.ApiResponse<SportVenuesSearchResponse> VenuesSearchWithHttpInfo(string name, string version = default(string), string sport = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling SportApi->VenuesSearch");
            }

            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.VenuesSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SportVenuesSearchResponse>("/{version}/{sport}/venues/search/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VenuesSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SportVenuesSearchResponse</returns>
        public async System.Threading.Tasks.Task<SportVenuesSearchResponse> VenuesSearchAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Sportmonks.Net.Client.ApiResponse<SportVenuesSearchResponse> localVarResponse = await VenuesSearchWithHttpInfoAsync(name, version, sport, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search 
        /// </summary>
        /// <exception cref="Sportmonks.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name you want to search on.</param>
        /// <param name="version">The version of the API. (optional)</param>
        /// <param name="sport">The sport you want retrieve entities from. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SportVenuesSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Sportmonks.Net.Client.ApiResponse<SportVenuesSearchResponse>> VenuesSearchWithHttpInfoAsync(string name, string version = default(string), string sport = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new Sportmonks.Net.Client.ApiException(400, "Missing required parameter 'name' when calling SportApi->VenuesSearch");
            }


            Sportmonks.Net.Client.RequestOptions localVarRequestOptions = new Sportmonks.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sportmonks.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Sportmonks.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (version != null)
            {
                localVarRequestOptions.PathParameters.Add("version", Sportmonks.Net.Client.ClientUtils.ParameterToString(version)); // path parameter
            }
            if (sport != null)
            {
                localVarRequestOptions.PathParameters.Add("sport", Sportmonks.Net.Client.ClientUtils.ParameterToString(sport)); // path parameter
            }
            localVarRequestOptions.PathParameters.Add("name", Sportmonks.Net.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "SportApi.VenuesSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apikeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SportVenuesSearchResponse>("/{version}/{sport}/venues/search/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VenuesSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
