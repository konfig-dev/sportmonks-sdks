/*
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sportmonks.Net.Client.OpenAPIDateConverter;

namespace Sportmonks.Net.Model
{
    /// <summary>
    /// SportSquadsByTeamIdResponseDataInner
    /// </summary>
    [DataContract(Name = "SportSquadsByTeamIdResponse_data_inner")]
    public partial class SportSquadsByTeamIdResponseDataInner : IEquatable<SportSquadsByTeamIdResponseDataInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SportSquadsByTeamIdResponseDataInner" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="transferId">transferId.</param>
        /// <param name="playerId">playerId.</param>
        /// <param name="teamId">teamId.</param>
        /// <param name="positionId">positionId.</param>
        /// <param name="detailedPositionId">detailedPositionId.</param>
        /// <param name="active">active.</param>
        /// <param name="yerseyNumber">yerseyNumber.</param>
        /// <param name="start">start.</param>
        /// <param name="end">end.</param>
        public SportSquadsByTeamIdResponseDataInner(decimal id = default(decimal), SportSquadsByTeamIdResponseDataInnerTransferId transferId = default(SportSquadsByTeamIdResponseDataInnerTransferId), decimal playerId = default(decimal), decimal teamId = default(decimal), decimal positionId = default(decimal), decimal detailedPositionId = default(decimal), bool active = default(bool), SportSquadsByTeamIdResponseDataInnerYerseyNumber yerseyNumber = default(SportSquadsByTeamIdResponseDataInnerYerseyNumber), string start = default(string), string end = default(string))
        {
            this.Id = id;
            this.TransferId = transferId;
            this.PlayerId = playerId;
            this.TeamId = teamId;
            this.PositionId = positionId;
            this.DetailedPositionId = detailedPositionId;
            this.Active = active;
            this.YerseyNumber = yerseyNumber;
            this.Start = start;
            this.End = end;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public decimal Id { get; set; }

        /// <summary>
        /// Gets or Sets TransferId
        /// </summary>
        [DataMember(Name = "transfer_id", EmitDefaultValue = false)]
        public SportSquadsByTeamIdResponseDataInnerTransferId TransferId { get; set; }

        /// <summary>
        /// Gets or Sets PlayerId
        /// </summary>
        [DataMember(Name = "player_id", EmitDefaultValue = false)]
        public decimal PlayerId { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name = "team_id", EmitDefaultValue = false)]
        public decimal TeamId { get; set; }

        /// <summary>
        /// Gets or Sets PositionId
        /// </summary>
        [DataMember(Name = "position_id", EmitDefaultValue = false)]
        public decimal PositionId { get; set; }

        /// <summary>
        /// Gets or Sets DetailedPositionId
        /// </summary>
        [DataMember(Name = "detailed_position_id", EmitDefaultValue = false)]
        public decimal DetailedPositionId { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets YerseyNumber
        /// </summary>
        [DataMember(Name = "yersey_number", EmitDefaultValue = false)]
        public SportSquadsByTeamIdResponseDataInnerYerseyNumber YerseyNumber { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public string Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name = "end", EmitDefaultValue = false)]
        public string End { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SportSquadsByTeamIdResponseDataInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TransferId: ").Append(TransferId).Append("\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  PositionId: ").Append(PositionId).Append("\n");
            sb.Append("  DetailedPositionId: ").Append(DetailedPositionId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  YerseyNumber: ").Append(YerseyNumber).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SportSquadsByTeamIdResponseDataInner);
        }

        /// <summary>
        /// Returns true if SportSquadsByTeamIdResponseDataInner instances are equal
        /// </summary>
        /// <param name="input">Instance of SportSquadsByTeamIdResponseDataInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SportSquadsByTeamIdResponseDataInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.TransferId == input.TransferId ||
                    (this.TransferId != null &&
                    this.TransferId.Equals(input.TransferId))
                ) && 
                (
                    this.PlayerId == input.PlayerId ||
                    this.PlayerId.Equals(input.PlayerId)
                ) && 
                (
                    this.TeamId == input.TeamId ||
                    this.TeamId.Equals(input.TeamId)
                ) && 
                (
                    this.PositionId == input.PositionId ||
                    this.PositionId.Equals(input.PositionId)
                ) && 
                (
                    this.DetailedPositionId == input.DetailedPositionId ||
                    this.DetailedPositionId.Equals(input.DetailedPositionId)
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.YerseyNumber == input.YerseyNumber ||
                    (this.YerseyNumber != null &&
                    this.YerseyNumber.Equals(input.YerseyNumber))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.TransferId != null)
                {
                    hashCode = (hashCode * 59) + this.TransferId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PlayerId.GetHashCode();
                hashCode = (hashCode * 59) + this.TeamId.GetHashCode();
                hashCode = (hashCode * 59) + this.PositionId.GetHashCode();
                hashCode = (hashCode * 59) + this.DetailedPositionId.GetHashCode();
                hashCode = (hashCode * 59) + this.Active.GetHashCode();
                if (this.YerseyNumber != null)
                {
                    hashCode = (hashCode * 59) + this.YerseyNumber.GetHashCode();
                }
                if (this.Start != null)
                {
                    hashCode = (hashCode * 59) + this.Start.GetHashCode();
                }
                if (this.End != null)
                {
                    hashCode = (hashCode * 59) + this.End.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
