/*
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sportmonks.Net.Client.OpenAPIDateConverter;

namespace Sportmonks.Net.Model
{
    /// <summary>
    /// SportOddsPreMatchByFixtureAndMarketIdResponseDataInner
    /// </summary>
    [DataContract(Name = "SportOddsPreMatchByFixtureAndMarketIdResponse_data_inner")]
    public partial class SportOddsPreMatchByFixtureAndMarketIdResponseDataInner : IEquatable<SportOddsPreMatchByFixtureAndMarketIdResponseDataInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SportOddsPreMatchByFixtureAndMarketIdResponseDataInner" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="fixtureId">fixtureId.</param>
        /// <param name="marketId">marketId.</param>
        /// <param name="bookmakerId">bookmakerId.</param>
        /// <param name="label">label.</param>
        /// <param name="value">value.</param>
        /// <param name="name">name.</param>
        /// <param name="sortOrder">sortOrder.</param>
        /// <param name="marketDescription">marketDescription.</param>
        /// <param name="probability">probability.</param>
        /// <param name="dp3">dp3.</param>
        /// <param name="fractional">fractional.</param>
        /// <param name="american">american.</param>
        /// <param name="winning">winning.</param>
        /// <param name="stopped">stopped.</param>
        /// <param name="total">total.</param>
        /// <param name="handicap">handicap.</param>
        /// <param name="participants">participants.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="originalLabel">originalLabel.</param>
        /// <param name="latestBookmakerUpdate">latestBookmakerUpdate.</param>
        public SportOddsPreMatchByFixtureAndMarketIdResponseDataInner(decimal id = default(decimal), decimal fixtureId = default(decimal), decimal marketId = default(decimal), decimal bookmakerId = default(decimal), string label = default(string), string value = default(string), string name = default(string), string sortOrder = default(string), string marketDescription = default(string), string probability = default(string), string dp3 = default(string), string fractional = default(string), string american = default(string), string winning = default(string), bool stopped = default(bool), string total = default(string), string handicap = default(string), string participants = default(string), string createdAt = default(string), string updatedAt = default(string), string originalLabel = default(string), string latestBookmakerUpdate = default(string))
        {
            this.Id = id;
            this.FixtureId = fixtureId;
            this.MarketId = marketId;
            this.BookmakerId = bookmakerId;
            this.Label = label;
            this.Value = value;
            this.Name = name;
            this.SortOrder = sortOrder;
            this.MarketDescription = marketDescription;
            this.Probability = probability;
            this.Dp3 = dp3;
            this.Fractional = fractional;
            this.American = american;
            this.Winning = winning;
            this.Stopped = stopped;
            this.Total = total;
            this.Handicap = handicap;
            this.Participants = participants;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.OriginalLabel = originalLabel;
            this.LatestBookmakerUpdate = latestBookmakerUpdate;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public decimal Id { get; set; }

        /// <summary>
        /// Gets or Sets FixtureId
        /// </summary>
        [DataMember(Name = "fixture_id", EmitDefaultValue = false)]
        public decimal FixtureId { get; set; }

        /// <summary>
        /// Gets or Sets MarketId
        /// </summary>
        [DataMember(Name = "market_id", EmitDefaultValue = false)]
        public decimal MarketId { get; set; }

        /// <summary>
        /// Gets or Sets BookmakerId
        /// </summary>
        [DataMember(Name = "bookmaker_id", EmitDefaultValue = false)]
        public decimal BookmakerId { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>
        [DataMember(Name = "sort_order", EmitDefaultValue = true)]
        public string SortOrder { get; set; }

        /// <summary>
        /// Gets or Sets MarketDescription
        /// </summary>
        [DataMember(Name = "market_description", EmitDefaultValue = false)]
        public string MarketDescription { get; set; }

        /// <summary>
        /// Gets or Sets Probability
        /// </summary>
        [DataMember(Name = "probability", EmitDefaultValue = false)]
        public string Probability { get; set; }

        /// <summary>
        /// Gets or Sets Dp3
        /// </summary>
        [DataMember(Name = "dp3", EmitDefaultValue = false)]
        public string Dp3 { get; set; }

        /// <summary>
        /// Gets or Sets Fractional
        /// </summary>
        [DataMember(Name = "fractional", EmitDefaultValue = false)]
        public string Fractional { get; set; }

        /// <summary>
        /// Gets or Sets American
        /// </summary>
        [DataMember(Name = "american", EmitDefaultValue = false)]
        public string American { get; set; }

        /// <summary>
        /// Gets or Sets Winning
        /// </summary>
        [DataMember(Name = "winning", EmitDefaultValue = true)]
        public string Winning { get; set; }

        /// <summary>
        /// Gets or Sets Stopped
        /// </summary>
        [DataMember(Name = "stopped", EmitDefaultValue = true)]
        public bool Stopped { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "total", EmitDefaultValue = true)]
        public string Total { get; set; }

        /// <summary>
        /// Gets or Sets Handicap
        /// </summary>
        [DataMember(Name = "handicap", EmitDefaultValue = true)]
        public string Handicap { get; set; }

        /// <summary>
        /// Gets or Sets Participants
        /// </summary>
        [DataMember(Name = "participants", EmitDefaultValue = true)]
        public string Participants { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets OriginalLabel
        /// </summary>
        [DataMember(Name = "original_label", EmitDefaultValue = true)]
        public string OriginalLabel { get; set; }

        /// <summary>
        /// Gets or Sets LatestBookmakerUpdate
        /// </summary>
        [DataMember(Name = "latest_bookmaker_update", EmitDefaultValue = false)]
        public string LatestBookmakerUpdate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SportOddsPreMatchByFixtureAndMarketIdResponseDataInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FixtureId: ").Append(FixtureId).Append("\n");
            sb.Append("  MarketId: ").Append(MarketId).Append("\n");
            sb.Append("  BookmakerId: ").Append(BookmakerId).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  MarketDescription: ").Append(MarketDescription).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("  Dp3: ").Append(Dp3).Append("\n");
            sb.Append("  Fractional: ").Append(Fractional).Append("\n");
            sb.Append("  American: ").Append(American).Append("\n");
            sb.Append("  Winning: ").Append(Winning).Append("\n");
            sb.Append("  Stopped: ").Append(Stopped).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Handicap: ").Append(Handicap).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  OriginalLabel: ").Append(OriginalLabel).Append("\n");
            sb.Append("  LatestBookmakerUpdate: ").Append(LatestBookmakerUpdate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SportOddsPreMatchByFixtureAndMarketIdResponseDataInner);
        }

        /// <summary>
        /// Returns true if SportOddsPreMatchByFixtureAndMarketIdResponseDataInner instances are equal
        /// </summary>
        /// <param name="input">Instance of SportOddsPreMatchByFixtureAndMarketIdResponseDataInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SportOddsPreMatchByFixtureAndMarketIdResponseDataInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.FixtureId == input.FixtureId ||
                    this.FixtureId.Equals(input.FixtureId)
                ) && 
                (
                    this.MarketId == input.MarketId ||
                    this.MarketId.Equals(input.MarketId)
                ) && 
                (
                    this.BookmakerId == input.BookmakerId ||
                    this.BookmakerId.Equals(input.BookmakerId)
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    (this.SortOrder != null &&
                    this.SortOrder.Equals(input.SortOrder))
                ) && 
                (
                    this.MarketDescription == input.MarketDescription ||
                    (this.MarketDescription != null &&
                    this.MarketDescription.Equals(input.MarketDescription))
                ) && 
                (
                    this.Probability == input.Probability ||
                    (this.Probability != null &&
                    this.Probability.Equals(input.Probability))
                ) && 
                (
                    this.Dp3 == input.Dp3 ||
                    (this.Dp3 != null &&
                    this.Dp3.Equals(input.Dp3))
                ) && 
                (
                    this.Fractional == input.Fractional ||
                    (this.Fractional != null &&
                    this.Fractional.Equals(input.Fractional))
                ) && 
                (
                    this.American == input.American ||
                    (this.American != null &&
                    this.American.Equals(input.American))
                ) && 
                (
                    this.Winning == input.Winning ||
                    (this.Winning != null &&
                    this.Winning.Equals(input.Winning))
                ) && 
                (
                    this.Stopped == input.Stopped ||
                    this.Stopped.Equals(input.Stopped)
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.Handicap == input.Handicap ||
                    (this.Handicap != null &&
                    this.Handicap.Equals(input.Handicap))
                ) && 
                (
                    this.Participants == input.Participants ||
                    (this.Participants != null &&
                    this.Participants.Equals(input.Participants))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.OriginalLabel == input.OriginalLabel ||
                    (this.OriginalLabel != null &&
                    this.OriginalLabel.Equals(input.OriginalLabel))
                ) && 
                (
                    this.LatestBookmakerUpdate == input.LatestBookmakerUpdate ||
                    (this.LatestBookmakerUpdate != null &&
                    this.LatestBookmakerUpdate.Equals(input.LatestBookmakerUpdate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.FixtureId.GetHashCode();
                hashCode = (hashCode * 59) + this.MarketId.GetHashCode();
                hashCode = (hashCode * 59) + this.BookmakerId.GetHashCode();
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.SortOrder != null)
                {
                    hashCode = (hashCode * 59) + this.SortOrder.GetHashCode();
                }
                if (this.MarketDescription != null)
                {
                    hashCode = (hashCode * 59) + this.MarketDescription.GetHashCode();
                }
                if (this.Probability != null)
                {
                    hashCode = (hashCode * 59) + this.Probability.GetHashCode();
                }
                if (this.Dp3 != null)
                {
                    hashCode = (hashCode * 59) + this.Dp3.GetHashCode();
                }
                if (this.Fractional != null)
                {
                    hashCode = (hashCode * 59) + this.Fractional.GetHashCode();
                }
                if (this.American != null)
                {
                    hashCode = (hashCode * 59) + this.American.GetHashCode();
                }
                if (this.Winning != null)
                {
                    hashCode = (hashCode * 59) + this.Winning.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Stopped.GetHashCode();
                if (this.Total != null)
                {
                    hashCode = (hashCode * 59) + this.Total.GetHashCode();
                }
                if (this.Handicap != null)
                {
                    hashCode = (hashCode * 59) + this.Handicap.GetHashCode();
                }
                if (this.Participants != null)
                {
                    hashCode = (hashCode * 59) + this.Participants.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.OriginalLabel != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalLabel.GetHashCode();
                }
                if (this.LatestBookmakerUpdate != null)
                {
                    hashCode = (hashCode * 59) + this.LatestBookmakerUpdate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
