/*
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sportmonks.Net.Client.OpenAPIDateConverter;

namespace Sportmonks.Net.Model
{
    /// <summary>
    /// SportCommentariesAllResponseDataInner
    /// </summary>
    [DataContract(Name = "SportCommentariesAllResponse_data_inner")]
    public partial class SportCommentariesAllResponseDataInner : IEquatable<SportCommentariesAllResponseDataInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SportCommentariesAllResponseDataInner" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="fixtureId">fixtureId.</param>
        /// <param name="playerId">playerId.</param>
        /// <param name="relatedPlayerId">relatedPlayerId.</param>
        /// <param name="comment">comment.</param>
        /// <param name="minute">minute.</param>
        /// <param name="extraMinute">extraMinute.</param>
        /// <param name="isGoal">isGoal.</param>
        /// <param name="isImportant">isImportant.</param>
        /// <param name="order">order.</param>
        public SportCommentariesAllResponseDataInner(decimal id = default(decimal), decimal fixtureId = default(decimal), string playerId = default(string), string relatedPlayerId = default(string), string comment = default(string), decimal minute = default(decimal), string extraMinute = default(string), bool isGoal = default(bool), bool isImportant = default(bool), decimal order = default(decimal))
        {
            this.Id = id;
            this.FixtureId = fixtureId;
            this.PlayerId = playerId;
            this.RelatedPlayerId = relatedPlayerId;
            this.Comment = comment;
            this.Minute = minute;
            this.ExtraMinute = extraMinute;
            this.IsGoal = isGoal;
            this.IsImportant = isImportant;
            this.Order = order;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public decimal Id { get; set; }

        /// <summary>
        /// Gets or Sets FixtureId
        /// </summary>
        [DataMember(Name = "fixture_id", EmitDefaultValue = false)]
        public decimal FixtureId { get; set; }

        /// <summary>
        /// Gets or Sets PlayerId
        /// </summary>
        [DataMember(Name = "player_id", EmitDefaultValue = true)]
        public string PlayerId { get; set; }

        /// <summary>
        /// Gets or Sets RelatedPlayerId
        /// </summary>
        [DataMember(Name = "related_player_id", EmitDefaultValue = true)]
        public string RelatedPlayerId { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Minute
        /// </summary>
        [DataMember(Name = "minute", EmitDefaultValue = false)]
        public decimal Minute { get; set; }

        /// <summary>
        /// Gets or Sets ExtraMinute
        /// </summary>
        [DataMember(Name = "extra_minute", EmitDefaultValue = true)]
        public string ExtraMinute { get; set; }

        /// <summary>
        /// Gets or Sets IsGoal
        /// </summary>
        [DataMember(Name = "is_goal", EmitDefaultValue = true)]
        public bool IsGoal { get; set; }

        /// <summary>
        /// Gets or Sets IsImportant
        /// </summary>
        [DataMember(Name = "is_important", EmitDefaultValue = true)]
        public bool IsImportant { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public decimal Order { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SportCommentariesAllResponseDataInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FixtureId: ").Append(FixtureId).Append("\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("  RelatedPlayerId: ").Append(RelatedPlayerId).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Minute: ").Append(Minute).Append("\n");
            sb.Append("  ExtraMinute: ").Append(ExtraMinute).Append("\n");
            sb.Append("  IsGoal: ").Append(IsGoal).Append("\n");
            sb.Append("  IsImportant: ").Append(IsImportant).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SportCommentariesAllResponseDataInner);
        }

        /// <summary>
        /// Returns true if SportCommentariesAllResponseDataInner instances are equal
        /// </summary>
        /// <param name="input">Instance of SportCommentariesAllResponseDataInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SportCommentariesAllResponseDataInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.FixtureId == input.FixtureId ||
                    this.FixtureId.Equals(input.FixtureId)
                ) && 
                (
                    this.PlayerId == input.PlayerId ||
                    (this.PlayerId != null &&
                    this.PlayerId.Equals(input.PlayerId))
                ) && 
                (
                    this.RelatedPlayerId == input.RelatedPlayerId ||
                    (this.RelatedPlayerId != null &&
                    this.RelatedPlayerId.Equals(input.RelatedPlayerId))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Minute == input.Minute ||
                    this.Minute.Equals(input.Minute)
                ) && 
                (
                    this.ExtraMinute == input.ExtraMinute ||
                    (this.ExtraMinute != null &&
                    this.ExtraMinute.Equals(input.ExtraMinute))
                ) && 
                (
                    this.IsGoal == input.IsGoal ||
                    this.IsGoal.Equals(input.IsGoal)
                ) && 
                (
                    this.IsImportant == input.IsImportant ||
                    this.IsImportant.Equals(input.IsImportant)
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.FixtureId.GetHashCode();
                if (this.PlayerId != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerId.GetHashCode();
                }
                if (this.RelatedPlayerId != null)
                {
                    hashCode = (hashCode * 59) + this.RelatedPlayerId.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Minute.GetHashCode();
                if (this.ExtraMinute != null)
                {
                    hashCode = (hashCode * 59) + this.ExtraMinute.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsGoal.GetHashCode();
                hashCode = (hashCode * 59) + this.IsImportant.GetHashCode();
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
