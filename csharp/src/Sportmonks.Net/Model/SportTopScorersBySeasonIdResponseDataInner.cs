/*
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sportmonks.Net.Client.OpenAPIDateConverter;

namespace Sportmonks.Net.Model
{
    /// <summary>
    /// SportTopScorersBySeasonIdResponseDataInner
    /// </summary>
    [DataContract(Name = "SportTopScorersBySeasonIdResponse_data_inner")]
    public partial class SportTopScorersBySeasonIdResponseDataInner : IEquatable<SportTopScorersBySeasonIdResponseDataInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SportTopScorersBySeasonIdResponseDataInner" /> class.
        /// </summary>
        /// <param name="seasonId">seasonId.</param>
        /// <param name="playerId">playerId.</param>
        /// <param name="typeId">typeId.</param>
        /// <param name="teamId">teamId.</param>
        /// <param name="position">position.</param>
        /// <param name="total">total.</param>
        /// <param name="points">points.</param>
        public SportTopScorersBySeasonIdResponseDataInner(decimal seasonId = default(decimal), decimal playerId = default(decimal), decimal typeId = default(decimal), decimal teamId = default(decimal), decimal position = default(decimal), decimal total = default(decimal), string points = default(string))
        {
            this.SeasonId = seasonId;
            this.PlayerId = playerId;
            this.TypeId = typeId;
            this.TeamId = teamId;
            this.Position = position;
            this.Total = total;
            this.Points = points;
        }

        /// <summary>
        /// Gets or Sets SeasonId
        /// </summary>
        [DataMember(Name = "season_id", EmitDefaultValue = false)]
        public decimal SeasonId { get; set; }

        /// <summary>
        /// Gets or Sets PlayerId
        /// </summary>
        [DataMember(Name = "player_id", EmitDefaultValue = false)]
        public decimal PlayerId { get; set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name = "type_id", EmitDefaultValue = false)]
        public decimal TypeId { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name = "team_id", EmitDefaultValue = false)]
        public decimal TeamId { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public decimal Position { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public decimal Total { get; set; }

        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name = "points", EmitDefaultValue = true)]
        public string Points { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SportTopScorersBySeasonIdResponseDataInner {\n");
            sb.Append("  SeasonId: ").Append(SeasonId).Append("\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SportTopScorersBySeasonIdResponseDataInner);
        }

        /// <summary>
        /// Returns true if SportTopScorersBySeasonIdResponseDataInner instances are equal
        /// </summary>
        /// <param name="input">Instance of SportTopScorersBySeasonIdResponseDataInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SportTopScorersBySeasonIdResponseDataInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SeasonId == input.SeasonId ||
                    this.SeasonId.Equals(input.SeasonId)
                ) && 
                (
                    this.PlayerId == input.PlayerId ||
                    this.PlayerId.Equals(input.PlayerId)
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    this.TypeId.Equals(input.TypeId)
                ) && 
                (
                    this.TeamId == input.TeamId ||
                    this.TeamId.Equals(input.TeamId)
                ) && 
                (
                    this.Position == input.Position ||
                    this.Position.Equals(input.Position)
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.Points == input.Points ||
                    (this.Points != null &&
                    this.Points.Equals(input.Points))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SeasonId.GetHashCode();
                hashCode = (hashCode * 59) + this.PlayerId.GetHashCode();
                hashCode = (hashCode * 59) + this.TypeId.GetHashCode();
                hashCode = (hashCode * 59) + this.TeamId.GetHashCode();
                hashCode = (hashCode * 59) + this.Position.GetHashCode();
                hashCode = (hashCode * 59) + this.Total.GetHashCode();
                if (this.Points != null)
                {
                    hashCode = (hashCode * 59) + this.Points.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
