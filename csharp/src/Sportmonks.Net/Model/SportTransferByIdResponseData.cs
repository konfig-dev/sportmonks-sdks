/*
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sportmonks.Net.Client.OpenAPIDateConverter;

namespace Sportmonks.Net.Model
{
    /// <summary>
    /// SportTransferByIdResponseData
    /// </summary>
    [DataContract(Name = "SportTransferByIdResponse_data")]
    public partial class SportTransferByIdResponseData : IEquatable<SportTransferByIdResponseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SportTransferByIdResponseData" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="sportId">sportId.</param>
        /// <param name="playerId">playerId.</param>
        /// <param name="typeId">typeId.</param>
        /// <param name="fromTeamId">fromTeamId.</param>
        /// <param name="toTeamId">toTeamId.</param>
        /// <param name="positionId">positionId.</param>
        /// <param name="detailedPositionId">detailedPositionId.</param>
        /// <param name="date">date.</param>
        /// <param name="careerEnded">careerEnded.</param>
        /// <param name="completed">completed.</param>
        /// <param name="completedAt">completedAt.</param>
        public SportTransferByIdResponseData(decimal id = default(decimal), decimal sportId = default(decimal), decimal playerId = default(decimal), decimal typeId = default(decimal), decimal fromTeamId = default(decimal), decimal toTeamId = default(decimal), decimal positionId = default(decimal), decimal detailedPositionId = default(decimal), string date = default(string), bool careerEnded = default(bool), bool completed = default(bool), string completedAt = default(string))
        {
            this.Id = id;
            this.SportId = sportId;
            this.PlayerId = playerId;
            this.TypeId = typeId;
            this.FromTeamId = fromTeamId;
            this.ToTeamId = toTeamId;
            this.PositionId = positionId;
            this.DetailedPositionId = detailedPositionId;
            this.Date = date;
            this.CareerEnded = careerEnded;
            this.Completed = completed;
            this.CompletedAt = completedAt;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public decimal Id { get; set; }

        /// <summary>
        /// Gets or Sets SportId
        /// </summary>
        [DataMember(Name = "sport_id", EmitDefaultValue = false)]
        public decimal SportId { get; set; }

        /// <summary>
        /// Gets or Sets PlayerId
        /// </summary>
        [DataMember(Name = "player_id", EmitDefaultValue = false)]
        public decimal PlayerId { get; set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name = "type_id", EmitDefaultValue = false)]
        public decimal TypeId { get; set; }

        /// <summary>
        /// Gets or Sets FromTeamId
        /// </summary>
        [DataMember(Name = "from_team_id", EmitDefaultValue = false)]
        public decimal FromTeamId { get; set; }

        /// <summary>
        /// Gets or Sets ToTeamId
        /// </summary>
        [DataMember(Name = "to_team_id", EmitDefaultValue = false)]
        public decimal ToTeamId { get; set; }

        /// <summary>
        /// Gets or Sets PositionId
        /// </summary>
        [DataMember(Name = "position_id", EmitDefaultValue = false)]
        public decimal PositionId { get; set; }

        /// <summary>
        /// Gets or Sets DetailedPositionId
        /// </summary>
        [DataMember(Name = "detailed_position_id", EmitDefaultValue = false)]
        public decimal DetailedPositionId { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets CareerEnded
        /// </summary>
        [DataMember(Name = "career_ended", EmitDefaultValue = true)]
        public bool CareerEnded { get; set; }

        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        [DataMember(Name = "completed", EmitDefaultValue = true)]
        public bool Completed { get; set; }

        /// <summary>
        /// Gets or Sets CompletedAt
        /// </summary>
        [DataMember(Name = "completed_at", EmitDefaultValue = false)]
        public string CompletedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SportTransferByIdResponseData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SportId: ").Append(SportId).Append("\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  FromTeamId: ").Append(FromTeamId).Append("\n");
            sb.Append("  ToTeamId: ").Append(ToTeamId).Append("\n");
            sb.Append("  PositionId: ").Append(PositionId).Append("\n");
            sb.Append("  DetailedPositionId: ").Append(DetailedPositionId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  CareerEnded: ").Append(CareerEnded).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SportTransferByIdResponseData);
        }

        /// <summary>
        /// Returns true if SportTransferByIdResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of SportTransferByIdResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SportTransferByIdResponseData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.SportId == input.SportId ||
                    this.SportId.Equals(input.SportId)
                ) && 
                (
                    this.PlayerId == input.PlayerId ||
                    this.PlayerId.Equals(input.PlayerId)
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    this.TypeId.Equals(input.TypeId)
                ) && 
                (
                    this.FromTeamId == input.FromTeamId ||
                    this.FromTeamId.Equals(input.FromTeamId)
                ) && 
                (
                    this.ToTeamId == input.ToTeamId ||
                    this.ToTeamId.Equals(input.ToTeamId)
                ) && 
                (
                    this.PositionId == input.PositionId ||
                    this.PositionId.Equals(input.PositionId)
                ) && 
                (
                    this.DetailedPositionId == input.DetailedPositionId ||
                    this.DetailedPositionId.Equals(input.DetailedPositionId)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.CareerEnded == input.CareerEnded ||
                    this.CareerEnded.Equals(input.CareerEnded)
                ) && 
                (
                    this.Completed == input.Completed ||
                    this.Completed.Equals(input.Completed)
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.SportId.GetHashCode();
                hashCode = (hashCode * 59) + this.PlayerId.GetHashCode();
                hashCode = (hashCode * 59) + this.TypeId.GetHashCode();
                hashCode = (hashCode * 59) + this.FromTeamId.GetHashCode();
                hashCode = (hashCode * 59) + this.ToTeamId.GetHashCode();
                hashCode = (hashCode * 59) + this.PositionId.GetHashCode();
                hashCode = (hashCode * 59) + this.DetailedPositionId.GetHashCode();
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CareerEnded.GetHashCode();
                hashCode = (hashCode * 59) + this.Completed.GetHashCode();
                if (this.CompletedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
