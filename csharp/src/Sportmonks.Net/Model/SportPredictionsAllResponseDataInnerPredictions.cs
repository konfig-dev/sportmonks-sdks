/*
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sportmonks.Net.Client.OpenAPIDateConverter;

namespace Sportmonks.Net.Model
{
    /// <summary>
    /// SportPredictionsAllResponseDataInnerPredictions
    /// </summary>
    [DataContract(Name = "SportPredictionsAllResponse_data_inner_predictions")]
    public partial class SportPredictionsAllResponseDataInnerPredictions : IEquatable<SportPredictionsAllResponseDataInnerPredictions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SportPredictionsAllResponseDataInnerPredictions" /> class.
        /// </summary>
        /// <param name="_true">_true.</param>
        /// <param name="_false">_false.</param>
        /// <param name="scores">scores.</param>
        /// <param name="home">home.</param>
        /// <param name="draw">draw.</param>
        /// <param name="away">away.</param>
        public SportPredictionsAllResponseDataInnerPredictions(decimal _true = default(decimal), decimal _false = default(decimal), SportPredictionsAllResponseDataInnerPredictionsScores scores = default(SportPredictionsAllResponseDataInnerPredictionsScores), decimal home = default(decimal), decimal draw = default(decimal), decimal away = default(decimal))
        {
            this.True = _true;
            this.False = _false;
            this.Scores = scores;
            this.Home = home;
            this.Draw = draw;
            this.Away = away;
        }

        /// <summary>
        /// Gets or Sets True
        /// </summary>
        [DataMember(Name = "true", EmitDefaultValue = false)]
        public decimal True { get; set; }

        /// <summary>
        /// Gets or Sets False
        /// </summary>
        [DataMember(Name = "false", EmitDefaultValue = false)]
        public decimal False { get; set; }

        /// <summary>
        /// Gets or Sets Scores
        /// </summary>
        [DataMember(Name = "scores", EmitDefaultValue = false)]
        public SportPredictionsAllResponseDataInnerPredictionsScores Scores { get; set; }

        /// <summary>
        /// Gets or Sets Home
        /// </summary>
        [DataMember(Name = "home", EmitDefaultValue = false)]
        public decimal Home { get; set; }

        /// <summary>
        /// Gets or Sets Draw
        /// </summary>
        [DataMember(Name = "draw", EmitDefaultValue = false)]
        public decimal Draw { get; set; }

        /// <summary>
        /// Gets or Sets Away
        /// </summary>
        [DataMember(Name = "away", EmitDefaultValue = false)]
        public decimal Away { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SportPredictionsAllResponseDataInnerPredictions {\n");
            sb.Append("  True: ").Append(True).Append("\n");
            sb.Append("  False: ").Append(False).Append("\n");
            sb.Append("  Scores: ").Append(Scores).Append("\n");
            sb.Append("  Home: ").Append(Home).Append("\n");
            sb.Append("  Draw: ").Append(Draw).Append("\n");
            sb.Append("  Away: ").Append(Away).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SportPredictionsAllResponseDataInnerPredictions);
        }

        /// <summary>
        /// Returns true if SportPredictionsAllResponseDataInnerPredictions instances are equal
        /// </summary>
        /// <param name="input">Instance of SportPredictionsAllResponseDataInnerPredictions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SportPredictionsAllResponseDataInnerPredictions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.True == input.True ||
                    this.True.Equals(input.True)
                ) && 
                (
                    this.False == input.False ||
                    this.False.Equals(input.False)
                ) && 
                (
                    this.Scores == input.Scores ||
                    (this.Scores != null &&
                    this.Scores.Equals(input.Scores))
                ) && 
                (
                    this.Home == input.Home ||
                    this.Home.Equals(input.Home)
                ) && 
                (
                    this.Draw == input.Draw ||
                    this.Draw.Equals(input.Draw)
                ) && 
                (
                    this.Away == input.Away ||
                    this.Away.Equals(input.Away)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.True.GetHashCode();
                hashCode = (hashCode * 59) + this.False.GetHashCode();
                if (this.Scores != null)
                {
                    hashCode = (hashCode * 59) + this.Scores.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Home.GetHashCode();
                hashCode = (hashCode * 59) + this.Draw.GetHashCode();
                hashCode = (hashCode * 59) + this.Away.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
