/*
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sportmonks.Net.Client.OpenAPIDateConverter;

namespace Sportmonks.Net.Model
{
    /// <summary>
    /// OddsMarketsAllResponseDataInner
    /// </summary>
    [DataContract(Name = "OddsMarketsAllResponse_data_inner")]
    public partial class OddsMarketsAllResponseDataInner : IEquatable<OddsMarketsAllResponseDataInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OddsMarketsAllResponseDataInner" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="legacyId">legacyId.</param>
        /// <param name="name">name.</param>
        /// <param name="developerName">developerName.</param>
        /// <param name="hasWinningCalculations">hasWinningCalculations.</param>
        public OddsMarketsAllResponseDataInner(decimal id = default(decimal), OddsMarketsAllResponseDataInnerLegacyId legacyId = default(OddsMarketsAllResponseDataInnerLegacyId), string name = default(string), string developerName = default(string), bool hasWinningCalculations = default(bool))
        {
            this.Id = id;
            this.LegacyId = legacyId;
            this.Name = name;
            this.DeveloperName = developerName;
            this.HasWinningCalculations = hasWinningCalculations;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public decimal Id { get; set; }

        /// <summary>
        /// Gets or Sets LegacyId
        /// </summary>
        [DataMember(Name = "legacy_id", EmitDefaultValue = false)]
        public OddsMarketsAllResponseDataInnerLegacyId LegacyId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DeveloperName
        /// </summary>
        [DataMember(Name = "developer_name", EmitDefaultValue = false)]
        public string DeveloperName { get; set; }

        /// <summary>
        /// Gets or Sets HasWinningCalculations
        /// </summary>
        [DataMember(Name = "has_winning_calculations", EmitDefaultValue = true)]
        public bool HasWinningCalculations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OddsMarketsAllResponseDataInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LegacyId: ").Append(LegacyId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DeveloperName: ").Append(DeveloperName).Append("\n");
            sb.Append("  HasWinningCalculations: ").Append(HasWinningCalculations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OddsMarketsAllResponseDataInner);
        }

        /// <summary>
        /// Returns true if OddsMarketsAllResponseDataInner instances are equal
        /// </summary>
        /// <param name="input">Instance of OddsMarketsAllResponseDataInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OddsMarketsAllResponseDataInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.LegacyId == input.LegacyId ||
                    (this.LegacyId != null &&
                    this.LegacyId.Equals(input.LegacyId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DeveloperName == input.DeveloperName ||
                    (this.DeveloperName != null &&
                    this.DeveloperName.Equals(input.DeveloperName))
                ) && 
                (
                    this.HasWinningCalculations == input.HasWinningCalculations ||
                    this.HasWinningCalculations.Equals(input.HasWinningCalculations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.LegacyId != null)
                {
                    hashCode = (hashCode * 59) + this.LegacyId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.DeveloperName != null)
                {
                    hashCode = (hashCode * 59) + this.DeveloperName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasWinningCalculations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
