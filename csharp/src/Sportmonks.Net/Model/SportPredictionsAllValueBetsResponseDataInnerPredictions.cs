/*
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sportmonks.Net.Client.OpenAPIDateConverter;

namespace Sportmonks.Net.Model
{
    /// <summary>
    /// SportPredictionsAllValueBetsResponseDataInnerPredictions
    /// </summary>
    [DataContract(Name = "SportPredictionsAllValueBetsResponse_data_inner_predictions")]
    public partial class SportPredictionsAllValueBetsResponseDataInnerPredictions : IEquatable<SportPredictionsAllValueBetsResponseDataInnerPredictions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SportPredictionsAllValueBetsResponseDataInnerPredictions" /> class.
        /// </summary>
        /// <param name="bet">bet.</param>
        /// <param name="fairOdd">fairOdd.</param>
        /// <param name="odd">odd.</param>
        /// <param name="stake">stake.</param>
        /// <param name="isValue">isValue.</param>
        public SportPredictionsAllValueBetsResponseDataInnerPredictions(string bet = default(string), decimal fairOdd = default(decimal), decimal odd = default(decimal), decimal stake = default(decimal), bool isValue = default(bool))
        {
            this.Bet = bet;
            this.FairOdd = fairOdd;
            this.Odd = odd;
            this.Stake = stake;
            this.IsValue = isValue;
        }

        /// <summary>
        /// Gets or Sets Bet
        /// </summary>
        [DataMember(Name = "bet", EmitDefaultValue = false)]
        public string Bet { get; set; }

        /// <summary>
        /// Gets or Sets FairOdd
        /// </summary>
        [DataMember(Name = "fair_odd", EmitDefaultValue = false)]
        public decimal FairOdd { get; set; }

        /// <summary>
        /// Gets or Sets Odd
        /// </summary>
        [DataMember(Name = "odd", EmitDefaultValue = false)]
        public decimal Odd { get; set; }

        /// <summary>
        /// Gets or Sets Stake
        /// </summary>
        [DataMember(Name = "stake", EmitDefaultValue = false)]
        public decimal Stake { get; set; }

        /// <summary>
        /// Gets or Sets IsValue
        /// </summary>
        [DataMember(Name = "is_value", EmitDefaultValue = true)]
        public bool IsValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SportPredictionsAllValueBetsResponseDataInnerPredictions {\n");
            sb.Append("  Bet: ").Append(Bet).Append("\n");
            sb.Append("  FairOdd: ").Append(FairOdd).Append("\n");
            sb.Append("  Odd: ").Append(Odd).Append("\n");
            sb.Append("  Stake: ").Append(Stake).Append("\n");
            sb.Append("  IsValue: ").Append(IsValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SportPredictionsAllValueBetsResponseDataInnerPredictions);
        }

        /// <summary>
        /// Returns true if SportPredictionsAllValueBetsResponseDataInnerPredictions instances are equal
        /// </summary>
        /// <param name="input">Instance of SportPredictionsAllValueBetsResponseDataInnerPredictions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SportPredictionsAllValueBetsResponseDataInnerPredictions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Bet == input.Bet ||
                    (this.Bet != null &&
                    this.Bet.Equals(input.Bet))
                ) && 
                (
                    this.FairOdd == input.FairOdd ||
                    this.FairOdd.Equals(input.FairOdd)
                ) && 
                (
                    this.Odd == input.Odd ||
                    this.Odd.Equals(input.Odd)
                ) && 
                (
                    this.Stake == input.Stake ||
                    this.Stake.Equals(input.Stake)
                ) && 
                (
                    this.IsValue == input.IsValue ||
                    this.IsValue.Equals(input.IsValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bet != null)
                {
                    hashCode = (hashCode * 59) + this.Bet.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FairOdd.GetHashCode();
                hashCode = (hashCode * 59) + this.Odd.GetHashCode();
                hashCode = (hashCode * 59) + this.Stake.GetHashCode();
                hashCode = (hashCode * 59) + this.IsValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
