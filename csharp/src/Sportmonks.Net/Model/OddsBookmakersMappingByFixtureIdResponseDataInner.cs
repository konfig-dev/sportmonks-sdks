/*
 * SportMonks
 *
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sportmonks.Net.Client.OpenAPIDateConverter;

namespace Sportmonks.Net.Model
{
    /// <summary>
    /// OddsBookmakersMappingByFixtureIdResponseDataInner
    /// </summary>
    [DataContract(Name = "OddsBookmakersMappingByFixtureIdResponse_data_inner")]
    public partial class OddsBookmakersMappingByFixtureIdResponseDataInner : IEquatable<OddsBookmakersMappingByFixtureIdResponseDataInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OddsBookmakersMappingByFixtureIdResponseDataInner" /> class.
        /// </summary>
        /// <param name="fixtureId">fixtureId.</param>
        /// <param name="bookmakerId">bookmakerId.</param>
        /// <param name="bookmakerName">bookmakerName.</param>
        /// <param name="bookmakerEventId">bookmakerEventId.</param>
        /// <param name="bookmakerEventUrl">bookmakerEventUrl.</param>
        public OddsBookmakersMappingByFixtureIdResponseDataInner(decimal fixtureId = default(decimal), decimal bookmakerId = default(decimal), string bookmakerName = default(string), string bookmakerEventId = default(string), string bookmakerEventUrl = default(string))
        {
            this.FixtureId = fixtureId;
            this.BookmakerId = bookmakerId;
            this.BookmakerName = bookmakerName;
            this.BookmakerEventId = bookmakerEventId;
            this.BookmakerEventUrl = bookmakerEventUrl;
        }

        /// <summary>
        /// Gets or Sets FixtureId
        /// </summary>
        [DataMember(Name = "fixture_id", EmitDefaultValue = false)]
        public decimal FixtureId { get; set; }

        /// <summary>
        /// Gets or Sets BookmakerId
        /// </summary>
        [DataMember(Name = "bookmaker_id", EmitDefaultValue = false)]
        public decimal BookmakerId { get; set; }

        /// <summary>
        /// Gets or Sets BookmakerName
        /// </summary>
        [DataMember(Name = "bookmaker_name", EmitDefaultValue = false)]
        public string BookmakerName { get; set; }

        /// <summary>
        /// Gets or Sets BookmakerEventId
        /// </summary>
        [DataMember(Name = "bookmaker_event_id", EmitDefaultValue = false)]
        public string BookmakerEventId { get; set; }

        /// <summary>
        /// Gets or Sets BookmakerEventUrl
        /// </summary>
        [DataMember(Name = "bookmaker_event_url", EmitDefaultValue = true)]
        public string BookmakerEventUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OddsBookmakersMappingByFixtureIdResponseDataInner {\n");
            sb.Append("  FixtureId: ").Append(FixtureId).Append("\n");
            sb.Append("  BookmakerId: ").Append(BookmakerId).Append("\n");
            sb.Append("  BookmakerName: ").Append(BookmakerName).Append("\n");
            sb.Append("  BookmakerEventId: ").Append(BookmakerEventId).Append("\n");
            sb.Append("  BookmakerEventUrl: ").Append(BookmakerEventUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OddsBookmakersMappingByFixtureIdResponseDataInner);
        }

        /// <summary>
        /// Returns true if OddsBookmakersMappingByFixtureIdResponseDataInner instances are equal
        /// </summary>
        /// <param name="input">Instance of OddsBookmakersMappingByFixtureIdResponseDataInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OddsBookmakersMappingByFixtureIdResponseDataInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FixtureId == input.FixtureId ||
                    this.FixtureId.Equals(input.FixtureId)
                ) && 
                (
                    this.BookmakerId == input.BookmakerId ||
                    this.BookmakerId.Equals(input.BookmakerId)
                ) && 
                (
                    this.BookmakerName == input.BookmakerName ||
                    (this.BookmakerName != null &&
                    this.BookmakerName.Equals(input.BookmakerName))
                ) && 
                (
                    this.BookmakerEventId == input.BookmakerEventId ||
                    (this.BookmakerEventId != null &&
                    this.BookmakerEventId.Equals(input.BookmakerEventId))
                ) && 
                (
                    this.BookmakerEventUrl == input.BookmakerEventUrl ||
                    (this.BookmakerEventUrl != null &&
                    this.BookmakerEventUrl.Equals(input.BookmakerEventUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FixtureId.GetHashCode();
                hashCode = (hashCode * 59) + this.BookmakerId.GetHashCode();
                if (this.BookmakerName != null)
                {
                    hashCode = (hashCode * 59) + this.BookmakerName.GetHashCode();
                }
                if (this.BookmakerEventId != null)
                {
                    hashCode = (hashCode * 59) + this.BookmakerEventId.GetHashCode();
                }
                if (this.BookmakerEventUrl != null)
                {
                    hashCode = (hashCode * 59) + this.BookmakerEventUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
