/* tslint:disable */
/* eslint-disable */
/**
 * SportMonks
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SportCoachByIdResponse } from '../models';
// @ts-ignore
import { SportCoachesAllResponse } from '../models';
// @ts-ignore
import { SportCoachesByCountryIdResponse } from '../models';
// @ts-ignore
import { SportCoachesLatestResponse } from '../models';
// @ts-ignore
import { SportCoachesSearchResponse } from '../models';
// @ts-ignore
import { SportCommentariesAllResponse } from '../models';
// @ts-ignore
import { SportCommentariesByFixtureIdResponse } from '../models';
// @ts-ignore
import { SportFixtureByDateRangeForTeamResponse } from '../models';
// @ts-ignore
import { SportFixtureByIdResponse } from '../models';
// @ts-ignore
import { SportFixturesAllResponse } from '../models';
// @ts-ignore
import { SportFixturesByDateRangeResponse } from '../models';
// @ts-ignore
import { SportFixturesByDateResponse } from '../models';
// @ts-ignore
import { SportFixturesByIdsResponse } from '../models';
// @ts-ignore
import { SportFixturesHeadToHeadResponse } from '../models';
// @ts-ignore
import { SportFixturesSearchResponse } from '../models';
// @ts-ignore
import { SportLeagueByIdResponse } from '../models';
// @ts-ignore
import { SportLeaguesAllResponse } from '../models';
// @ts-ignore
import { SportLeaguesByCountryIdResponse } from '../models';
// @ts-ignore
import { SportLeaguesByDateResponse } from '../models';
// @ts-ignore
import { SportLeaguesLiveResponse } from '../models';
// @ts-ignore
import { SportLeaguesSearchResponse } from '../models';
// @ts-ignore
import { SportLivescoresAllInPlayResponse } from '../models';
// @ts-ignore
import { SportLivescoresAllResponse } from '../models';
// @ts-ignore
import { SportLivescoresLatestResponse } from '../models';
// @ts-ignore
import { SportNewsAllPreMatchResponse } from '../models';
// @ts-ignore
import { SportNewsPreMatchBySeasonIdResponse } from '../models';
// @ts-ignore
import { SportNewsUpcomingPreMatchResponse } from '../models';
// @ts-ignore
import { SportOddsAllInPlayResponse } from '../models';
// @ts-ignore
import { SportOddsAllPreMatchResponse } from '../models';
// @ts-ignore
import { SportOddsInPlayByFixtureIdResponse } from '../models';
// @ts-ignore
import { SportOddsPreMatchByFixtureAndBookmakerIdResponse } from '../models';
// @ts-ignore
import { SportOddsPreMatchByFixtureAndMarketIdResponse } from '../models';
// @ts-ignore
import { SportOddsPreMatchByFixtureIdResponse } from '../models';
// @ts-ignore
import { SportPlayerByIdResponse } from '../models';
// @ts-ignore
import { SportPlayersAllResponse } from '../models';
// @ts-ignore
import { SportPlayersByCountryIdResponse } from '../models';
// @ts-ignore
import { SportPlayersLatestResponse } from '../models';
// @ts-ignore
import { SportPlayersSearchResponse } from '../models';
// @ts-ignore
import { SportPredictionsAllResponse } from '../models';
// @ts-ignore
import { SportPredictionsAllValueBetsResponse } from '../models';
// @ts-ignore
import { SportPredictionsByFixtureIdResponse } from '../models';
// @ts-ignore
import { SportRefereeByIdResponse } from '../models';
// @ts-ignore
import { SportRefereesAllResponse } from '../models';
// @ts-ignore
import { SportRefereesByCountryIdResponse } from '../models';
// @ts-ignore
import { SportRefereesBySeasonIdResponse } from '../models';
// @ts-ignore
import { SportRefereesSearchResponse } from '../models';
// @ts-ignore
import { SportRivalsAllResponse } from '../models';
// @ts-ignore
import { SportRivalsByTeamIdResponse } from '../models';
// @ts-ignore
import { SportRoundByIdResponse } from '../models';
// @ts-ignore
import { SportRoundsAllResponse } from '../models';
// @ts-ignore
import { SportRoundsBySeasonIdResponse } from '../models';
// @ts-ignore
import { SportRoundsSearchResponse } from '../models';
// @ts-ignore
import { SportSchedulesBySeasonIdResponse } from '../models';
// @ts-ignore
import { SportSchedulesByTeamAndSeasonIdResponse } from '../models';
// @ts-ignore
import { SportSchedulesByTeamIdResponse } from '../models';
// @ts-ignore
import { SportSeasonByIdResponse } from '../models';
// @ts-ignore
import { SportSeasonsAllResponse } from '../models';
// @ts-ignore
import { SportSeasonsSearchResponse } from '../models';
// @ts-ignore
import { SportSquadsBySeasonAndTeamIdResponse } from '../models';
// @ts-ignore
import { SportSquadsByTeamIdResponse } from '../models';
// @ts-ignore
import { SportStageByIdResponse } from '../models';
// @ts-ignore
import { SportStagesAllResponse } from '../models';
// @ts-ignore
import { SportStagesBySeasonIdResponse } from '../models';
// @ts-ignore
import { SportStagesSearchResponse } from '../models';
// @ts-ignore
import { SportStandingCorrectionsBySeasonIdResponse } from '../models';
// @ts-ignore
import { SportStandingsAllResponse } from '../models';
// @ts-ignore
import { SportStandingsByRoundIdResponse } from '../models';
// @ts-ignore
import { SportStandingsBySeasonIdResponse } from '../models';
// @ts-ignore
import { SportStandingsLiveByLeagueIdResponse } from '../models';
// @ts-ignore
import { SportStateByIdResponse } from '../models';
// @ts-ignore
import { SportStatesBySportResponse } from '../models';
// @ts-ignore
import { SportTeamsAllResponse } from '../models';
// @ts-ignore
import { SportTeamsByCountryIdResponse } from '../models';
// @ts-ignore
import { SportTeamsByIdResponse } from '../models';
// @ts-ignore
import { SportTeamsBySeasonIdResponse } from '../models';
// @ts-ignore
import { SportTeamsSearchResponse } from '../models';
// @ts-ignore
import { SportTopScorersBySeasonIdResponse } from '../models';
// @ts-ignore
import { SportTopScorersByStageIdResponse } from '../models';
// @ts-ignore
import { SportTranfersByDateRangeResponse } from '../models';
// @ts-ignore
import { SportTransferByIdResponse } from '../models';
// @ts-ignore
import { SportTransfersAllResponse } from '../models';
// @ts-ignore
import { SportTransfersByPlayerIdResponse } from '../models';
// @ts-ignore
import { SportTransfersByTeamIdResponse } from '../models';
// @ts-ignore
import { SportTransfersLatestResponse } from '../models';
// @ts-ignore
import { SportTvStationByIdResponse } from '../models';
// @ts-ignore
import { SportTvStationsAllResponse } from '../models';
// @ts-ignore
import { SportTvStationsByFixtureIdResponse } from '../models';
// @ts-ignore
import { SportVenueByIdResponse } from '../models';
// @ts-ignore
import { SportVenuesAllResponse } from '../models';
// @ts-ignore
import { SportVenuesBySeasonIdResponse } from '../models';
// @ts-ignore
import { SportVenuesSearchResponse } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { SportApiCustom } from "./sport-api-custom";
/**
 * SportApi - axios parameter creator
 * @export
 */
export const SportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary By ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} coachId The ID of the coach you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coachById: async (version: string, sport: string, coachId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('coachById', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('coachById', 'sport', sport)
            // verify required parameter 'coachId' is not null or undefined
            assertParamExists('coachById', 'coachId', coachId)
            const localVarPath = `/{version}/{sport}/coaches/{coachId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"coachId"}}`, encodeURIComponent(String(coachId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coachesAll: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('coachesAll', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('coachesAll', 'sport', sport)
            const localVarPath = `/{version}/{sport}/coaches`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Country ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} countryId The ID of the country you want to retrieve coaches from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coachesByCountryId: async (version: string, sport: string, countryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('coachesByCountryId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('coachesByCountryId', 'sport', sport)
            // verify required parameter 'countryId' is not null or undefined
            assertParamExists('coachesByCountryId', 'countryId', countryId)
            const localVarPath = `/{version}/{sport}/coaches/countries/{countryId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"countryId"}}`, encodeURIComponent(String(countryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Last updated
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coachesLatest: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('coachesLatest', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('coachesLatest', 'sport', sport)
            const localVarPath = `/{version}/{sport}/coaches/latest`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {string} name The name you want to search on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coachesSearch: async (version: string, sport: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('coachesSearch', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('coachesSearch', 'sport', sport)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('coachesSearch', 'name', name)
            const localVarPath = `/{version}/{sport}/coaches/search/{name}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentariesAll: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('commentariesAll', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('commentariesAll', 'sport', sport)
            const localVarPath = `/{version}/{sport}/commentaries`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Fixture ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} fixtureId The ID of the fixture you want to retrieve commentaries from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentariesByFixtureId: async (version: string, sport: string, fixtureId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('commentariesByFixtureId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('commentariesByFixtureId', 'sport', sport)
            // verify required parameter 'fixtureId' is not null or undefined
            assertParamExists('commentariesByFixtureId', 'fixtureId', fixtureId)
            const localVarPath = `/{version}/{sport}/commentaries/fixtures/{fixtureId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"fixtureId"}}`, encodeURIComponent(String(fixtureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Date Range for Team
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixtureByDateRangeForTeam: async (version: string, sport: string, startDate: string, endDate: string, teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('fixtureByDateRangeForTeam', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('fixtureByDateRangeForTeam', 'sport', sport)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('fixtureByDateRangeForTeam', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('fixtureByDateRangeForTeam', 'endDate', endDate)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('fixtureByDateRangeForTeam', 'teamId', teamId)
            const localVarPath = `/{version}/{sport}/fixtures/between/{startDate}/{endDate}/{teamId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"startDate"}}`, encodeURIComponent(String(startDate)))
                .replace(`{${"endDate"}}`, encodeURIComponent(String(endDate)))
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fixture ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} fixtureId The ID of the fixture you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixtureById: async (version: string, sport: string, fixtureId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('fixtureById', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('fixtureById', 'sport', sport)
            // verify required parameter 'fixtureId' is not null or undefined
            assertParamExists('fixtureById', 'fixtureId', fixtureId)
            const localVarPath = `/{version}/{sport}/fixtures/{fixtureId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"fixtureId"}}`, encodeURIComponent(String(fixtureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixturesAll: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('fixturesAll', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('fixturesAll', 'sport', sport)
            const localVarPath = `/{version}/{sport}/fixtures`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Date
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {string} date The date you want to retrieve fixtures from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixturesByDate: async (version: string, sport: string, date: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('fixturesByDate', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('fixturesByDate', 'sport', sport)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('fixturesByDate', 'date', date)
            const localVarPath = `/{version}/{sport}/fixtures/date/{date}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Date Range
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {string} startDate The start date you want to retrieve fixtures from.
         * @param {string} endDate The end date you want to retrieve fixtures from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixturesByDateRange: async (version: string, sport: string, startDate: string, endDate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('fixturesByDateRange', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('fixturesByDateRange', 'sport', sport)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('fixturesByDateRange', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('fixturesByDateRange', 'endDate', endDate)
            const localVarPath = `/{version}/{sport}/fixtures/between/{startDate}/{endDate}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"startDate"}}`, encodeURIComponent(String(startDate)))
                .replace(`{${"endDate"}}`, encodeURIComponent(String(endDate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By IDs
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {string} fixtureIds The IDs you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixturesByIds: async (version: string, sport: string, fixtureIds: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('fixturesByIds', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('fixturesByIds', 'sport', sport)
            // verify required parameter 'fixtureIds' is not null or undefined
            assertParamExists('fixturesByIds', 'fixtureIds', fixtureIds)
            const localVarPath = `/{version}/{sport}/fixtures/multi/{fixtureIds}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"fixtureIds"}}`, encodeURIComponent(String(fixtureIds)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Head to Head
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} firstTeam The ID of the first team retrieve fixtures from.
         * @param {number} secondTeam The ID of the second team retrieve fixtures from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixturesHeadToHead: async (version: string, sport: string, firstTeam: number, secondTeam: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('fixturesHeadToHead', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('fixturesHeadToHead', 'sport', sport)
            // verify required parameter 'firstTeam' is not null or undefined
            assertParamExists('fixturesHeadToHead', 'firstTeam', firstTeam)
            // verify required parameter 'secondTeam' is not null or undefined
            assertParamExists('fixturesHeadToHead', 'secondTeam', secondTeam)
            const localVarPath = `/{version}/{sport}/fixtures/head-to-head/{firstTeam}/{secondTeam}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"firstTeam"}}`, encodeURIComponent(String(firstTeam)))
                .replace(`{${"secondTeam"}}`, encodeURIComponent(String(secondTeam)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Last Updated
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixturesLatest: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('fixturesLatest', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('fixturesLatest', 'sport', sport)
            const localVarPath = `/{version}/{sport}/fixtures/latest`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {string} name The name you want search on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixturesSearch: async (version: string, sport: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('fixturesSearch', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('fixturesSearch', 'sport', sport)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('fixturesSearch', 'name', name)
            const localVarPath = `/{version}/{sport}/fixtures/search/{name}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} leagueId The ID of the league you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueById: async (version: string, sport: string, leagueId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('leagueById', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('leagueById', 'sport', sport)
            // verify required parameter 'leagueId' is not null or undefined
            assertParamExists('leagueById', 'leagueId', leagueId)
            const localVarPath = `/{version}/{sport}/leagues/{leagueId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"leagueId"}}`, encodeURIComponent(String(leagueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enrichments
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} leagueId The ID of the league you want to retrieve enrichments from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueEnrichments: async (version: string, sport: string, leagueId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('leagueEnrichments', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('leagueEnrichments', 'sport', sport)
            // verify required parameter 'leagueId' is not null or undefined
            assertParamExists('leagueEnrichments', 'leagueId', leagueId)
            const localVarPath = `/{version}/{sport}/leagues/{leagueId}/includes`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"leagueId"}}`, encodeURIComponent(String(leagueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Shirts By League ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} leagueId The ID of the league you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueShirts: async (version: string, sport: string, leagueId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('leagueShirts', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('leagueShirts', 'sport', sport)
            // verify required parameter 'leagueId' is not null or undefined
            assertParamExists('leagueShirts', 'leagueId', leagueId)
            const localVarPath = `/{version}/{sport}/leagues/{leagueId}/jerseys`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"leagueId"}}`, encodeURIComponent(String(leagueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaguesAll: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('leaguesAll', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('leaguesAll', 'sport', sport)
            const localVarPath = `/{version}/{sport}/leagues`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Country ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} countryId The ID of the country you want to retrieve leagues from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaguesByCountryId: async (version: string, sport: string, countryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('leaguesByCountryId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('leaguesByCountryId', 'sport', sport)
            // verify required parameter 'countryId' is not null or undefined
            assertParamExists('leaguesByCountryId', 'countryId', countryId)
            const localVarPath = `/{version}/{sport}/leagues/countries/{countryId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"countryId"}}`, encodeURIComponent(String(countryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Date
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {string} date The date of fixtures you want to retrieve leagues from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaguesByDate: async (version: string, sport: string, date: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('leaguesByDate', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('leaguesByDate', 'sport', sport)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('leaguesByDate', 'date', date)
            const localVarPath = `/{version}/{sport}/leagues/date/{date}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Leagues By Team ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} teamId The ID of the team you want to retrieve leagues from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaguesByTeamId: async (version: string, sport: string, teamId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('leaguesByTeamId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('leaguesByTeamId', 'sport', sport)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('leaguesByTeamId', 'teamId', teamId)
            const localVarPath = `/{version}/{sport}/teams/{teamId}/leagues`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Current Leagues By Team ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} teamId The ID of the team you want to retrieve current leagues from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaguesCurrentByTeamId: async (version: string, sport: string, teamId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('leaguesCurrentByTeamId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('leaguesCurrentByTeamId', 'sport', sport)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('leaguesCurrentByTeamId', 'teamId', teamId)
            const localVarPath = `/{version}/{sport}/teams/{teamId}/leagues/current`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Live
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaguesLive: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('leaguesLive', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('leaguesLive', 'sport', sport)
            const localVarPath = `/{version}/{sport}/leagues/live`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {string} name The name you want to search on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaguesSearch: async (version: string, sport: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('leaguesSearch', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('leaguesSearch', 'sport', sport)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('leaguesSearch', 'name', name)
            const localVarPath = `/{version}/{sport}/leagues/search/{name}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        livescoresAll: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('livescoresAll', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('livescoresAll', 'sport', sport)
            const localVarPath = `/{version}/{sport}/livescores`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All In-play
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        livescoresAllInPlay: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('livescoresAllInPlay', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('livescoresAllInPlay', 'sport', sport)
            const localVarPath = `/{version}/{sport}/livescores/inplay`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Last Updated In-play
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        livescoresLatest: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('livescoresLatest', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('livescoresLatest', 'sport', sport)
            const localVarPath = `/{version}/{sport}/livescores/latest`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All Post Match
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsAllPostMatch: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('newsAllPostMatch', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('newsAllPostMatch', 'sport', sport)
            const localVarPath = `/{version}/{sport}/news/post-match`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All Pre-match
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsAllPreMatch: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('newsAllPreMatch', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('newsAllPreMatch', 'sport', sport)
            const localVarPath = `/{version}/{sport}/news/pre-match`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post Match by Season ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} seasonId The ID of the season you want to retrieve post-match news from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsPostMatchBySeasonId: async (version: string, sport: string, seasonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('newsPostMatchBySeasonId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('newsPostMatchBySeasonId', 'sport', sport)
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('newsPostMatchBySeasonId', 'seasonId', seasonId)
            const localVarPath = `/{version}/{sport}/news/post-match/seasons/{seasonId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pre-match By Season ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} seasonId The ID of the season you want to retrieve post-match news from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsPreMatchBySeasonId: async (version: string, sport: string, seasonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('newsPreMatchBySeasonId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('newsPreMatchBySeasonId', 'sport', sport)
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('newsPreMatchBySeasonId', 'seasonId', seasonId)
            const localVarPath = `/{version}/{sport}/news/pre-match/seasons/{seasonId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upcoming Post Match
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsUpcomingPostMatch: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('newsUpcomingPostMatch', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('newsUpcomingPostMatch', 'sport', sport)
            const localVarPath = `/{version}/{sport}/news/post-match/upcoming`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upcoming Pre-match
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsUpcomingPreMatch: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('newsUpcomingPreMatch', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('newsUpcomingPreMatch', 'sport', sport)
            const localVarPath = `/{version}/{sport}/news/pre-match/upcoming`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All In-play
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsAllInPlay: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('oddsAllInPlay', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('oddsAllInPlay', 'sport', sport)
            const localVarPath = `/{version}/{sport}/odds/inplay`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All Pre-match
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsAllPreMatch: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('oddsAllPreMatch', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('oddsAllPreMatch', 'sport', sport)
            const localVarPath = `/{version}/{sport}/odds/pre-match`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary In-play by Fixture and Bookmaker ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} fixtureId The ID of the fixture you want to retrieve in-play odds from.
         * @param {number} bookmakerId The ID of the bookmaker you want to retrieve in-play odds from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsInPlayByFixtureAndBookmakerId: async (version: string, sport: string, fixtureId: number, bookmakerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('oddsInPlayByFixtureAndBookmakerId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('oddsInPlayByFixtureAndBookmakerId', 'sport', sport)
            // verify required parameter 'fixtureId' is not null or undefined
            assertParamExists('oddsInPlayByFixtureAndBookmakerId', 'fixtureId', fixtureId)
            // verify required parameter 'bookmakerId' is not null or undefined
            assertParamExists('oddsInPlayByFixtureAndBookmakerId', 'bookmakerId', bookmakerId)
            const localVarPath = `/{version}/{sport}/odds/inplay/fixtures/{fixtureId}/bookmakers/{bookmakerId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"fixtureId"}}`, encodeURIComponent(String(fixtureId)))
                .replace(`{${"bookmakerId"}}`, encodeURIComponent(String(bookmakerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary In-play by Fixture and Market ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} fixtureId The ID of the fixture you want to retrieve in-play odds from.
         * @param {number} marketId The ID of the market you want to retrieve in-play odds from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsInPlayByFixtureAndMarketId: async (version: string, sport: string, fixtureId: number, marketId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('oddsInPlayByFixtureAndMarketId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('oddsInPlayByFixtureAndMarketId', 'sport', sport)
            // verify required parameter 'fixtureId' is not null or undefined
            assertParamExists('oddsInPlayByFixtureAndMarketId', 'fixtureId', fixtureId)
            // verify required parameter 'marketId' is not null or undefined
            assertParamExists('oddsInPlayByFixtureAndMarketId', 'marketId', marketId)
            const localVarPath = `/{version}/{sport}/odds/inplay/fixtures/{fixtureId}/markets/{marketId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"fixtureId"}}`, encodeURIComponent(String(fixtureId)))
                .replace(`{${"marketId"}}`, encodeURIComponent(String(marketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary In-play by Fixture ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} fixtureId The ID of the fixture you want to retrieve in-play odds from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsInPlayByFixtureId: async (version: string, sport: string, fixtureId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('oddsInPlayByFixtureId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('oddsInPlayByFixtureId', 'sport', sport)
            // verify required parameter 'fixtureId' is not null or undefined
            assertParamExists('oddsInPlayByFixtureId', 'fixtureId', fixtureId)
            const localVarPath = `/{version}/{sport}/odds/inplay/fixtures/{fixtureId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"fixtureId"}}`, encodeURIComponent(String(fixtureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Latest In-play
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsLatestInPlay: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('oddsLatestInPlay', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('oddsLatestInPlay', 'sport', sport)
            const localVarPath = `/{version}/{sport}/odds/inplay/latest`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Last Updated Pre-match
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsLatestPreMatch: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('oddsLatestPreMatch', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('oddsLatestPreMatch', 'sport', sport)
            const localVarPath = `/{version}/{sport}/odds/pre-match/latest`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pre-match by Fixture and Bookmaker ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} fixtureId The ID of the fixture you want to retrieve pre-match odds from.
         * @param {number} bookmakerId The ID of the bookmaker you want to retrieve pre-match odds from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsPreMatchByFixtureAndBookmakerId: async (version: string, sport: string, fixtureId: number, bookmakerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('oddsPreMatchByFixtureAndBookmakerId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('oddsPreMatchByFixtureAndBookmakerId', 'sport', sport)
            // verify required parameter 'fixtureId' is not null or undefined
            assertParamExists('oddsPreMatchByFixtureAndBookmakerId', 'fixtureId', fixtureId)
            // verify required parameter 'bookmakerId' is not null or undefined
            assertParamExists('oddsPreMatchByFixtureAndBookmakerId', 'bookmakerId', bookmakerId)
            const localVarPath = `/{version}/{sport}/odds/pre-match/fixtures/{fixtureId}/bookmakers/{bookmakerId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"fixtureId"}}`, encodeURIComponent(String(fixtureId)))
                .replace(`{${"bookmakerId"}}`, encodeURIComponent(String(bookmakerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pre-match by Fixture and Market ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} fixtureId The ID of the fixture you want to retrieve pre-match odds from.
         * @param {number} marketId The ID of the market you want to retrieve pre-match odds from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsPreMatchByFixtureAndMarketId: async (version: string, sport: string, fixtureId: number, marketId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('oddsPreMatchByFixtureAndMarketId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('oddsPreMatchByFixtureAndMarketId', 'sport', sport)
            // verify required parameter 'fixtureId' is not null or undefined
            assertParamExists('oddsPreMatchByFixtureAndMarketId', 'fixtureId', fixtureId)
            // verify required parameter 'marketId' is not null or undefined
            assertParamExists('oddsPreMatchByFixtureAndMarketId', 'marketId', marketId)
            const localVarPath = `/{version}/{sport}/odds/pre-match/fixtures/{fixtureId}/markets/{marketId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"fixtureId"}}`, encodeURIComponent(String(fixtureId)))
                .replace(`{${"marketId"}}`, encodeURIComponent(String(marketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pre-match by Fixture ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} fixtureId The ID of the fixture you want to retrieve pre-match odds from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsPreMatchByFixtureId: async (version: string, sport: string, fixtureId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('oddsPreMatchByFixtureId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('oddsPreMatchByFixtureId', 'sport', sport)
            // verify required parameter 'fixtureId' is not null or undefined
            assertParamExists('oddsPreMatchByFixtureId', 'fixtureId', fixtureId)
            const localVarPath = `/{version}/{sport}/odds/pre-match/fixtures/{fixtureId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"fixtureId"}}`, encodeURIComponent(String(fixtureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} playerId The ID of the player you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playerById: async (version: string, sport: string, playerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('playerById', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('playerById', 'sport', sport)
            // verify required parameter 'playerId' is not null or undefined
            assertParamExists('playerById', 'playerId', playerId)
            const localVarPath = `/{version}/{sport}/players/{playerId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersAll: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('playersAll', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('playersAll', 'sport', sport)
            const localVarPath = `/{version}/{sport}/players`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Country ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} countryId The ID of the country you want to retrieve players from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersByCountryId: async (version: string, sport: string, countryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('playersByCountryId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('playersByCountryId', 'sport', sport)
            // verify required parameter 'countryId' is not null or undefined
            assertParamExists('playersByCountryId', 'countryId', countryId)
            const localVarPath = `/{version}/{sport}/players/countries/{countryId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"countryId"}}`, encodeURIComponent(String(countryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Latest Updated
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersLatest: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('playersLatest', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('playersLatest', 'sport', sport)
            const localVarPath = `/{version}/{sport}/players/latest`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {string} name The name you want to search on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersSearch: async (version: string, sport: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('playersSearch', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('playersSearch', 'sport', sport)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('playersSearch', 'name', name)
            const localVarPath = `/{version}/{sport}/players/search/{name}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsAll: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('predictionsAll', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('predictionsAll', 'sport', sport)
            const localVarPath = `/{version}/{sport}/predictions/probabilities`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All Value Bets
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsAllValueBets: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('predictionsAllValueBets', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('predictionsAllValueBets', 'sport', sport)
            const localVarPath = `/{version}/{sport}/predictions/value-bets`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Fixture ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} fixtureId The ID of the fixture you want to retrieve predictions from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsByFixtureId: async (version: string, sport: string, fixtureId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('predictionsByFixtureId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('predictionsByFixtureId', 'sport', sport)
            // verify required parameter 'fixtureId' is not null or undefined
            assertParamExists('predictionsByFixtureId', 'fixtureId', fixtureId)
            const localVarPath = `/{version}/{sport}/predictions/probabilities/fixtures/{fixtureId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"fixtureId"}}`, encodeURIComponent(String(fixtureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Value Bets by Fixture ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} fixtureId The ID of the fixture you want to retrieve value bets from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsValueBetsByFixtureId: async (version: string, sport: string, fixtureId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('predictionsValueBetsByFixtureId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('predictionsValueBetsByFixtureId', 'sport', sport)
            // verify required parameter 'fixtureId' is not null or undefined
            assertParamExists('predictionsValueBetsByFixtureId', 'fixtureId', fixtureId)
            const localVarPath = `/{version}/{sport}/predictions/value-bets/fixtures/{fixtureId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"fixtureId"}}`, encodeURIComponent(String(fixtureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} refereeId The ID of the referee you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refereeById: async (version: string, sport: string, refereeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('refereeById', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('refereeById', 'sport', sport)
            // verify required parameter 'refereeId' is not null or undefined
            assertParamExists('refereeById', 'refereeId', refereeId)
            const localVarPath = `/{version}/{sport}/referees/{refereeId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"refereeId"}}`, encodeURIComponent(String(refereeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refereesAll: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('refereesAll', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('refereesAll', 'sport', sport)
            const localVarPath = `/{version}/{sport}/referees`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Country ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} countryId The ID of the country you want to retrieve referees from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refereesByCountryId: async (version: string, sport: string, countryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('refereesByCountryId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('refereesByCountryId', 'sport', sport)
            // verify required parameter 'countryId' is not null or undefined
            assertParamExists('refereesByCountryId', 'countryId', countryId)
            const localVarPath = `/{version}/{sport}/referees/countries/{countryId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"countryId"}}`, encodeURIComponent(String(countryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Season ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} seasonId The ID of the season you want to retrieve referees from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refereesBySeasonId: async (version: string, sport: string, seasonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('refereesBySeasonId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('refereesBySeasonId', 'sport', sport)
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('refereesBySeasonId', 'seasonId', seasonId)
            const localVarPath = `/{version}/{sport}/referees/seasons/{seasonId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {string} name The name you want to search on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refereesSearch: async (version: string, sport: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('refereesSearch', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('refereesSearch', 'sport', sport)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('refereesSearch', 'name', name)
            const localVarPath = `/{version}/{sport}/referees/search/{name}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rivalsAll: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('rivalsAll', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('rivalsAll', 'sport', sport)
            const localVarPath = `/{version}/{sport}/rivals`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Team ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} teamId The ID of the team you want to retrieve rivals from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rivalsByTeamId: async (version: string, sport: string, teamId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('rivalsByTeamId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('rivalsByTeamId', 'sport', sport)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('rivalsByTeamId', 'teamId', teamId)
            const localVarPath = `/{version}/{sport}/rivals/teams/{teamId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} roundId The ID of the round you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundById: async (version: string, sport: string, roundId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('roundById', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('roundById', 'sport', sport)
            // verify required parameter 'roundId' is not null or undefined
            assertParamExists('roundById', 'roundId', roundId)
            const localVarPath = `/{version}/{sport}/rounds/{roundId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"roundId"}}`, encodeURIComponent(String(roundId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundsAll: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('roundsAll', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('roundsAll', 'sport', sport)
            const localVarPath = `/{version}/{sport}/rounds`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Season ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} seasonId The ID of the season you want to retrieve rounds from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundsBySeasonId: async (version: string, sport: string, seasonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('roundsBySeasonId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('roundsBySeasonId', 'sport', sport)
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('roundsBySeasonId', 'seasonId', seasonId)
            const localVarPath = `/{version}/{sport}/rounds/seasons/{seasonId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} name The name you want to search on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundsSearch: async (version: string, sport: string, name: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('roundsSearch', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('roundsSearch', 'sport', sport)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('roundsSearch', 'name', name)
            const localVarPath = `/{version}/{sport}/rounds/search/{name}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Season ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} seasonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesBySeasonId: async (version: string, sport: string, seasonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('schedulesBySeasonId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('schedulesBySeasonId', 'sport', sport)
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('schedulesBySeasonId', 'seasonId', seasonId)
            const localVarPath = `/{version}/{sport}/schedules/seasons/{seasonId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Team and Season ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} seasonId The ID of the season you want to retrieve schedule from.
         * @param {number} teamId The ID of the team you want to retrieve schedule from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesByTeamAndSeasonId: async (version: string, sport: string, seasonId: number, teamId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('schedulesByTeamAndSeasonId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('schedulesByTeamAndSeasonId', 'sport', sport)
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('schedulesByTeamAndSeasonId', 'seasonId', seasonId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('schedulesByTeamAndSeasonId', 'teamId', teamId)
            const localVarPath = `/{version}/{sport}/schedules/seasons/{seasonId}/teams/{teamId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)))
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Team ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} teamId The ID of the team you want to retrieve schedule from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesByTeamId: async (version: string, sport: string, teamId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('schedulesByTeamId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('schedulesByTeamId', 'sport', sport)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('schedulesByTeamId', 'teamId', teamId)
            const localVarPath = `/{version}/{sport}/schedules/teams/{teamId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} seasonId The ID of the season you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonById: async (version: string, sport: string, seasonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('seasonById', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('seasonById', 'sport', sport)
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('seasonById', 'seasonId', seasonId)
            const localVarPath = `/{version}/{sport}/seasons/{seasonId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsAll: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('seasonsAll', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('seasonsAll', 'sport', sport)
            const localVarPath = `/{version}/{sport}/seasons`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Team ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} teamId The ID of the team you want to retrieve seasons from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsByTeamId: async (version: string, sport: string, teamId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('seasonsByTeamId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('seasonsByTeamId', 'sport', sport)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('seasonsByTeamId', 'teamId', teamId)
            const localVarPath = `/{version}/{sport}/seasons/teams/{teamId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} name The name you want to search on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsSearch: async (version: string, sport: string, name: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('seasonsSearch', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('seasonsSearch', 'sport', sport)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('seasonsSearch', 'name', name)
            const localVarPath = `/{version}/{sport}/seasons/search/{name}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Season and Team ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} seasonId The ID of the season you want to retrieve squads from.
         * @param {number} teamId The ID of the team you want to retrieve squads from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        squadsBySeasonAndTeamId: async (version: string, sport: string, seasonId: number, teamId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('squadsBySeasonAndTeamId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('squadsBySeasonAndTeamId', 'sport', sport)
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('squadsBySeasonAndTeamId', 'seasonId', seasonId)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('squadsBySeasonAndTeamId', 'teamId', teamId)
            const localVarPath = `/{version}/{sport}/squads/seasons/{seasonId}/teams/{teamId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)))
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Team ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} teamId The ID of the team you want to retrieve squads from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        squadsByTeamId: async (version: string, sport: string, teamId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('squadsByTeamId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('squadsByTeamId', 'sport', sport)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('squadsByTeamId', 'teamId', teamId)
            const localVarPath = `/{version}/{sport}/squads/teams/{teamId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} stageId The ID of the stage you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stageById: async (version: string, sport: string, stageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('stageById', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('stageById', 'sport', sport)
            // verify required parameter 'stageId' is not null or undefined
            assertParamExists('stageById', 'stageId', stageId)
            const localVarPath = `/{version}/{sport}/stages/{stageId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"stageId"}}`, encodeURIComponent(String(stageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stagesAll: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('stagesAll', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('stagesAll', 'sport', sport)
            const localVarPath = `/{version}/{sport}/stages`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Season ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} seasonId The ID of the season you want to retrieve stages from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stagesBySeasonId: async (version: string, sport: string, seasonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('stagesBySeasonId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('stagesBySeasonId', 'sport', sport)
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('stagesBySeasonId', 'seasonId', seasonId)
            const localVarPath = `/{version}/{sport}/stages/seasons/{seasonId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {string} name The name you want to search on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stagesSearch: async (version: string, sport: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('stagesSearch', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('stagesSearch', 'sport', sport)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('stagesSearch', 'name', name)
            const localVarPath = `/{version}/{sport}/stages/search/{name}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Correction by Season ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} seasonId The ID of the season you want to retrieve standing corrections from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        standingCorrectionsBySeasonId: async (version: string, sport: string, seasonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('standingCorrectionsBySeasonId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('standingCorrectionsBySeasonId', 'sport', sport)
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('standingCorrectionsBySeasonId', 'seasonId', seasonId)
            const localVarPath = `/{version}/{sport}/standings/corrections/seasons/{seasonId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        standingsAll: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('standingsAll', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('standingsAll', 'sport', sport)
            const localVarPath = `/{version}/{sport}/standings`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Round ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} roundId The ID of the round you want to retrieve standing from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        standingsByRoundId: async (version: string, sport: string, roundId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('standingsByRoundId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('standingsByRoundId', 'sport', sport)
            // verify required parameter 'roundId' is not null or undefined
            assertParamExists('standingsByRoundId', 'roundId', roundId)
            const localVarPath = `/{version}/{sport}/standings/rounds/{roundId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"roundId"}}`, encodeURIComponent(String(roundId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Season ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} seasonId The ID of the season you want to retrieve standing from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        standingsBySeasonId: async (version: string, sport: string, seasonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('standingsBySeasonId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('standingsBySeasonId', 'sport', sport)
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('standingsBySeasonId', 'seasonId', seasonId)
            const localVarPath = `/{version}/{sport}/standings/seasons/{seasonId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By League ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} leagueId The ID of the league you want to retrieve standings from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        standingsLiveByLeagueId: async (version: string, sport: string, leagueId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('standingsLiveByLeagueId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('standingsLiveByLeagueId', 'sport', sport)
            // verify required parameter 'leagueId' is not null or undefined
            assertParamExists('standingsLiveByLeagueId', 'leagueId', leagueId)
            const localVarPath = `/{version}/{sport}/standings/live/leagues/{leagueId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"leagueId"}}`, encodeURIComponent(String(leagueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} stateId The ID of the state you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stateById: async (version: string, sport: string, stateId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('stateById', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('stateById', 'sport', sport)
            // verify required parameter 'stateId' is not null or undefined
            assertParamExists('stateById', 'stateId', stateId)
            const localVarPath = `/{version}/{sport}/states/{stateId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"stateId"}}`, encodeURIComponent(String(stateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Sport
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statesBySport: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('statesBySport', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('statesBySport', 'sport', sport)
            const localVarPath = `/{version}/{sport}/states`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsAll: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('teamsAll', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('teamsAll', 'sport', sport)
            const localVarPath = `/{version}/{sport}/teams`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Country ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} countryId The ID of the country you want to retrieve teams from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsByCountryId: async (version: string, sport: string, countryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('teamsByCountryId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('teamsByCountryId', 'sport', sport)
            // verify required parameter 'countryId' is not null or undefined
            assertParamExists('teamsByCountryId', 'countryId', countryId)
            const localVarPath = `/{version}/{sport}/teams/countries/{countryId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"countryId"}}`, encodeURIComponent(String(countryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} teamId The ID of the team you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsById: async (version: string, sport: string, teamId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('teamsById', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('teamsById', 'sport', sport)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('teamsById', 'teamId', teamId)
            const localVarPath = `/{version}/{sport}/teams/{teamId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Season ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} seasonId The ID of the season you want to retrieve teams from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsBySeasonId: async (version: string, sport: string, seasonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('teamsBySeasonId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('teamsBySeasonId', 'sport', sport)
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('teamsBySeasonId', 'seasonId', seasonId)
            const localVarPath = `/{version}/{sport}/teams/seasons/{seasonId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {string} name The name you want to search on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsSearch: async (version: string, sport: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('teamsSearch', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('teamsSearch', 'sport', sport)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('teamsSearch', 'name', name)
            const localVarPath = `/{version}/{sport}/teams/search/{name}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Season ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} seasonId The ID of the season you want to retrieve topscorers from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topScorersBySeasonId: async (version: string, sport: string, seasonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('topScorersBySeasonId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('topScorersBySeasonId', 'sport', sport)
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('topScorersBySeasonId', 'seasonId', seasonId)
            const localVarPath = `/{version}/{sport}/topscorers/seasons/{seasonId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Stage ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} stageId The ID of the stage you want to retrieve topscorers from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topScorersByStageId: async (version: string, sport: string, stageId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('topScorersByStageId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('topScorersByStageId', 'sport', sport)
            // verify required parameter 'stageId' is not null or undefined
            assertParamExists('topScorersByStageId', 'stageId', stageId)
            const localVarPath = `/{version}/{sport}/topscorers/stages/{stageId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"stageId"}}`, encodeURIComponent(String(stageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Date Range
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {string} startDate The start date you want to retrieve transfers from.
         * @param {string} endDate The end date you want to retrieve transfers from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tranfersByDateRange: async (version: string, sport: string, startDate: string, endDate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('tranfersByDateRange', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('tranfersByDateRange', 'sport', sport)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('tranfersByDateRange', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('tranfersByDateRange', 'endDate', endDate)
            const localVarPath = `/{version}/{sport}/transfers/between/{startDate}/{endDate}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"startDate"}}`, encodeURIComponent(String(startDate)))
                .replace(`{${"endDate"}}`, encodeURIComponent(String(endDate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} transferId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferById: async (version: string, sport: string, transferId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('transferById', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('transferById', 'sport', sport)
            // verify required parameter 'transferId' is not null or undefined
            assertParamExists('transferById', 'transferId', transferId)
            const localVarPath = `/{version}/{sport}/transfers/{transferId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"transferId"}}`, encodeURIComponent(String(transferId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfersAll: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('transfersAll', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('transfersAll', 'sport', sport)
            const localVarPath = `/{version}/{sport}/transfers`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Player ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} playerId The ID of the player you want to retrieve transfers from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfersByPlayerId: async (version: string, sport: string, playerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('transfersByPlayerId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('transfersByPlayerId', 'sport', sport)
            // verify required parameter 'playerId' is not null or undefined
            assertParamExists('transfersByPlayerId', 'playerId', playerId)
            const localVarPath = `/{version}/{sport}/transfers/players/{playerId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"playerId"}}`, encodeURIComponent(String(playerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Team ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} teamId The ID of the team you want to retrieve transfers from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfersByTeamId: async (version: string, sport: string, teamId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('transfersByTeamId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('transfersByTeamId', 'sport', sport)
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('transfersByTeamId', 'teamId', teamId)
            const localVarPath = `/{version}/{sport}/transfers/teams/{teamId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Last Updated
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfersLatest: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('transfersLatest', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('transfersLatest', 'sport', sport)
            const localVarPath = `/{version}/{sport}/transfers/latest`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} tvStationId The ID of the tv station you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tvStationById: async (version: string, sport: string, tvStationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('tvStationById', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('tvStationById', 'sport', sport)
            // verify required parameter 'tvStationId' is not null or undefined
            assertParamExists('tvStationById', 'tvStationId', tvStationId)
            const localVarPath = `/{version}/{sport}/tv-stations/{tvStationId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"tvStationId"}}`, encodeURIComponent(String(tvStationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tvStationsAll: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('tvStationsAll', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('tvStationsAll', 'sport', sport)
            const localVarPath = `/{version}/{sport}/tv-stations`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Fixture ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} fixtureId The ID of the fixture you want to retrieve tv-stations from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tvStationsByFixtureId: async (version: string, sport: string, fixtureId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('tvStationsByFixtureId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('tvStationsByFixtureId', 'sport', sport)
            // verify required parameter 'fixtureId' is not null or undefined
            assertParamExists('tvStationsByFixtureId', 'fixtureId', fixtureId)
            const localVarPath = `/{version}/{sport}/tv-stations/fixtures/{fixtureId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"fixtureId"}}`, encodeURIComponent(String(fixtureId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} venueId The ID of the venue you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venueById: async (version: string, sport: string, venueId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('venueById', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('venueById', 'sport', sport)
            // verify required parameter 'venueId' is not null or undefined
            assertParamExists('venueById', 'venueId', venueId)
            const localVarPath = `/{version}/{sport}/venues/{venueId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"venueId"}}`, encodeURIComponent(String(venueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venuesAll: async (version: string, sport: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('venuesAll', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('venuesAll', 'sport', sport)
            const localVarPath = `/{version}/{sport}/venues`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Season ID
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {number} seasonId The ID of the season you want to retrieve venues from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venuesBySeasonId: async (version: string, sport: string, seasonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('venuesBySeasonId', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('venuesBySeasonId', 'sport', sport)
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('venuesBySeasonId', 'seasonId', seasonId)
            const localVarPath = `/{version}/{sport}/venues/seasons/{seasonId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {string} version The version of the API.
         * @param {string} sport The sport you want retrieve entities from.
         * @param {string} name The name you want to search on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venuesSearch: async (version: string, sport: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('venuesSearch', 'version', version)
            // verify required parameter 'sport' is not null or undefined
            assertParamExists('venuesSearch', 'sport', sport)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('venuesSearch', 'name', name)
            const localVarPath = `/{version}/{sport}/venues/search/{name}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SportApi - functional programming interface
 * @export
 */
export const SportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary By ID
         * @param {SportApiCoachByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coachById(requestParameters: SportApiCoachByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportCoachByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coachById(requestParameters.version, requestParameters.sport, requestParameters.coachId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {SportApiCoachesAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coachesAll(requestParameters: SportApiCoachesAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportCoachesAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coachesAll(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Country ID
         * @param {SportApiCoachesByCountryIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coachesByCountryId(requestParameters: SportApiCoachesByCountryIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportCoachesByCountryIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coachesByCountryId(requestParameters.version, requestParameters.sport, requestParameters.countryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Last updated
         * @param {SportApiCoachesLatestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coachesLatest(requestParameters: SportApiCoachesLatestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportCoachesLatestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coachesLatest(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {SportApiCoachesSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async coachesSearch(requestParameters: SportApiCoachesSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportCoachesSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.coachesSearch(requestParameters.version, requestParameters.sport, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {SportApiCommentariesAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentariesAll(requestParameters: SportApiCommentariesAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportCommentariesAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentariesAll(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Fixture ID
         * @param {SportApiCommentariesByFixtureIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentariesByFixtureId(requestParameters: SportApiCommentariesByFixtureIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportCommentariesByFixtureIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentariesByFixtureId(requestParameters.version, requestParameters.sport, requestParameters.fixtureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Date Range for Team
         * @param {SportApiFixtureByDateRangeForTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fixtureByDateRangeForTeam(requestParameters: SportApiFixtureByDateRangeForTeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportFixtureByDateRangeForTeamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fixtureByDateRangeForTeam(requestParameters.version, requestParameters.sport, requestParameters.startDate, requestParameters.endDate, requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Fixture ID
         * @param {SportApiFixtureByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fixtureById(requestParameters: SportApiFixtureByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportFixtureByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fixtureById(requestParameters.version, requestParameters.sport, requestParameters.fixtureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {SportApiFixturesAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fixturesAll(requestParameters: SportApiFixturesAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportFixturesAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fixturesAll(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Date
         * @param {SportApiFixturesByDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fixturesByDate(requestParameters: SportApiFixturesByDateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportFixturesByDateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fixturesByDate(requestParameters.version, requestParameters.sport, requestParameters.date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Date Range
         * @param {SportApiFixturesByDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fixturesByDateRange(requestParameters: SportApiFixturesByDateRangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportFixturesByDateRangeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fixturesByDateRange(requestParameters.version, requestParameters.sport, requestParameters.startDate, requestParameters.endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By IDs
         * @param {SportApiFixturesByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fixturesByIds(requestParameters: SportApiFixturesByIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportFixturesByIdsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fixturesByIds(requestParameters.version, requestParameters.sport, requestParameters.fixtureIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Head to Head
         * @param {SportApiFixturesHeadToHeadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fixturesHeadToHead(requestParameters: SportApiFixturesHeadToHeadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportFixturesHeadToHeadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fixturesHeadToHead(requestParameters.version, requestParameters.sport, requestParameters.firstTeam, requestParameters.secondTeam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Last Updated
         * @param {SportApiFixturesLatestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fixturesLatest(requestParameters: SportApiFixturesLatestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fixturesLatest(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {SportApiFixturesSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fixturesSearch(requestParameters: SportApiFixturesSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportFixturesSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fixturesSearch(requestParameters.version, requestParameters.sport, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiLeagueByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leagueById(requestParameters: SportApiLeagueByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportLeagueByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leagueById(requestParameters.version, requestParameters.sport, requestParameters.leagueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Enrichments
         * @param {SportApiLeagueEnrichmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leagueEnrichments(requestParameters: SportApiLeagueEnrichmentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leagueEnrichments(requestParameters.version, requestParameters.sport, requestParameters.leagueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Shirts By League ID
         * @param {SportApiLeagueShirtsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leagueShirts(requestParameters: SportApiLeagueShirtsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leagueShirts(requestParameters.version, requestParameters.sport, requestParameters.leagueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {SportApiLeaguesAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaguesAll(requestParameters: SportApiLeaguesAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportLeaguesAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaguesAll(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Country ID
         * @param {SportApiLeaguesByCountryIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaguesByCountryId(requestParameters: SportApiLeaguesByCountryIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportLeaguesByCountryIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaguesByCountryId(requestParameters.version, requestParameters.sport, requestParameters.countryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Date
         * @param {SportApiLeaguesByDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaguesByDate(requestParameters: SportApiLeaguesByDateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportLeaguesByDateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaguesByDate(requestParameters.version, requestParameters.sport, requestParameters.date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Leagues By Team ID
         * @param {SportApiLeaguesByTeamIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaguesByTeamId(requestParameters: SportApiLeaguesByTeamIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaguesByTeamId(requestParameters.version, requestParameters.sport, requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Current Leagues By Team ID
         * @param {SportApiLeaguesCurrentByTeamIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaguesCurrentByTeamId(requestParameters: SportApiLeaguesCurrentByTeamIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaguesCurrentByTeamId(requestParameters.version, requestParameters.sport, requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Live
         * @param {SportApiLeaguesLiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaguesLive(requestParameters: SportApiLeaguesLiveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportLeaguesLiveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaguesLive(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {SportApiLeaguesSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaguesSearch(requestParameters: SportApiLeaguesSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportLeaguesSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaguesSearch(requestParameters.version, requestParameters.sport, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {SportApiLivescoresAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async livescoresAll(requestParameters: SportApiLivescoresAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportLivescoresAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.livescoresAll(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All In-play
         * @param {SportApiLivescoresAllInPlayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async livescoresAllInPlay(requestParameters: SportApiLivescoresAllInPlayRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportLivescoresAllInPlayResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.livescoresAllInPlay(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Last Updated In-play
         * @param {SportApiLivescoresLatestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async livescoresLatest(requestParameters: SportApiLivescoresLatestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportLivescoresLatestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.livescoresLatest(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All Post Match
         * @param {SportApiNewsAllPostMatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsAllPostMatch(requestParameters: SportApiNewsAllPostMatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsAllPostMatch(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All Pre-match
         * @param {SportApiNewsAllPreMatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsAllPreMatch(requestParameters: SportApiNewsAllPreMatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportNewsAllPreMatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsAllPreMatch(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Post Match by Season ID
         * @param {SportApiNewsPostMatchBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsPostMatchBySeasonId(requestParameters: SportApiNewsPostMatchBySeasonIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsPostMatchBySeasonId(requestParameters.version, requestParameters.sport, requestParameters.seasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pre-match By Season ID
         * @param {SportApiNewsPreMatchBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsPreMatchBySeasonId(requestParameters: SportApiNewsPreMatchBySeasonIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportNewsPreMatchBySeasonIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsPreMatchBySeasonId(requestParameters.version, requestParameters.sport, requestParameters.seasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upcoming Post Match
         * @param {SportApiNewsUpcomingPostMatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsUpcomingPostMatch(requestParameters: SportApiNewsUpcomingPostMatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsUpcomingPostMatch(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upcoming Pre-match
         * @param {SportApiNewsUpcomingPreMatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsUpcomingPreMatch(requestParameters: SportApiNewsUpcomingPreMatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportNewsUpcomingPreMatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsUpcomingPreMatch(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All In-play
         * @param {SportApiOddsAllInPlayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oddsAllInPlay(requestParameters: SportApiOddsAllInPlayRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportOddsAllInPlayResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oddsAllInPlay(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All Pre-match
         * @param {SportApiOddsAllPreMatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oddsAllPreMatch(requestParameters: SportApiOddsAllPreMatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportOddsAllPreMatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oddsAllPreMatch(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary In-play by Fixture and Bookmaker ID
         * @param {SportApiOddsInPlayByFixtureAndBookmakerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oddsInPlayByFixtureAndBookmakerId(requestParameters: SportApiOddsInPlayByFixtureAndBookmakerIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oddsInPlayByFixtureAndBookmakerId(requestParameters.version, requestParameters.sport, requestParameters.fixtureId, requestParameters.bookmakerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary In-play by Fixture and Market ID
         * @param {SportApiOddsInPlayByFixtureAndMarketIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oddsInPlayByFixtureAndMarketId(requestParameters: SportApiOddsInPlayByFixtureAndMarketIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oddsInPlayByFixtureAndMarketId(requestParameters.version, requestParameters.sport, requestParameters.fixtureId, requestParameters.marketId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary In-play by Fixture ID
         * @param {SportApiOddsInPlayByFixtureIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oddsInPlayByFixtureId(requestParameters: SportApiOddsInPlayByFixtureIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportOddsInPlayByFixtureIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oddsInPlayByFixtureId(requestParameters.version, requestParameters.sport, requestParameters.fixtureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Latest In-play
         * @param {SportApiOddsLatestInPlayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oddsLatestInPlay(requestParameters: SportApiOddsLatestInPlayRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oddsLatestInPlay(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Last Updated Pre-match
         * @param {SportApiOddsLatestPreMatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oddsLatestPreMatch(requestParameters: SportApiOddsLatestPreMatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oddsLatestPreMatch(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pre-match by Fixture and Bookmaker ID
         * @param {SportApiOddsPreMatchByFixtureAndBookmakerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oddsPreMatchByFixtureAndBookmakerId(requestParameters: SportApiOddsPreMatchByFixtureAndBookmakerIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportOddsPreMatchByFixtureAndBookmakerIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oddsPreMatchByFixtureAndBookmakerId(requestParameters.version, requestParameters.sport, requestParameters.fixtureId, requestParameters.bookmakerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pre-match by Fixture and Market ID
         * @param {SportApiOddsPreMatchByFixtureAndMarketIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oddsPreMatchByFixtureAndMarketId(requestParameters: SportApiOddsPreMatchByFixtureAndMarketIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportOddsPreMatchByFixtureAndMarketIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oddsPreMatchByFixtureAndMarketId(requestParameters.version, requestParameters.sport, requestParameters.fixtureId, requestParameters.marketId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pre-match by Fixture ID
         * @param {SportApiOddsPreMatchByFixtureIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oddsPreMatchByFixtureId(requestParameters: SportApiOddsPreMatchByFixtureIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportOddsPreMatchByFixtureIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oddsPreMatchByFixtureId(requestParameters.version, requestParameters.sport, requestParameters.fixtureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiPlayerByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playerById(requestParameters: SportApiPlayerByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportPlayerByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playerById(requestParameters.version, requestParameters.sport, requestParameters.playerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {SportApiPlayersAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playersAll(requestParameters: SportApiPlayersAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportPlayersAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playersAll(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Country ID
         * @param {SportApiPlayersByCountryIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playersByCountryId(requestParameters: SportApiPlayersByCountryIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportPlayersByCountryIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playersByCountryId(requestParameters.version, requestParameters.sport, requestParameters.countryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Latest Updated
         * @param {SportApiPlayersLatestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playersLatest(requestParameters: SportApiPlayersLatestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportPlayersLatestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playersLatest(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {SportApiPlayersSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playersSearch(requestParameters: SportApiPlayersSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportPlayersSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playersSearch(requestParameters.version, requestParameters.sport, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {SportApiPredictionsAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async predictionsAll(requestParameters: SportApiPredictionsAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportPredictionsAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.predictionsAll(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All Value Bets
         * @param {SportApiPredictionsAllValueBetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async predictionsAllValueBets(requestParameters: SportApiPredictionsAllValueBetsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportPredictionsAllValueBetsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.predictionsAllValueBets(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Fixture ID
         * @param {SportApiPredictionsByFixtureIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async predictionsByFixtureId(requestParameters: SportApiPredictionsByFixtureIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportPredictionsByFixtureIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.predictionsByFixtureId(requestParameters.version, requestParameters.sport, requestParameters.fixtureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Value Bets by Fixture ID
         * @param {SportApiPredictionsValueBetsByFixtureIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async predictionsValueBetsByFixtureId(requestParameters: SportApiPredictionsValueBetsByFixtureIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.predictionsValueBetsByFixtureId(requestParameters.version, requestParameters.sport, requestParameters.fixtureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiRefereeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refereeById(requestParameters: SportApiRefereeByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportRefereeByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refereeById(requestParameters.version, requestParameters.sport, requestParameters.refereeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {SportApiRefereesAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refereesAll(requestParameters: SportApiRefereesAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportRefereesAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refereesAll(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Country ID
         * @param {SportApiRefereesByCountryIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refereesByCountryId(requestParameters: SportApiRefereesByCountryIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportRefereesByCountryIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refereesByCountryId(requestParameters.version, requestParameters.sport, requestParameters.countryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Season ID
         * @param {SportApiRefereesBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refereesBySeasonId(requestParameters: SportApiRefereesBySeasonIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportRefereesBySeasonIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refereesBySeasonId(requestParameters.version, requestParameters.sport, requestParameters.seasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {SportApiRefereesSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refereesSearch(requestParameters: SportApiRefereesSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportRefereesSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refereesSearch(requestParameters.version, requestParameters.sport, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {SportApiRivalsAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rivalsAll(requestParameters: SportApiRivalsAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportRivalsAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rivalsAll(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Team ID
         * @param {SportApiRivalsByTeamIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rivalsByTeamId(requestParameters: SportApiRivalsByTeamIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportRivalsByTeamIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rivalsByTeamId(requestParameters.version, requestParameters.sport, requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiRoundByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roundById(requestParameters: SportApiRoundByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportRoundByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roundById(requestParameters.version, requestParameters.sport, requestParameters.roundId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {SportApiRoundsAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roundsAll(requestParameters: SportApiRoundsAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportRoundsAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roundsAll(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Season ID
         * @param {SportApiRoundsBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roundsBySeasonId(requestParameters: SportApiRoundsBySeasonIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportRoundsBySeasonIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roundsBySeasonId(requestParameters.version, requestParameters.sport, requestParameters.seasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {SportApiRoundsSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roundsSearch(requestParameters: SportApiRoundsSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportRoundsSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roundsSearch(requestParameters.version, requestParameters.sport, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Season ID
         * @param {SportApiSchedulesBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schedulesBySeasonId(requestParameters: SportApiSchedulesBySeasonIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportSchedulesBySeasonIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schedulesBySeasonId(requestParameters.version, requestParameters.sport, requestParameters.seasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Team and Season ID
         * @param {SportApiSchedulesByTeamAndSeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schedulesByTeamAndSeasonId(requestParameters: SportApiSchedulesByTeamAndSeasonIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportSchedulesByTeamAndSeasonIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schedulesByTeamAndSeasonId(requestParameters.version, requestParameters.sport, requestParameters.seasonId, requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Team ID
         * @param {SportApiSchedulesByTeamIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schedulesByTeamId(requestParameters: SportApiSchedulesByTeamIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportSchedulesByTeamIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schedulesByTeamId(requestParameters.version, requestParameters.sport, requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiSeasonByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seasonById(requestParameters: SportApiSeasonByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportSeasonByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seasonById(requestParameters.version, requestParameters.sport, requestParameters.seasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {SportApiSeasonsAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seasonsAll(requestParameters: SportApiSeasonsAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportSeasonsAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seasonsAll(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Team ID
         * @param {SportApiSeasonsByTeamIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seasonsByTeamId(requestParameters: SportApiSeasonsByTeamIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seasonsByTeamId(requestParameters.version, requestParameters.sport, requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {SportApiSeasonsSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seasonsSearch(requestParameters: SportApiSeasonsSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportSeasonsSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seasonsSearch(requestParameters.version, requestParameters.sport, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Season and Team ID
         * @param {SportApiSquadsBySeasonAndTeamIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async squadsBySeasonAndTeamId(requestParameters: SportApiSquadsBySeasonAndTeamIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportSquadsBySeasonAndTeamIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.squadsBySeasonAndTeamId(requestParameters.version, requestParameters.sport, requestParameters.seasonId, requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Team ID
         * @param {SportApiSquadsByTeamIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async squadsByTeamId(requestParameters: SportApiSquadsByTeamIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportSquadsByTeamIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.squadsByTeamId(requestParameters.version, requestParameters.sport, requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiStageByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stageById(requestParameters: SportApiStageByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportStageByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stageById(requestParameters.version, requestParameters.sport, requestParameters.stageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {SportApiStagesAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stagesAll(requestParameters: SportApiStagesAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportStagesAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stagesAll(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Season ID
         * @param {SportApiStagesBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stagesBySeasonId(requestParameters: SportApiStagesBySeasonIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportStagesBySeasonIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stagesBySeasonId(requestParameters.version, requestParameters.sport, requestParameters.seasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {SportApiStagesSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stagesSearch(requestParameters: SportApiStagesSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportStagesSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stagesSearch(requestParameters.version, requestParameters.sport, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Correction by Season ID
         * @param {SportApiStandingCorrectionsBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async standingCorrectionsBySeasonId(requestParameters: SportApiStandingCorrectionsBySeasonIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportStandingCorrectionsBySeasonIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.standingCorrectionsBySeasonId(requestParameters.version, requestParameters.sport, requestParameters.seasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {SportApiStandingsAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async standingsAll(requestParameters: SportApiStandingsAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportStandingsAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.standingsAll(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Round ID
         * @param {SportApiStandingsByRoundIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async standingsByRoundId(requestParameters: SportApiStandingsByRoundIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportStandingsByRoundIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.standingsByRoundId(requestParameters.version, requestParameters.sport, requestParameters.roundId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Season ID
         * @param {SportApiStandingsBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async standingsBySeasonId(requestParameters: SportApiStandingsBySeasonIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportStandingsBySeasonIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.standingsBySeasonId(requestParameters.version, requestParameters.sport, requestParameters.seasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By League ID
         * @param {SportApiStandingsLiveByLeagueIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async standingsLiveByLeagueId(requestParameters: SportApiStandingsLiveByLeagueIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportStandingsLiveByLeagueIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.standingsLiveByLeagueId(requestParameters.version, requestParameters.sport, requestParameters.leagueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiStateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stateById(requestParameters: SportApiStateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportStateByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stateById(requestParameters.version, requestParameters.sport, requestParameters.stateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Sport
         * @param {SportApiStatesBySportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statesBySport(requestParameters: SportApiStatesBySportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportStatesBySportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statesBySport(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {SportApiTeamsAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsAll(requestParameters: SportApiTeamsAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportTeamsAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsAll(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Country ID
         * @param {SportApiTeamsByCountryIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsByCountryId(requestParameters: SportApiTeamsByCountryIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportTeamsByCountryIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsByCountryId(requestParameters.version, requestParameters.sport, requestParameters.countryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiTeamsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsById(requestParameters: SportApiTeamsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportTeamsByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsById(requestParameters.version, requestParameters.sport, requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Season ID
         * @param {SportApiTeamsBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsBySeasonId(requestParameters: SportApiTeamsBySeasonIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportTeamsBySeasonIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsBySeasonId(requestParameters.version, requestParameters.sport, requestParameters.seasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {SportApiTeamsSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsSearch(requestParameters: SportApiTeamsSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportTeamsSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsSearch(requestParameters.version, requestParameters.sport, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Season ID
         * @param {SportApiTopScorersBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topScorersBySeasonId(requestParameters: SportApiTopScorersBySeasonIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportTopScorersBySeasonIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.topScorersBySeasonId(requestParameters.version, requestParameters.sport, requestParameters.seasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Stage ID
         * @param {SportApiTopScorersByStageIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topScorersByStageId(requestParameters: SportApiTopScorersByStageIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportTopScorersByStageIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.topScorersByStageId(requestParameters.version, requestParameters.sport, requestParameters.stageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Date Range
         * @param {SportApiTranfersByDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tranfersByDateRange(requestParameters: SportApiTranfersByDateRangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportTranfersByDateRangeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tranfersByDateRange(requestParameters.version, requestParameters.sport, requestParameters.startDate, requestParameters.endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiTransferByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferById(requestParameters: SportApiTransferByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportTransferByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferById(requestParameters.version, requestParameters.sport, requestParameters.transferId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {SportApiTransfersAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transfersAll(requestParameters: SportApiTransfersAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportTransfersAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transfersAll(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Player ID
         * @param {SportApiTransfersByPlayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transfersByPlayerId(requestParameters: SportApiTransfersByPlayerIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportTransfersByPlayerIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transfersByPlayerId(requestParameters.version, requestParameters.sport, requestParameters.playerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Team ID
         * @param {SportApiTransfersByTeamIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transfersByTeamId(requestParameters: SportApiTransfersByTeamIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportTransfersByTeamIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transfersByTeamId(requestParameters.version, requestParameters.sport, requestParameters.teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Last Updated
         * @param {SportApiTransfersLatestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transfersLatest(requestParameters: SportApiTransfersLatestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportTransfersLatestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transfersLatest(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiTvStationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tvStationById(requestParameters: SportApiTvStationByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportTvStationByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tvStationById(requestParameters.version, requestParameters.sport, requestParameters.tvStationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {SportApiTvStationsAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tvStationsAll(requestParameters: SportApiTvStationsAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportTvStationsAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tvStationsAll(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Fixture ID
         * @param {SportApiTvStationsByFixtureIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tvStationsByFixtureId(requestParameters: SportApiTvStationsByFixtureIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportTvStationsByFixtureIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tvStationsByFixtureId(requestParameters.version, requestParameters.sport, requestParameters.fixtureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiVenueByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async venueById(requestParameters: SportApiVenueByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportVenueByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.venueById(requestParameters.version, requestParameters.sport, requestParameters.venueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {SportApiVenuesAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async venuesAll(requestParameters: SportApiVenuesAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportVenuesAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.venuesAll(requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Season ID
         * @param {SportApiVenuesBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async venuesBySeasonId(requestParameters: SportApiVenuesBySeasonIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportVenuesBySeasonIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.venuesBySeasonId(requestParameters.version, requestParameters.sport, requestParameters.seasonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {SportApiVenuesSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async venuesSearch(requestParameters: SportApiVenuesSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SportVenuesSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.venuesSearch(requestParameters.version, requestParameters.sport, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SportApi - factory interface
 * @export
 */
export const SportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SportApiFp(configuration)
    return {
        /**
         * 
         * @summary By ID
         * @param {SportApiCoachByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coachById(requestParameters: SportApiCoachByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportCoachByIdResponse> {
            return localVarFp.coachById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {SportApiCoachesAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coachesAll(requestParameters: SportApiCoachesAllRequest, options?: AxiosRequestConfig): AxiosPromise<SportCoachesAllResponse> {
            return localVarFp.coachesAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Country ID
         * @param {SportApiCoachesByCountryIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coachesByCountryId(requestParameters: SportApiCoachesByCountryIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportCoachesByCountryIdResponse> {
            return localVarFp.coachesByCountryId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Last updated
         * @param {SportApiCoachesLatestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coachesLatest(requestParameters: SportApiCoachesLatestRequest, options?: AxiosRequestConfig): AxiosPromise<SportCoachesLatestResponse> {
            return localVarFp.coachesLatest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {SportApiCoachesSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coachesSearch(requestParameters: SportApiCoachesSearchRequest, options?: AxiosRequestConfig): AxiosPromise<SportCoachesSearchResponse> {
            return localVarFp.coachesSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {SportApiCommentariesAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentariesAll(requestParameters: SportApiCommentariesAllRequest, options?: AxiosRequestConfig): AxiosPromise<SportCommentariesAllResponse> {
            return localVarFp.commentariesAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Fixture ID
         * @param {SportApiCommentariesByFixtureIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentariesByFixtureId(requestParameters: SportApiCommentariesByFixtureIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportCommentariesByFixtureIdResponse> {
            return localVarFp.commentariesByFixtureId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Date Range for Team
         * @param {SportApiFixtureByDateRangeForTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixtureByDateRangeForTeam(requestParameters: SportApiFixtureByDateRangeForTeamRequest, options?: AxiosRequestConfig): AxiosPromise<SportFixtureByDateRangeForTeamResponse> {
            return localVarFp.fixtureByDateRangeForTeam(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fixture ID
         * @param {SportApiFixtureByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixtureById(requestParameters: SportApiFixtureByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportFixtureByIdResponse> {
            return localVarFp.fixtureById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {SportApiFixturesAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixturesAll(requestParameters: SportApiFixturesAllRequest, options?: AxiosRequestConfig): AxiosPromise<SportFixturesAllResponse> {
            return localVarFp.fixturesAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Date
         * @param {SportApiFixturesByDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixturesByDate(requestParameters: SportApiFixturesByDateRequest, options?: AxiosRequestConfig): AxiosPromise<SportFixturesByDateResponse> {
            return localVarFp.fixturesByDate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Date Range
         * @param {SportApiFixturesByDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixturesByDateRange(requestParameters: SportApiFixturesByDateRangeRequest, options?: AxiosRequestConfig): AxiosPromise<SportFixturesByDateRangeResponse> {
            return localVarFp.fixturesByDateRange(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By IDs
         * @param {SportApiFixturesByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixturesByIds(requestParameters: SportApiFixturesByIdsRequest, options?: AxiosRequestConfig): AxiosPromise<SportFixturesByIdsResponse> {
            return localVarFp.fixturesByIds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Head to Head
         * @param {SportApiFixturesHeadToHeadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixturesHeadToHead(requestParameters: SportApiFixturesHeadToHeadRequest, options?: AxiosRequestConfig): AxiosPromise<SportFixturesHeadToHeadResponse> {
            return localVarFp.fixturesHeadToHead(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Last Updated
         * @param {SportApiFixturesLatestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixturesLatest(requestParameters: SportApiFixturesLatestRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.fixturesLatest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {SportApiFixturesSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixturesSearch(requestParameters: SportApiFixturesSearchRequest, options?: AxiosRequestConfig): AxiosPromise<SportFixturesSearchResponse> {
            return localVarFp.fixturesSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiLeagueByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueById(requestParameters: SportApiLeagueByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportLeagueByIdResponse> {
            return localVarFp.leagueById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enrichments
         * @param {SportApiLeagueEnrichmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueEnrichments(requestParameters: SportApiLeagueEnrichmentsRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.leagueEnrichments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Shirts By League ID
         * @param {SportApiLeagueShirtsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leagueShirts(requestParameters: SportApiLeagueShirtsRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.leagueShirts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {SportApiLeaguesAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaguesAll(requestParameters: SportApiLeaguesAllRequest, options?: AxiosRequestConfig): AxiosPromise<SportLeaguesAllResponse> {
            return localVarFp.leaguesAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Country ID
         * @param {SportApiLeaguesByCountryIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaguesByCountryId(requestParameters: SportApiLeaguesByCountryIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportLeaguesByCountryIdResponse> {
            return localVarFp.leaguesByCountryId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Date
         * @param {SportApiLeaguesByDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaguesByDate(requestParameters: SportApiLeaguesByDateRequest, options?: AxiosRequestConfig): AxiosPromise<SportLeaguesByDateResponse> {
            return localVarFp.leaguesByDate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Leagues By Team ID
         * @param {SportApiLeaguesByTeamIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaguesByTeamId(requestParameters: SportApiLeaguesByTeamIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.leaguesByTeamId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Current Leagues By Team ID
         * @param {SportApiLeaguesCurrentByTeamIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaguesCurrentByTeamId(requestParameters: SportApiLeaguesCurrentByTeamIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.leaguesCurrentByTeamId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Live
         * @param {SportApiLeaguesLiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaguesLive(requestParameters: SportApiLeaguesLiveRequest, options?: AxiosRequestConfig): AxiosPromise<SportLeaguesLiveResponse> {
            return localVarFp.leaguesLive(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {SportApiLeaguesSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaguesSearch(requestParameters: SportApiLeaguesSearchRequest, options?: AxiosRequestConfig): AxiosPromise<SportLeaguesSearchResponse> {
            return localVarFp.leaguesSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {SportApiLivescoresAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        livescoresAll(requestParameters: SportApiLivescoresAllRequest, options?: AxiosRequestConfig): AxiosPromise<SportLivescoresAllResponse> {
            return localVarFp.livescoresAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All In-play
         * @param {SportApiLivescoresAllInPlayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        livescoresAllInPlay(requestParameters: SportApiLivescoresAllInPlayRequest, options?: AxiosRequestConfig): AxiosPromise<SportLivescoresAllInPlayResponse> {
            return localVarFp.livescoresAllInPlay(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Last Updated In-play
         * @param {SportApiLivescoresLatestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        livescoresLatest(requestParameters: SportApiLivescoresLatestRequest, options?: AxiosRequestConfig): AxiosPromise<SportLivescoresLatestResponse> {
            return localVarFp.livescoresLatest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All Post Match
         * @param {SportApiNewsAllPostMatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsAllPostMatch(requestParameters: SportApiNewsAllPostMatchRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.newsAllPostMatch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All Pre-match
         * @param {SportApiNewsAllPreMatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsAllPreMatch(requestParameters: SportApiNewsAllPreMatchRequest, options?: AxiosRequestConfig): AxiosPromise<SportNewsAllPreMatchResponse> {
            return localVarFp.newsAllPreMatch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Post Match by Season ID
         * @param {SportApiNewsPostMatchBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsPostMatchBySeasonId(requestParameters: SportApiNewsPostMatchBySeasonIdRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.newsPostMatchBySeasonId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pre-match By Season ID
         * @param {SportApiNewsPreMatchBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsPreMatchBySeasonId(requestParameters: SportApiNewsPreMatchBySeasonIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportNewsPreMatchBySeasonIdResponse> {
            return localVarFp.newsPreMatchBySeasonId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upcoming Post Match
         * @param {SportApiNewsUpcomingPostMatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsUpcomingPostMatch(requestParameters: SportApiNewsUpcomingPostMatchRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.newsUpcomingPostMatch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upcoming Pre-match
         * @param {SportApiNewsUpcomingPreMatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsUpcomingPreMatch(requestParameters: SportApiNewsUpcomingPreMatchRequest, options?: AxiosRequestConfig): AxiosPromise<SportNewsUpcomingPreMatchResponse> {
            return localVarFp.newsUpcomingPreMatch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All In-play
         * @param {SportApiOddsAllInPlayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsAllInPlay(requestParameters: SportApiOddsAllInPlayRequest, options?: AxiosRequestConfig): AxiosPromise<SportOddsAllInPlayResponse> {
            return localVarFp.oddsAllInPlay(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All Pre-match
         * @param {SportApiOddsAllPreMatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsAllPreMatch(requestParameters: SportApiOddsAllPreMatchRequest, options?: AxiosRequestConfig): AxiosPromise<SportOddsAllPreMatchResponse> {
            return localVarFp.oddsAllPreMatch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary In-play by Fixture and Bookmaker ID
         * @param {SportApiOddsInPlayByFixtureAndBookmakerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsInPlayByFixtureAndBookmakerId(requestParameters: SportApiOddsInPlayByFixtureAndBookmakerIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.oddsInPlayByFixtureAndBookmakerId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary In-play by Fixture and Market ID
         * @param {SportApiOddsInPlayByFixtureAndMarketIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsInPlayByFixtureAndMarketId(requestParameters: SportApiOddsInPlayByFixtureAndMarketIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.oddsInPlayByFixtureAndMarketId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary In-play by Fixture ID
         * @param {SportApiOddsInPlayByFixtureIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsInPlayByFixtureId(requestParameters: SportApiOddsInPlayByFixtureIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportOddsInPlayByFixtureIdResponse> {
            return localVarFp.oddsInPlayByFixtureId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Latest In-play
         * @param {SportApiOddsLatestInPlayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsLatestInPlay(requestParameters: SportApiOddsLatestInPlayRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.oddsLatestInPlay(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Last Updated Pre-match
         * @param {SportApiOddsLatestPreMatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsLatestPreMatch(requestParameters: SportApiOddsLatestPreMatchRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.oddsLatestPreMatch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pre-match by Fixture and Bookmaker ID
         * @param {SportApiOddsPreMatchByFixtureAndBookmakerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsPreMatchByFixtureAndBookmakerId(requestParameters: SportApiOddsPreMatchByFixtureAndBookmakerIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportOddsPreMatchByFixtureAndBookmakerIdResponse> {
            return localVarFp.oddsPreMatchByFixtureAndBookmakerId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pre-match by Fixture and Market ID
         * @param {SportApiOddsPreMatchByFixtureAndMarketIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsPreMatchByFixtureAndMarketId(requestParameters: SportApiOddsPreMatchByFixtureAndMarketIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportOddsPreMatchByFixtureAndMarketIdResponse> {
            return localVarFp.oddsPreMatchByFixtureAndMarketId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pre-match by Fixture ID
         * @param {SportApiOddsPreMatchByFixtureIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oddsPreMatchByFixtureId(requestParameters: SportApiOddsPreMatchByFixtureIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportOddsPreMatchByFixtureIdResponse> {
            return localVarFp.oddsPreMatchByFixtureId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiPlayerByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playerById(requestParameters: SportApiPlayerByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportPlayerByIdResponse> {
            return localVarFp.playerById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {SportApiPlayersAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersAll(requestParameters: SportApiPlayersAllRequest, options?: AxiosRequestConfig): AxiosPromise<SportPlayersAllResponse> {
            return localVarFp.playersAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Country ID
         * @param {SportApiPlayersByCountryIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersByCountryId(requestParameters: SportApiPlayersByCountryIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportPlayersByCountryIdResponse> {
            return localVarFp.playersByCountryId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Latest Updated
         * @param {SportApiPlayersLatestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersLatest(requestParameters: SportApiPlayersLatestRequest, options?: AxiosRequestConfig): AxiosPromise<SportPlayersLatestResponse> {
            return localVarFp.playersLatest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {SportApiPlayersSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersSearch(requestParameters: SportApiPlayersSearchRequest, options?: AxiosRequestConfig): AxiosPromise<SportPlayersSearchResponse> {
            return localVarFp.playersSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {SportApiPredictionsAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsAll(requestParameters: SportApiPredictionsAllRequest, options?: AxiosRequestConfig): AxiosPromise<SportPredictionsAllResponse> {
            return localVarFp.predictionsAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All Value Bets
         * @param {SportApiPredictionsAllValueBetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsAllValueBets(requestParameters: SportApiPredictionsAllValueBetsRequest, options?: AxiosRequestConfig): AxiosPromise<SportPredictionsAllValueBetsResponse> {
            return localVarFp.predictionsAllValueBets(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Fixture ID
         * @param {SportApiPredictionsByFixtureIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsByFixtureId(requestParameters: SportApiPredictionsByFixtureIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportPredictionsByFixtureIdResponse> {
            return localVarFp.predictionsByFixtureId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Value Bets by Fixture ID
         * @param {SportApiPredictionsValueBetsByFixtureIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsValueBetsByFixtureId(requestParameters: SportApiPredictionsValueBetsByFixtureIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.predictionsValueBetsByFixtureId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiRefereeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refereeById(requestParameters: SportApiRefereeByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportRefereeByIdResponse> {
            return localVarFp.refereeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {SportApiRefereesAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refereesAll(requestParameters: SportApiRefereesAllRequest, options?: AxiosRequestConfig): AxiosPromise<SportRefereesAllResponse> {
            return localVarFp.refereesAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Country ID
         * @param {SportApiRefereesByCountryIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refereesByCountryId(requestParameters: SportApiRefereesByCountryIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportRefereesByCountryIdResponse> {
            return localVarFp.refereesByCountryId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Season ID
         * @param {SportApiRefereesBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refereesBySeasonId(requestParameters: SportApiRefereesBySeasonIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportRefereesBySeasonIdResponse> {
            return localVarFp.refereesBySeasonId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {SportApiRefereesSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refereesSearch(requestParameters: SportApiRefereesSearchRequest, options?: AxiosRequestConfig): AxiosPromise<SportRefereesSearchResponse> {
            return localVarFp.refereesSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {SportApiRivalsAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rivalsAll(requestParameters: SportApiRivalsAllRequest, options?: AxiosRequestConfig): AxiosPromise<SportRivalsAllResponse> {
            return localVarFp.rivalsAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Team ID
         * @param {SportApiRivalsByTeamIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rivalsByTeamId(requestParameters: SportApiRivalsByTeamIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportRivalsByTeamIdResponse> {
            return localVarFp.rivalsByTeamId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiRoundByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundById(requestParameters: SportApiRoundByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportRoundByIdResponse> {
            return localVarFp.roundById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {SportApiRoundsAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundsAll(requestParameters: SportApiRoundsAllRequest, options?: AxiosRequestConfig): AxiosPromise<SportRoundsAllResponse> {
            return localVarFp.roundsAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Season ID
         * @param {SportApiRoundsBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundsBySeasonId(requestParameters: SportApiRoundsBySeasonIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportRoundsBySeasonIdResponse> {
            return localVarFp.roundsBySeasonId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {SportApiRoundsSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundsSearch(requestParameters: SportApiRoundsSearchRequest, options?: AxiosRequestConfig): AxiosPromise<SportRoundsSearchResponse> {
            return localVarFp.roundsSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Season ID
         * @param {SportApiSchedulesBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesBySeasonId(requestParameters: SportApiSchedulesBySeasonIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportSchedulesBySeasonIdResponse> {
            return localVarFp.schedulesBySeasonId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Team and Season ID
         * @param {SportApiSchedulesByTeamAndSeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesByTeamAndSeasonId(requestParameters: SportApiSchedulesByTeamAndSeasonIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportSchedulesByTeamAndSeasonIdResponse> {
            return localVarFp.schedulesByTeamAndSeasonId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Team ID
         * @param {SportApiSchedulesByTeamIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesByTeamId(requestParameters: SportApiSchedulesByTeamIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportSchedulesByTeamIdResponse> {
            return localVarFp.schedulesByTeamId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiSeasonByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonById(requestParameters: SportApiSeasonByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportSeasonByIdResponse> {
            return localVarFp.seasonById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {SportApiSeasonsAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsAll(requestParameters: SportApiSeasonsAllRequest, options?: AxiosRequestConfig): AxiosPromise<SportSeasonsAllResponse> {
            return localVarFp.seasonsAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Team ID
         * @param {SportApiSeasonsByTeamIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsByTeamId(requestParameters: SportApiSeasonsByTeamIdRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.seasonsByTeamId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {SportApiSeasonsSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsSearch(requestParameters: SportApiSeasonsSearchRequest, options?: AxiosRequestConfig): AxiosPromise<SportSeasonsSearchResponse> {
            return localVarFp.seasonsSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Season and Team ID
         * @param {SportApiSquadsBySeasonAndTeamIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        squadsBySeasonAndTeamId(requestParameters: SportApiSquadsBySeasonAndTeamIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportSquadsBySeasonAndTeamIdResponse> {
            return localVarFp.squadsBySeasonAndTeamId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Team ID
         * @param {SportApiSquadsByTeamIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        squadsByTeamId(requestParameters: SportApiSquadsByTeamIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportSquadsByTeamIdResponse> {
            return localVarFp.squadsByTeamId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiStageByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stageById(requestParameters: SportApiStageByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportStageByIdResponse> {
            return localVarFp.stageById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {SportApiStagesAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stagesAll(requestParameters: SportApiStagesAllRequest, options?: AxiosRequestConfig): AxiosPromise<SportStagesAllResponse> {
            return localVarFp.stagesAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Season ID
         * @param {SportApiStagesBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stagesBySeasonId(requestParameters: SportApiStagesBySeasonIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportStagesBySeasonIdResponse> {
            return localVarFp.stagesBySeasonId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {SportApiStagesSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stagesSearch(requestParameters: SportApiStagesSearchRequest, options?: AxiosRequestConfig): AxiosPromise<SportStagesSearchResponse> {
            return localVarFp.stagesSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Correction by Season ID
         * @param {SportApiStandingCorrectionsBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        standingCorrectionsBySeasonId(requestParameters: SportApiStandingCorrectionsBySeasonIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportStandingCorrectionsBySeasonIdResponse> {
            return localVarFp.standingCorrectionsBySeasonId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {SportApiStandingsAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        standingsAll(requestParameters: SportApiStandingsAllRequest, options?: AxiosRequestConfig): AxiosPromise<SportStandingsAllResponse> {
            return localVarFp.standingsAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Round ID
         * @param {SportApiStandingsByRoundIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        standingsByRoundId(requestParameters: SportApiStandingsByRoundIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportStandingsByRoundIdResponse> {
            return localVarFp.standingsByRoundId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Season ID
         * @param {SportApiStandingsBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        standingsBySeasonId(requestParameters: SportApiStandingsBySeasonIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportStandingsBySeasonIdResponse> {
            return localVarFp.standingsBySeasonId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By League ID
         * @param {SportApiStandingsLiveByLeagueIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        standingsLiveByLeagueId(requestParameters: SportApiStandingsLiveByLeagueIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportStandingsLiveByLeagueIdResponse> {
            return localVarFp.standingsLiveByLeagueId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiStateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stateById(requestParameters: SportApiStateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportStateByIdResponse> {
            return localVarFp.stateById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Sport
         * @param {SportApiStatesBySportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statesBySport(requestParameters: SportApiStatesBySportRequest, options?: AxiosRequestConfig): AxiosPromise<SportStatesBySportResponse> {
            return localVarFp.statesBySport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {SportApiTeamsAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsAll(requestParameters: SportApiTeamsAllRequest, options?: AxiosRequestConfig): AxiosPromise<SportTeamsAllResponse> {
            return localVarFp.teamsAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Country ID
         * @param {SportApiTeamsByCountryIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsByCountryId(requestParameters: SportApiTeamsByCountryIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportTeamsByCountryIdResponse> {
            return localVarFp.teamsByCountryId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiTeamsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsById(requestParameters: SportApiTeamsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportTeamsByIdResponse> {
            return localVarFp.teamsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Season ID
         * @param {SportApiTeamsBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsBySeasonId(requestParameters: SportApiTeamsBySeasonIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportTeamsBySeasonIdResponse> {
            return localVarFp.teamsBySeasonId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {SportApiTeamsSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsSearch(requestParameters: SportApiTeamsSearchRequest, options?: AxiosRequestConfig): AxiosPromise<SportTeamsSearchResponse> {
            return localVarFp.teamsSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Season ID
         * @param {SportApiTopScorersBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topScorersBySeasonId(requestParameters: SportApiTopScorersBySeasonIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportTopScorersBySeasonIdResponse> {
            return localVarFp.topScorersBySeasonId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Stage ID
         * @param {SportApiTopScorersByStageIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topScorersByStageId(requestParameters: SportApiTopScorersByStageIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportTopScorersByStageIdResponse> {
            return localVarFp.topScorersByStageId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Date Range
         * @param {SportApiTranfersByDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tranfersByDateRange(requestParameters: SportApiTranfersByDateRangeRequest, options?: AxiosRequestConfig): AxiosPromise<SportTranfersByDateRangeResponse> {
            return localVarFp.tranfersByDateRange(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiTransferByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferById(requestParameters: SportApiTransferByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportTransferByIdResponse> {
            return localVarFp.transferById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {SportApiTransfersAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfersAll(requestParameters: SportApiTransfersAllRequest, options?: AxiosRequestConfig): AxiosPromise<SportTransfersAllResponse> {
            return localVarFp.transfersAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Player ID
         * @param {SportApiTransfersByPlayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfersByPlayerId(requestParameters: SportApiTransfersByPlayerIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportTransfersByPlayerIdResponse> {
            return localVarFp.transfersByPlayerId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Team ID
         * @param {SportApiTransfersByTeamIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfersByTeamId(requestParameters: SportApiTransfersByTeamIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportTransfersByTeamIdResponse> {
            return localVarFp.transfersByTeamId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Last Updated
         * @param {SportApiTransfersLatestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfersLatest(requestParameters: SportApiTransfersLatestRequest, options?: AxiosRequestConfig): AxiosPromise<SportTransfersLatestResponse> {
            return localVarFp.transfersLatest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiTvStationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tvStationById(requestParameters: SportApiTvStationByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportTvStationByIdResponse> {
            return localVarFp.tvStationById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {SportApiTvStationsAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tvStationsAll(requestParameters: SportApiTvStationsAllRequest, options?: AxiosRequestConfig): AxiosPromise<SportTvStationsAllResponse> {
            return localVarFp.tvStationsAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Fixture ID
         * @param {SportApiTvStationsByFixtureIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tvStationsByFixtureId(requestParameters: SportApiTvStationsByFixtureIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportTvStationsByFixtureIdResponse> {
            return localVarFp.tvStationsByFixtureId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By ID
         * @param {SportApiVenueByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venueById(requestParameters: SportApiVenueByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportVenueByIdResponse> {
            return localVarFp.venueById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {SportApiVenuesAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venuesAll(requestParameters: SportApiVenuesAllRequest, options?: AxiosRequestConfig): AxiosPromise<SportVenuesAllResponse> {
            return localVarFp.venuesAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Season ID
         * @param {SportApiVenuesBySeasonIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venuesBySeasonId(requestParameters: SportApiVenuesBySeasonIdRequest, options?: AxiosRequestConfig): AxiosPromise<SportVenuesBySeasonIdResponse> {
            return localVarFp.venuesBySeasonId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {SportApiVenuesSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        venuesSearch(requestParameters: SportApiVenuesSearchRequest, options?: AxiosRequestConfig): AxiosPromise<SportVenuesSearchResponse> {
            return localVarFp.venuesSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for coachById operation in SportApi.
 * @export
 * @interface SportApiCoachByIdRequest
 */
export type SportApiCoachByIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiCoachById
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiCoachById
    */
    readonly sport: string
    
    /**
    * The ID of the coach you want to retrieve.
    * @type {number}
    * @memberof SportApiCoachById
    */
    readonly coachId: number
    
}

/**
 * Request parameters for coachesAll operation in SportApi.
 * @export
 * @interface SportApiCoachesAllRequest
 */
export type SportApiCoachesAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiCoachesAll
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiCoachesAll
    */
    readonly sport: string
    
}

/**
 * Request parameters for coachesByCountryId operation in SportApi.
 * @export
 * @interface SportApiCoachesByCountryIdRequest
 */
export type SportApiCoachesByCountryIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiCoachesByCountryId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiCoachesByCountryId
    */
    readonly sport: string
    
    /**
    * The ID of the country you want to retrieve coaches from.
    * @type {number}
    * @memberof SportApiCoachesByCountryId
    */
    readonly countryId: number
    
}

/**
 * Request parameters for coachesLatest operation in SportApi.
 * @export
 * @interface SportApiCoachesLatestRequest
 */
export type SportApiCoachesLatestRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiCoachesLatest
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiCoachesLatest
    */
    readonly sport: string
    
}

/**
 * Request parameters for coachesSearch operation in SportApi.
 * @export
 * @interface SportApiCoachesSearchRequest
 */
export type SportApiCoachesSearchRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiCoachesSearch
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiCoachesSearch
    */
    readonly sport: string
    
    /**
    * The name you want to search on.
    * @type {string}
    * @memberof SportApiCoachesSearch
    */
    readonly name: string
    
}

/**
 * Request parameters for commentariesAll operation in SportApi.
 * @export
 * @interface SportApiCommentariesAllRequest
 */
export type SportApiCommentariesAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiCommentariesAll
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiCommentariesAll
    */
    readonly sport: string
    
}

/**
 * Request parameters for commentariesByFixtureId operation in SportApi.
 * @export
 * @interface SportApiCommentariesByFixtureIdRequest
 */
export type SportApiCommentariesByFixtureIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiCommentariesByFixtureId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiCommentariesByFixtureId
    */
    readonly sport: string
    
    /**
    * The ID of the fixture you want to retrieve commentaries from.
    * @type {number}
    * @memberof SportApiCommentariesByFixtureId
    */
    readonly fixtureId: number
    
}

/**
 * Request parameters for fixtureByDateRangeForTeam operation in SportApi.
 * @export
 * @interface SportApiFixtureByDateRangeForTeamRequest
 */
export type SportApiFixtureByDateRangeForTeamRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiFixtureByDateRangeForTeam
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiFixtureByDateRangeForTeam
    */
    readonly sport: string
    
    /**
    * 
    * @type {string}
    * @memberof SportApiFixtureByDateRangeForTeam
    */
    readonly startDate: string
    
    /**
    * 
    * @type {string}
    * @memberof SportApiFixtureByDateRangeForTeam
    */
    readonly endDate: string
    
    /**
    * 
    * @type {string}
    * @memberof SportApiFixtureByDateRangeForTeam
    */
    readonly teamId: string
    
}

/**
 * Request parameters for fixtureById operation in SportApi.
 * @export
 * @interface SportApiFixtureByIdRequest
 */
export type SportApiFixtureByIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiFixtureById
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiFixtureById
    */
    readonly sport: string
    
    /**
    * The ID of the fixture you want to retrieve.
    * @type {number}
    * @memberof SportApiFixtureById
    */
    readonly fixtureId: number
    
}

/**
 * Request parameters for fixturesAll operation in SportApi.
 * @export
 * @interface SportApiFixturesAllRequest
 */
export type SportApiFixturesAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiFixturesAll
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiFixturesAll
    */
    readonly sport: string
    
}

/**
 * Request parameters for fixturesByDate operation in SportApi.
 * @export
 * @interface SportApiFixturesByDateRequest
 */
export type SportApiFixturesByDateRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiFixturesByDate
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiFixturesByDate
    */
    readonly sport: string
    
    /**
    * The date you want to retrieve fixtures from.
    * @type {string}
    * @memberof SportApiFixturesByDate
    */
    readonly date: string
    
}

/**
 * Request parameters for fixturesByDateRange operation in SportApi.
 * @export
 * @interface SportApiFixturesByDateRangeRequest
 */
export type SportApiFixturesByDateRangeRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiFixturesByDateRange
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiFixturesByDateRange
    */
    readonly sport: string
    
    /**
    * The start date you want to retrieve fixtures from.
    * @type {string}
    * @memberof SportApiFixturesByDateRange
    */
    readonly startDate: string
    
    /**
    * The end date you want to retrieve fixtures from.
    * @type {string}
    * @memberof SportApiFixturesByDateRange
    */
    readonly endDate: string
    
}

/**
 * Request parameters for fixturesByIds operation in SportApi.
 * @export
 * @interface SportApiFixturesByIdsRequest
 */
export type SportApiFixturesByIdsRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiFixturesByIds
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiFixturesByIds
    */
    readonly sport: string
    
    /**
    * The IDs you want to retrieve.
    * @type {string}
    * @memberof SportApiFixturesByIds
    */
    readonly fixtureIds: string
    
}

/**
 * Request parameters for fixturesHeadToHead operation in SportApi.
 * @export
 * @interface SportApiFixturesHeadToHeadRequest
 */
export type SportApiFixturesHeadToHeadRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiFixturesHeadToHead
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiFixturesHeadToHead
    */
    readonly sport: string
    
    /**
    * The ID of the first team retrieve fixtures from.
    * @type {number}
    * @memberof SportApiFixturesHeadToHead
    */
    readonly firstTeam: number
    
    /**
    * The ID of the second team retrieve fixtures from.
    * @type {number}
    * @memberof SportApiFixturesHeadToHead
    */
    readonly secondTeam: number
    
}

/**
 * Request parameters for fixturesLatest operation in SportApi.
 * @export
 * @interface SportApiFixturesLatestRequest
 */
export type SportApiFixturesLatestRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiFixturesLatest
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiFixturesLatest
    */
    readonly sport: string
    
}

/**
 * Request parameters for fixturesSearch operation in SportApi.
 * @export
 * @interface SportApiFixturesSearchRequest
 */
export type SportApiFixturesSearchRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiFixturesSearch
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiFixturesSearch
    */
    readonly sport: string
    
    /**
    * The name you want search on.
    * @type {string}
    * @memberof SportApiFixturesSearch
    */
    readonly name: string
    
}

/**
 * Request parameters for leagueById operation in SportApi.
 * @export
 * @interface SportApiLeagueByIdRequest
 */
export type SportApiLeagueByIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiLeagueById
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiLeagueById
    */
    readonly sport: string
    
    /**
    * The ID of the league you want to retrieve.
    * @type {number}
    * @memberof SportApiLeagueById
    */
    readonly leagueId: number
    
}

/**
 * Request parameters for leagueEnrichments operation in SportApi.
 * @export
 * @interface SportApiLeagueEnrichmentsRequest
 */
export type SportApiLeagueEnrichmentsRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiLeagueEnrichments
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiLeagueEnrichments
    */
    readonly sport: string
    
    /**
    * The ID of the league you want to retrieve enrichments from.
    * @type {number}
    * @memberof SportApiLeagueEnrichments
    */
    readonly leagueId: number
    
}

/**
 * Request parameters for leagueShirts operation in SportApi.
 * @export
 * @interface SportApiLeagueShirtsRequest
 */
export type SportApiLeagueShirtsRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiLeagueShirts
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiLeagueShirts
    */
    readonly sport: string
    
    /**
    * The ID of the league you want to retrieve.
    * @type {number}
    * @memberof SportApiLeagueShirts
    */
    readonly leagueId: number
    
}

/**
 * Request parameters for leaguesAll operation in SportApi.
 * @export
 * @interface SportApiLeaguesAllRequest
 */
export type SportApiLeaguesAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiLeaguesAll
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiLeaguesAll
    */
    readonly sport: string
    
}

/**
 * Request parameters for leaguesByCountryId operation in SportApi.
 * @export
 * @interface SportApiLeaguesByCountryIdRequest
 */
export type SportApiLeaguesByCountryIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiLeaguesByCountryId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiLeaguesByCountryId
    */
    readonly sport: string
    
    /**
    * The ID of the country you want to retrieve leagues from.
    * @type {number}
    * @memberof SportApiLeaguesByCountryId
    */
    readonly countryId: number
    
}

/**
 * Request parameters for leaguesByDate operation in SportApi.
 * @export
 * @interface SportApiLeaguesByDateRequest
 */
export type SportApiLeaguesByDateRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiLeaguesByDate
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiLeaguesByDate
    */
    readonly sport: string
    
    /**
    * The date of fixtures you want to retrieve leagues from.
    * @type {string}
    * @memberof SportApiLeaguesByDate
    */
    readonly date: string
    
}

/**
 * Request parameters for leaguesByTeamId operation in SportApi.
 * @export
 * @interface SportApiLeaguesByTeamIdRequest
 */
export type SportApiLeaguesByTeamIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiLeaguesByTeamId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiLeaguesByTeamId
    */
    readonly sport: string
    
    /**
    * The ID of the team you want to retrieve leagues from.
    * @type {number}
    * @memberof SportApiLeaguesByTeamId
    */
    readonly teamId: number
    
}

/**
 * Request parameters for leaguesCurrentByTeamId operation in SportApi.
 * @export
 * @interface SportApiLeaguesCurrentByTeamIdRequest
 */
export type SportApiLeaguesCurrentByTeamIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiLeaguesCurrentByTeamId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiLeaguesCurrentByTeamId
    */
    readonly sport: string
    
    /**
    * The ID of the team you want to retrieve current leagues from.
    * @type {number}
    * @memberof SportApiLeaguesCurrentByTeamId
    */
    readonly teamId: number
    
}

/**
 * Request parameters for leaguesLive operation in SportApi.
 * @export
 * @interface SportApiLeaguesLiveRequest
 */
export type SportApiLeaguesLiveRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiLeaguesLive
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiLeaguesLive
    */
    readonly sport: string
    
}

/**
 * Request parameters for leaguesSearch operation in SportApi.
 * @export
 * @interface SportApiLeaguesSearchRequest
 */
export type SportApiLeaguesSearchRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiLeaguesSearch
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiLeaguesSearch
    */
    readonly sport: string
    
    /**
    * The name you want to search on.
    * @type {string}
    * @memberof SportApiLeaguesSearch
    */
    readonly name: string
    
}

/**
 * Request parameters for livescoresAll operation in SportApi.
 * @export
 * @interface SportApiLivescoresAllRequest
 */
export type SportApiLivescoresAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiLivescoresAll
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiLivescoresAll
    */
    readonly sport: string
    
}

/**
 * Request parameters for livescoresAllInPlay operation in SportApi.
 * @export
 * @interface SportApiLivescoresAllInPlayRequest
 */
export type SportApiLivescoresAllInPlayRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiLivescoresAllInPlay
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiLivescoresAllInPlay
    */
    readonly sport: string
    
}

/**
 * Request parameters for livescoresLatest operation in SportApi.
 * @export
 * @interface SportApiLivescoresLatestRequest
 */
export type SportApiLivescoresLatestRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiLivescoresLatest
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiLivescoresLatest
    */
    readonly sport: string
    
}

/**
 * Request parameters for newsAllPostMatch operation in SportApi.
 * @export
 * @interface SportApiNewsAllPostMatchRequest
 */
export type SportApiNewsAllPostMatchRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiNewsAllPostMatch
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiNewsAllPostMatch
    */
    readonly sport: string
    
}

/**
 * Request parameters for newsAllPreMatch operation in SportApi.
 * @export
 * @interface SportApiNewsAllPreMatchRequest
 */
export type SportApiNewsAllPreMatchRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiNewsAllPreMatch
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiNewsAllPreMatch
    */
    readonly sport: string
    
}

/**
 * Request parameters for newsPostMatchBySeasonId operation in SportApi.
 * @export
 * @interface SportApiNewsPostMatchBySeasonIdRequest
 */
export type SportApiNewsPostMatchBySeasonIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiNewsPostMatchBySeasonId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiNewsPostMatchBySeasonId
    */
    readonly sport: string
    
    /**
    * The ID of the season you want to retrieve post-match news from.
    * @type {number}
    * @memberof SportApiNewsPostMatchBySeasonId
    */
    readonly seasonId: number
    
}

/**
 * Request parameters for newsPreMatchBySeasonId operation in SportApi.
 * @export
 * @interface SportApiNewsPreMatchBySeasonIdRequest
 */
export type SportApiNewsPreMatchBySeasonIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiNewsPreMatchBySeasonId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiNewsPreMatchBySeasonId
    */
    readonly sport: string
    
    /**
    * The ID of the season you want to retrieve post-match news from.
    * @type {number}
    * @memberof SportApiNewsPreMatchBySeasonId
    */
    readonly seasonId: number
    
}

/**
 * Request parameters for newsUpcomingPostMatch operation in SportApi.
 * @export
 * @interface SportApiNewsUpcomingPostMatchRequest
 */
export type SportApiNewsUpcomingPostMatchRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiNewsUpcomingPostMatch
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiNewsUpcomingPostMatch
    */
    readonly sport: string
    
}

/**
 * Request parameters for newsUpcomingPreMatch operation in SportApi.
 * @export
 * @interface SportApiNewsUpcomingPreMatchRequest
 */
export type SportApiNewsUpcomingPreMatchRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiNewsUpcomingPreMatch
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiNewsUpcomingPreMatch
    */
    readonly sport: string
    
}

/**
 * Request parameters for oddsAllInPlay operation in SportApi.
 * @export
 * @interface SportApiOddsAllInPlayRequest
 */
export type SportApiOddsAllInPlayRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiOddsAllInPlay
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiOddsAllInPlay
    */
    readonly sport: string
    
}

/**
 * Request parameters for oddsAllPreMatch operation in SportApi.
 * @export
 * @interface SportApiOddsAllPreMatchRequest
 */
export type SportApiOddsAllPreMatchRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiOddsAllPreMatch
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiOddsAllPreMatch
    */
    readonly sport: string
    
}

/**
 * Request parameters for oddsInPlayByFixtureAndBookmakerId operation in SportApi.
 * @export
 * @interface SportApiOddsInPlayByFixtureAndBookmakerIdRequest
 */
export type SportApiOddsInPlayByFixtureAndBookmakerIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiOddsInPlayByFixtureAndBookmakerId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiOddsInPlayByFixtureAndBookmakerId
    */
    readonly sport: string
    
    /**
    * The ID of the fixture you want to retrieve in-play odds from.
    * @type {number}
    * @memberof SportApiOddsInPlayByFixtureAndBookmakerId
    */
    readonly fixtureId: number
    
    /**
    * The ID of the bookmaker you want to retrieve in-play odds from.
    * @type {number}
    * @memberof SportApiOddsInPlayByFixtureAndBookmakerId
    */
    readonly bookmakerId: number
    
}

/**
 * Request parameters for oddsInPlayByFixtureAndMarketId operation in SportApi.
 * @export
 * @interface SportApiOddsInPlayByFixtureAndMarketIdRequest
 */
export type SportApiOddsInPlayByFixtureAndMarketIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiOddsInPlayByFixtureAndMarketId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiOddsInPlayByFixtureAndMarketId
    */
    readonly sport: string
    
    /**
    * The ID of the fixture you want to retrieve in-play odds from.
    * @type {number}
    * @memberof SportApiOddsInPlayByFixtureAndMarketId
    */
    readonly fixtureId: number
    
    /**
    * The ID of the market you want to retrieve in-play odds from.
    * @type {number}
    * @memberof SportApiOddsInPlayByFixtureAndMarketId
    */
    readonly marketId: number
    
}

/**
 * Request parameters for oddsInPlayByFixtureId operation in SportApi.
 * @export
 * @interface SportApiOddsInPlayByFixtureIdRequest
 */
export type SportApiOddsInPlayByFixtureIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiOddsInPlayByFixtureId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiOddsInPlayByFixtureId
    */
    readonly sport: string
    
    /**
    * The ID of the fixture you want to retrieve in-play odds from.
    * @type {number}
    * @memberof SportApiOddsInPlayByFixtureId
    */
    readonly fixtureId: number
    
}

/**
 * Request parameters for oddsLatestInPlay operation in SportApi.
 * @export
 * @interface SportApiOddsLatestInPlayRequest
 */
export type SportApiOddsLatestInPlayRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiOddsLatestInPlay
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiOddsLatestInPlay
    */
    readonly sport: string
    
}

/**
 * Request parameters for oddsLatestPreMatch operation in SportApi.
 * @export
 * @interface SportApiOddsLatestPreMatchRequest
 */
export type SportApiOddsLatestPreMatchRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiOddsLatestPreMatch
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiOddsLatestPreMatch
    */
    readonly sport: string
    
}

/**
 * Request parameters for oddsPreMatchByFixtureAndBookmakerId operation in SportApi.
 * @export
 * @interface SportApiOddsPreMatchByFixtureAndBookmakerIdRequest
 */
export type SportApiOddsPreMatchByFixtureAndBookmakerIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiOddsPreMatchByFixtureAndBookmakerId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiOddsPreMatchByFixtureAndBookmakerId
    */
    readonly sport: string
    
    /**
    * The ID of the fixture you want to retrieve pre-match odds from.
    * @type {number}
    * @memberof SportApiOddsPreMatchByFixtureAndBookmakerId
    */
    readonly fixtureId: number
    
    /**
    * The ID of the bookmaker you want to retrieve pre-match odds from.
    * @type {number}
    * @memberof SportApiOddsPreMatchByFixtureAndBookmakerId
    */
    readonly bookmakerId: number
    
}

/**
 * Request parameters for oddsPreMatchByFixtureAndMarketId operation in SportApi.
 * @export
 * @interface SportApiOddsPreMatchByFixtureAndMarketIdRequest
 */
export type SportApiOddsPreMatchByFixtureAndMarketIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiOddsPreMatchByFixtureAndMarketId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiOddsPreMatchByFixtureAndMarketId
    */
    readonly sport: string
    
    /**
    * The ID of the fixture you want to retrieve pre-match odds from.
    * @type {number}
    * @memberof SportApiOddsPreMatchByFixtureAndMarketId
    */
    readonly fixtureId: number
    
    /**
    * The ID of the market you want to retrieve pre-match odds from.
    * @type {number}
    * @memberof SportApiOddsPreMatchByFixtureAndMarketId
    */
    readonly marketId: number
    
}

/**
 * Request parameters for oddsPreMatchByFixtureId operation in SportApi.
 * @export
 * @interface SportApiOddsPreMatchByFixtureIdRequest
 */
export type SportApiOddsPreMatchByFixtureIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiOddsPreMatchByFixtureId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiOddsPreMatchByFixtureId
    */
    readonly sport: string
    
    /**
    * The ID of the fixture you want to retrieve pre-match odds from.
    * @type {number}
    * @memberof SportApiOddsPreMatchByFixtureId
    */
    readonly fixtureId: number
    
}

/**
 * Request parameters for playerById operation in SportApi.
 * @export
 * @interface SportApiPlayerByIdRequest
 */
export type SportApiPlayerByIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiPlayerById
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiPlayerById
    */
    readonly sport: string
    
    /**
    * The ID of the player you want to retrieve.
    * @type {number}
    * @memberof SportApiPlayerById
    */
    readonly playerId: number
    
}

/**
 * Request parameters for playersAll operation in SportApi.
 * @export
 * @interface SportApiPlayersAllRequest
 */
export type SportApiPlayersAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiPlayersAll
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiPlayersAll
    */
    readonly sport: string
    
}

/**
 * Request parameters for playersByCountryId operation in SportApi.
 * @export
 * @interface SportApiPlayersByCountryIdRequest
 */
export type SportApiPlayersByCountryIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiPlayersByCountryId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiPlayersByCountryId
    */
    readonly sport: string
    
    /**
    * The ID of the country you want to retrieve players from.
    * @type {number}
    * @memberof SportApiPlayersByCountryId
    */
    readonly countryId: number
    
}

/**
 * Request parameters for playersLatest operation in SportApi.
 * @export
 * @interface SportApiPlayersLatestRequest
 */
export type SportApiPlayersLatestRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiPlayersLatest
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiPlayersLatest
    */
    readonly sport: string
    
}

/**
 * Request parameters for playersSearch operation in SportApi.
 * @export
 * @interface SportApiPlayersSearchRequest
 */
export type SportApiPlayersSearchRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiPlayersSearch
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiPlayersSearch
    */
    readonly sport: string
    
    /**
    * The name you want to search on.
    * @type {string}
    * @memberof SportApiPlayersSearch
    */
    readonly name: string
    
}

/**
 * Request parameters for predictionsAll operation in SportApi.
 * @export
 * @interface SportApiPredictionsAllRequest
 */
export type SportApiPredictionsAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiPredictionsAll
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiPredictionsAll
    */
    readonly sport: string
    
}

/**
 * Request parameters for predictionsAllValueBets operation in SportApi.
 * @export
 * @interface SportApiPredictionsAllValueBetsRequest
 */
export type SportApiPredictionsAllValueBetsRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiPredictionsAllValueBets
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiPredictionsAllValueBets
    */
    readonly sport: string
    
}

/**
 * Request parameters for predictionsByFixtureId operation in SportApi.
 * @export
 * @interface SportApiPredictionsByFixtureIdRequest
 */
export type SportApiPredictionsByFixtureIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiPredictionsByFixtureId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiPredictionsByFixtureId
    */
    readonly sport: string
    
    /**
    * The ID of the fixture you want to retrieve predictions from.
    * @type {number}
    * @memberof SportApiPredictionsByFixtureId
    */
    readonly fixtureId: number
    
}

/**
 * Request parameters for predictionsValueBetsByFixtureId operation in SportApi.
 * @export
 * @interface SportApiPredictionsValueBetsByFixtureIdRequest
 */
export type SportApiPredictionsValueBetsByFixtureIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiPredictionsValueBetsByFixtureId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiPredictionsValueBetsByFixtureId
    */
    readonly sport: string
    
    /**
    * The ID of the fixture you want to retrieve value bets from.
    * @type {number}
    * @memberof SportApiPredictionsValueBetsByFixtureId
    */
    readonly fixtureId: number
    
}

/**
 * Request parameters for refereeById operation in SportApi.
 * @export
 * @interface SportApiRefereeByIdRequest
 */
export type SportApiRefereeByIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiRefereeById
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiRefereeById
    */
    readonly sport: string
    
    /**
    * The ID of the referee you want to retrieve.
    * @type {number}
    * @memberof SportApiRefereeById
    */
    readonly refereeId: number
    
}

/**
 * Request parameters for refereesAll operation in SportApi.
 * @export
 * @interface SportApiRefereesAllRequest
 */
export type SportApiRefereesAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiRefereesAll
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiRefereesAll
    */
    readonly sport: string
    
}

/**
 * Request parameters for refereesByCountryId operation in SportApi.
 * @export
 * @interface SportApiRefereesByCountryIdRequest
 */
export type SportApiRefereesByCountryIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiRefereesByCountryId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiRefereesByCountryId
    */
    readonly sport: string
    
    /**
    * The ID of the country you want to retrieve referees from.
    * @type {number}
    * @memberof SportApiRefereesByCountryId
    */
    readonly countryId: number
    
}

/**
 * Request parameters for refereesBySeasonId operation in SportApi.
 * @export
 * @interface SportApiRefereesBySeasonIdRequest
 */
export type SportApiRefereesBySeasonIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiRefereesBySeasonId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiRefereesBySeasonId
    */
    readonly sport: string
    
    /**
    * The ID of the season you want to retrieve referees from.
    * @type {number}
    * @memberof SportApiRefereesBySeasonId
    */
    readonly seasonId: number
    
}

/**
 * Request parameters for refereesSearch operation in SportApi.
 * @export
 * @interface SportApiRefereesSearchRequest
 */
export type SportApiRefereesSearchRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiRefereesSearch
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiRefereesSearch
    */
    readonly sport: string
    
    /**
    * The name you want to search on.
    * @type {string}
    * @memberof SportApiRefereesSearch
    */
    readonly name: string
    
}

/**
 * Request parameters for rivalsAll operation in SportApi.
 * @export
 * @interface SportApiRivalsAllRequest
 */
export type SportApiRivalsAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiRivalsAll
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiRivalsAll
    */
    readonly sport: string
    
}

/**
 * Request parameters for rivalsByTeamId operation in SportApi.
 * @export
 * @interface SportApiRivalsByTeamIdRequest
 */
export type SportApiRivalsByTeamIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiRivalsByTeamId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiRivalsByTeamId
    */
    readonly sport: string
    
    /**
    * The ID of the team you want to retrieve rivals from.
    * @type {number}
    * @memberof SportApiRivalsByTeamId
    */
    readonly teamId: number
    
}

/**
 * Request parameters for roundById operation in SportApi.
 * @export
 * @interface SportApiRoundByIdRequest
 */
export type SportApiRoundByIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiRoundById
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiRoundById
    */
    readonly sport: string
    
    /**
    * The ID of the round you want to retrieve.
    * @type {number}
    * @memberof SportApiRoundById
    */
    readonly roundId: number
    
}

/**
 * Request parameters for roundsAll operation in SportApi.
 * @export
 * @interface SportApiRoundsAllRequest
 */
export type SportApiRoundsAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiRoundsAll
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiRoundsAll
    */
    readonly sport: string
    
}

/**
 * Request parameters for roundsBySeasonId operation in SportApi.
 * @export
 * @interface SportApiRoundsBySeasonIdRequest
 */
export type SportApiRoundsBySeasonIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiRoundsBySeasonId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiRoundsBySeasonId
    */
    readonly sport: string
    
    /**
    * The ID of the season you want to retrieve rounds from.
    * @type {number}
    * @memberof SportApiRoundsBySeasonId
    */
    readonly seasonId: number
    
}

/**
 * Request parameters for roundsSearch operation in SportApi.
 * @export
 * @interface SportApiRoundsSearchRequest
 */
export type SportApiRoundsSearchRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiRoundsSearch
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiRoundsSearch
    */
    readonly sport: string
    
    /**
    * The name you want to search on.
    * @type {number}
    * @memberof SportApiRoundsSearch
    */
    readonly name: number
    
}

/**
 * Request parameters for schedulesBySeasonId operation in SportApi.
 * @export
 * @interface SportApiSchedulesBySeasonIdRequest
 */
export type SportApiSchedulesBySeasonIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiSchedulesBySeasonId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiSchedulesBySeasonId
    */
    readonly sport: string
    
    /**
    * 
    * @type {number}
    * @memberof SportApiSchedulesBySeasonId
    */
    readonly seasonId: number
    
}

/**
 * Request parameters for schedulesByTeamAndSeasonId operation in SportApi.
 * @export
 * @interface SportApiSchedulesByTeamAndSeasonIdRequest
 */
export type SportApiSchedulesByTeamAndSeasonIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiSchedulesByTeamAndSeasonId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiSchedulesByTeamAndSeasonId
    */
    readonly sport: string
    
    /**
    * The ID of the season you want to retrieve schedule from.
    * @type {number}
    * @memberof SportApiSchedulesByTeamAndSeasonId
    */
    readonly seasonId: number
    
    /**
    * The ID of the team you want to retrieve schedule from.
    * @type {number}
    * @memberof SportApiSchedulesByTeamAndSeasonId
    */
    readonly teamId: number
    
}

/**
 * Request parameters for schedulesByTeamId operation in SportApi.
 * @export
 * @interface SportApiSchedulesByTeamIdRequest
 */
export type SportApiSchedulesByTeamIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiSchedulesByTeamId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiSchedulesByTeamId
    */
    readonly sport: string
    
    /**
    * The ID of the team you want to retrieve schedule from.
    * @type {number}
    * @memberof SportApiSchedulesByTeamId
    */
    readonly teamId: number
    
}

/**
 * Request parameters for seasonById operation in SportApi.
 * @export
 * @interface SportApiSeasonByIdRequest
 */
export type SportApiSeasonByIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiSeasonById
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiSeasonById
    */
    readonly sport: string
    
    /**
    * The ID of the season you want to retrieve.
    * @type {number}
    * @memberof SportApiSeasonById
    */
    readonly seasonId: number
    
}

/**
 * Request parameters for seasonsAll operation in SportApi.
 * @export
 * @interface SportApiSeasonsAllRequest
 */
export type SportApiSeasonsAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiSeasonsAll
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiSeasonsAll
    */
    readonly sport: string
    
}

/**
 * Request parameters for seasonsByTeamId operation in SportApi.
 * @export
 * @interface SportApiSeasonsByTeamIdRequest
 */
export type SportApiSeasonsByTeamIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiSeasonsByTeamId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiSeasonsByTeamId
    */
    readonly sport: string
    
    /**
    * The ID of the team you want to retrieve seasons from.
    * @type {number}
    * @memberof SportApiSeasonsByTeamId
    */
    readonly teamId: number
    
}

/**
 * Request parameters for seasonsSearch operation in SportApi.
 * @export
 * @interface SportApiSeasonsSearchRequest
 */
export type SportApiSeasonsSearchRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiSeasonsSearch
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiSeasonsSearch
    */
    readonly sport: string
    
    /**
    * The name you want to search on.
    * @type {number}
    * @memberof SportApiSeasonsSearch
    */
    readonly name: number
    
}

/**
 * Request parameters for squadsBySeasonAndTeamId operation in SportApi.
 * @export
 * @interface SportApiSquadsBySeasonAndTeamIdRequest
 */
export type SportApiSquadsBySeasonAndTeamIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiSquadsBySeasonAndTeamId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiSquadsBySeasonAndTeamId
    */
    readonly sport: string
    
    /**
    * The ID of the season you want to retrieve squads from.
    * @type {number}
    * @memberof SportApiSquadsBySeasonAndTeamId
    */
    readonly seasonId: number
    
    /**
    * The ID of the team you want to retrieve squads from.
    * @type {number}
    * @memberof SportApiSquadsBySeasonAndTeamId
    */
    readonly teamId: number
    
}

/**
 * Request parameters for squadsByTeamId operation in SportApi.
 * @export
 * @interface SportApiSquadsByTeamIdRequest
 */
export type SportApiSquadsByTeamIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiSquadsByTeamId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiSquadsByTeamId
    */
    readonly sport: string
    
    /**
    * The ID of the team you want to retrieve squads from.
    * @type {number}
    * @memberof SportApiSquadsByTeamId
    */
    readonly teamId: number
    
}

/**
 * Request parameters for stageById operation in SportApi.
 * @export
 * @interface SportApiStageByIdRequest
 */
export type SportApiStageByIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiStageById
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiStageById
    */
    readonly sport: string
    
    /**
    * The ID of the stage you want to retrieve.
    * @type {number}
    * @memberof SportApiStageById
    */
    readonly stageId: number
    
}

/**
 * Request parameters for stagesAll operation in SportApi.
 * @export
 * @interface SportApiStagesAllRequest
 */
export type SportApiStagesAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiStagesAll
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiStagesAll
    */
    readonly sport: string
    
}

/**
 * Request parameters for stagesBySeasonId operation in SportApi.
 * @export
 * @interface SportApiStagesBySeasonIdRequest
 */
export type SportApiStagesBySeasonIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiStagesBySeasonId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiStagesBySeasonId
    */
    readonly sport: string
    
    /**
    * The ID of the season you want to retrieve stages from.
    * @type {number}
    * @memberof SportApiStagesBySeasonId
    */
    readonly seasonId: number
    
}

/**
 * Request parameters for stagesSearch operation in SportApi.
 * @export
 * @interface SportApiStagesSearchRequest
 */
export type SportApiStagesSearchRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiStagesSearch
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiStagesSearch
    */
    readonly sport: string
    
    /**
    * The name you want to search on.
    * @type {string}
    * @memberof SportApiStagesSearch
    */
    readonly name: string
    
}

/**
 * Request parameters for standingCorrectionsBySeasonId operation in SportApi.
 * @export
 * @interface SportApiStandingCorrectionsBySeasonIdRequest
 */
export type SportApiStandingCorrectionsBySeasonIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiStandingCorrectionsBySeasonId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiStandingCorrectionsBySeasonId
    */
    readonly sport: string
    
    /**
    * The ID of the season you want to retrieve standing corrections from.
    * @type {number}
    * @memberof SportApiStandingCorrectionsBySeasonId
    */
    readonly seasonId: number
    
}

/**
 * Request parameters for standingsAll operation in SportApi.
 * @export
 * @interface SportApiStandingsAllRequest
 */
export type SportApiStandingsAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiStandingsAll
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiStandingsAll
    */
    readonly sport: string
    
}

/**
 * Request parameters for standingsByRoundId operation in SportApi.
 * @export
 * @interface SportApiStandingsByRoundIdRequest
 */
export type SportApiStandingsByRoundIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiStandingsByRoundId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiStandingsByRoundId
    */
    readonly sport: string
    
    /**
    * The ID of the round you want to retrieve standing from.
    * @type {number}
    * @memberof SportApiStandingsByRoundId
    */
    readonly roundId: number
    
}

/**
 * Request parameters for standingsBySeasonId operation in SportApi.
 * @export
 * @interface SportApiStandingsBySeasonIdRequest
 */
export type SportApiStandingsBySeasonIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiStandingsBySeasonId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiStandingsBySeasonId
    */
    readonly sport: string
    
    /**
    * The ID of the season you want to retrieve standing from.
    * @type {number}
    * @memberof SportApiStandingsBySeasonId
    */
    readonly seasonId: number
    
}

/**
 * Request parameters for standingsLiveByLeagueId operation in SportApi.
 * @export
 * @interface SportApiStandingsLiveByLeagueIdRequest
 */
export type SportApiStandingsLiveByLeagueIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiStandingsLiveByLeagueId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiStandingsLiveByLeagueId
    */
    readonly sport: string
    
    /**
    * The ID of the league you want to retrieve standings from.
    * @type {number}
    * @memberof SportApiStandingsLiveByLeagueId
    */
    readonly leagueId: number
    
}

/**
 * Request parameters for stateById operation in SportApi.
 * @export
 * @interface SportApiStateByIdRequest
 */
export type SportApiStateByIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiStateById
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiStateById
    */
    readonly sport: string
    
    /**
    * The ID of the state you want to retrieve.
    * @type {number}
    * @memberof SportApiStateById
    */
    readonly stateId: number
    
}

/**
 * Request parameters for statesBySport operation in SportApi.
 * @export
 * @interface SportApiStatesBySportRequest
 */
export type SportApiStatesBySportRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiStatesBySport
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiStatesBySport
    */
    readonly sport: string
    
}

/**
 * Request parameters for teamsAll operation in SportApi.
 * @export
 * @interface SportApiTeamsAllRequest
 */
export type SportApiTeamsAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiTeamsAll
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiTeamsAll
    */
    readonly sport: string
    
}

/**
 * Request parameters for teamsByCountryId operation in SportApi.
 * @export
 * @interface SportApiTeamsByCountryIdRequest
 */
export type SportApiTeamsByCountryIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiTeamsByCountryId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiTeamsByCountryId
    */
    readonly sport: string
    
    /**
    * The ID of the country you want to retrieve teams from.
    * @type {number}
    * @memberof SportApiTeamsByCountryId
    */
    readonly countryId: number
    
}

/**
 * Request parameters for teamsById operation in SportApi.
 * @export
 * @interface SportApiTeamsByIdRequest
 */
export type SportApiTeamsByIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiTeamsById
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiTeamsById
    */
    readonly sport: string
    
    /**
    * The ID of the team you want to retrieve.
    * @type {number}
    * @memberof SportApiTeamsById
    */
    readonly teamId: number
    
}

/**
 * Request parameters for teamsBySeasonId operation in SportApi.
 * @export
 * @interface SportApiTeamsBySeasonIdRequest
 */
export type SportApiTeamsBySeasonIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiTeamsBySeasonId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiTeamsBySeasonId
    */
    readonly sport: string
    
    /**
    * The ID of the season you want to retrieve teams from.
    * @type {number}
    * @memberof SportApiTeamsBySeasonId
    */
    readonly seasonId: number
    
}

/**
 * Request parameters for teamsSearch operation in SportApi.
 * @export
 * @interface SportApiTeamsSearchRequest
 */
export type SportApiTeamsSearchRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiTeamsSearch
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiTeamsSearch
    */
    readonly sport: string
    
    /**
    * The name you want to search on.
    * @type {string}
    * @memberof SportApiTeamsSearch
    */
    readonly name: string
    
}

/**
 * Request parameters for topScorersBySeasonId operation in SportApi.
 * @export
 * @interface SportApiTopScorersBySeasonIdRequest
 */
export type SportApiTopScorersBySeasonIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiTopScorersBySeasonId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiTopScorersBySeasonId
    */
    readonly sport: string
    
    /**
    * The ID of the season you want to retrieve topscorers from.
    * @type {number}
    * @memberof SportApiTopScorersBySeasonId
    */
    readonly seasonId: number
    
}

/**
 * Request parameters for topScorersByStageId operation in SportApi.
 * @export
 * @interface SportApiTopScorersByStageIdRequest
 */
export type SportApiTopScorersByStageIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiTopScorersByStageId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiTopScorersByStageId
    */
    readonly sport: string
    
    /**
    * The ID of the stage you want to retrieve topscorers from.
    * @type {number}
    * @memberof SportApiTopScorersByStageId
    */
    readonly stageId: number
    
}

/**
 * Request parameters for tranfersByDateRange operation in SportApi.
 * @export
 * @interface SportApiTranfersByDateRangeRequest
 */
export type SportApiTranfersByDateRangeRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiTranfersByDateRange
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiTranfersByDateRange
    */
    readonly sport: string
    
    /**
    * The start date you want to retrieve transfers from.
    * @type {string}
    * @memberof SportApiTranfersByDateRange
    */
    readonly startDate: string
    
    /**
    * The end date you want to retrieve transfers from.
    * @type {string}
    * @memberof SportApiTranfersByDateRange
    */
    readonly endDate: string
    
}

/**
 * Request parameters for transferById operation in SportApi.
 * @export
 * @interface SportApiTransferByIdRequest
 */
export type SportApiTransferByIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiTransferById
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiTransferById
    */
    readonly sport: string
    
    /**
    * 
    * @type {number}
    * @memberof SportApiTransferById
    */
    readonly transferId: number
    
}

/**
 * Request parameters for transfersAll operation in SportApi.
 * @export
 * @interface SportApiTransfersAllRequest
 */
export type SportApiTransfersAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiTransfersAll
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiTransfersAll
    */
    readonly sport: string
    
}

/**
 * Request parameters for transfersByPlayerId operation in SportApi.
 * @export
 * @interface SportApiTransfersByPlayerIdRequest
 */
export type SportApiTransfersByPlayerIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiTransfersByPlayerId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiTransfersByPlayerId
    */
    readonly sport: string
    
    /**
    * The ID of the player you want to retrieve transfers from.
    * @type {number}
    * @memberof SportApiTransfersByPlayerId
    */
    readonly playerId: number
    
}

/**
 * Request parameters for transfersByTeamId operation in SportApi.
 * @export
 * @interface SportApiTransfersByTeamIdRequest
 */
export type SportApiTransfersByTeamIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiTransfersByTeamId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiTransfersByTeamId
    */
    readonly sport: string
    
    /**
    * The ID of the team you want to retrieve transfers from.
    * @type {number}
    * @memberof SportApiTransfersByTeamId
    */
    readonly teamId: number
    
}

/**
 * Request parameters for transfersLatest operation in SportApi.
 * @export
 * @interface SportApiTransfersLatestRequest
 */
export type SportApiTransfersLatestRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiTransfersLatest
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiTransfersLatest
    */
    readonly sport: string
    
}

/**
 * Request parameters for tvStationById operation in SportApi.
 * @export
 * @interface SportApiTvStationByIdRequest
 */
export type SportApiTvStationByIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiTvStationById
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiTvStationById
    */
    readonly sport: string
    
    /**
    * The ID of the tv station you want to retrieve.
    * @type {number}
    * @memberof SportApiTvStationById
    */
    readonly tvStationId: number
    
}

/**
 * Request parameters for tvStationsAll operation in SportApi.
 * @export
 * @interface SportApiTvStationsAllRequest
 */
export type SportApiTvStationsAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiTvStationsAll
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiTvStationsAll
    */
    readonly sport: string
    
}

/**
 * Request parameters for tvStationsByFixtureId operation in SportApi.
 * @export
 * @interface SportApiTvStationsByFixtureIdRequest
 */
export type SportApiTvStationsByFixtureIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiTvStationsByFixtureId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiTvStationsByFixtureId
    */
    readonly sport: string
    
    /**
    * The ID of the fixture you want to retrieve tv-stations from.
    * @type {number}
    * @memberof SportApiTvStationsByFixtureId
    */
    readonly fixtureId: number
    
}

/**
 * Request parameters for venueById operation in SportApi.
 * @export
 * @interface SportApiVenueByIdRequest
 */
export type SportApiVenueByIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiVenueById
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiVenueById
    */
    readonly sport: string
    
    /**
    * The ID of the venue you want to retrieve.
    * @type {number}
    * @memberof SportApiVenueById
    */
    readonly venueId: number
    
}

/**
 * Request parameters for venuesAll operation in SportApi.
 * @export
 * @interface SportApiVenuesAllRequest
 */
export type SportApiVenuesAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiVenuesAll
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiVenuesAll
    */
    readonly sport: string
    
}

/**
 * Request parameters for venuesBySeasonId operation in SportApi.
 * @export
 * @interface SportApiVenuesBySeasonIdRequest
 */
export type SportApiVenuesBySeasonIdRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiVenuesBySeasonId
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiVenuesBySeasonId
    */
    readonly sport: string
    
    /**
    * The ID of the season you want to retrieve venues from.
    * @type {number}
    * @memberof SportApiVenuesBySeasonId
    */
    readonly seasonId: number
    
}

/**
 * Request parameters for venuesSearch operation in SportApi.
 * @export
 * @interface SportApiVenuesSearchRequest
 */
export type SportApiVenuesSearchRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof SportApiVenuesSearch
    */
    readonly version: string
    
    /**
    * The sport you want retrieve entities from.
    * @type {string}
    * @memberof SportApiVenuesSearch
    */
    readonly sport: string
    
    /**
    * The name you want to search on.
    * @type {string}
    * @memberof SportApiVenuesSearch
    */
    readonly name: string
    
}

/**
 * SportApi - object-oriented interface
 * @export
 * @class SportApi
 * @extends {BaseAPI}
 */
export class SportApi extends SportApiCustom {
    /**
     * 
     * @summary By ID
     * @param {SportApiCoachByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public coachById(requestParameters: SportApiCoachByIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).coachById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {SportApiCoachesAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public coachesAll(requestParameters: SportApiCoachesAllRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).coachesAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Country ID
     * @param {SportApiCoachesByCountryIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public coachesByCountryId(requestParameters: SportApiCoachesByCountryIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).coachesByCountryId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Last updated
     * @param {SportApiCoachesLatestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public coachesLatest(requestParameters: SportApiCoachesLatestRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).coachesLatest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {SportApiCoachesSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public coachesSearch(requestParameters: SportApiCoachesSearchRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).coachesSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {SportApiCommentariesAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public commentariesAll(requestParameters: SportApiCommentariesAllRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).commentariesAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Fixture ID
     * @param {SportApiCommentariesByFixtureIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public commentariesByFixtureId(requestParameters: SportApiCommentariesByFixtureIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).commentariesByFixtureId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Date Range for Team
     * @param {SportApiFixtureByDateRangeForTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public fixtureByDateRangeForTeam(requestParameters: SportApiFixtureByDateRangeForTeamRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).fixtureByDateRangeForTeam(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fixture ID
     * @param {SportApiFixtureByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public fixtureById(requestParameters: SportApiFixtureByIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).fixtureById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {SportApiFixturesAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public fixturesAll(requestParameters: SportApiFixturesAllRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).fixturesAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Date
     * @param {SportApiFixturesByDateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public fixturesByDate(requestParameters: SportApiFixturesByDateRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).fixturesByDate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Date Range
     * @param {SportApiFixturesByDateRangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public fixturesByDateRange(requestParameters: SportApiFixturesByDateRangeRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).fixturesByDateRange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By IDs
     * @param {SportApiFixturesByIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public fixturesByIds(requestParameters: SportApiFixturesByIdsRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).fixturesByIds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Head to Head
     * @param {SportApiFixturesHeadToHeadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public fixturesHeadToHead(requestParameters: SportApiFixturesHeadToHeadRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).fixturesHeadToHead(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Last Updated
     * @param {SportApiFixturesLatestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public fixturesLatest(requestParameters: SportApiFixturesLatestRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).fixturesLatest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {SportApiFixturesSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public fixturesSearch(requestParameters: SportApiFixturesSearchRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).fixturesSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By ID
     * @param {SportApiLeagueByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public leagueById(requestParameters: SportApiLeagueByIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).leagueById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Enrichments
     * @param {SportApiLeagueEnrichmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public leagueEnrichments(requestParameters: SportApiLeagueEnrichmentsRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).leagueEnrichments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Shirts By League ID
     * @param {SportApiLeagueShirtsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public leagueShirts(requestParameters: SportApiLeagueShirtsRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).leagueShirts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {SportApiLeaguesAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public leaguesAll(requestParameters: SportApiLeaguesAllRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).leaguesAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Country ID
     * @param {SportApiLeaguesByCountryIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public leaguesByCountryId(requestParameters: SportApiLeaguesByCountryIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).leaguesByCountryId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Date
     * @param {SportApiLeaguesByDateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public leaguesByDate(requestParameters: SportApiLeaguesByDateRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).leaguesByDate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Leagues By Team ID
     * @param {SportApiLeaguesByTeamIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public leaguesByTeamId(requestParameters: SportApiLeaguesByTeamIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).leaguesByTeamId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Current Leagues By Team ID
     * @param {SportApiLeaguesCurrentByTeamIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public leaguesCurrentByTeamId(requestParameters: SportApiLeaguesCurrentByTeamIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).leaguesCurrentByTeamId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Live
     * @param {SportApiLeaguesLiveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public leaguesLive(requestParameters: SportApiLeaguesLiveRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).leaguesLive(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {SportApiLeaguesSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public leaguesSearch(requestParameters: SportApiLeaguesSearchRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).leaguesSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {SportApiLivescoresAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public livescoresAll(requestParameters: SportApiLivescoresAllRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).livescoresAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All In-play
     * @param {SportApiLivescoresAllInPlayRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public livescoresAllInPlay(requestParameters: SportApiLivescoresAllInPlayRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).livescoresAllInPlay(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Last Updated In-play
     * @param {SportApiLivescoresLatestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public livescoresLatest(requestParameters: SportApiLivescoresLatestRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).livescoresLatest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All Post Match
     * @param {SportApiNewsAllPostMatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public newsAllPostMatch(requestParameters: SportApiNewsAllPostMatchRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).newsAllPostMatch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All Pre-match
     * @param {SportApiNewsAllPreMatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public newsAllPreMatch(requestParameters: SportApiNewsAllPreMatchRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).newsAllPreMatch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Post Match by Season ID
     * @param {SportApiNewsPostMatchBySeasonIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public newsPostMatchBySeasonId(requestParameters: SportApiNewsPostMatchBySeasonIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).newsPostMatchBySeasonId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pre-match By Season ID
     * @param {SportApiNewsPreMatchBySeasonIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public newsPreMatchBySeasonId(requestParameters: SportApiNewsPreMatchBySeasonIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).newsPreMatchBySeasonId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upcoming Post Match
     * @param {SportApiNewsUpcomingPostMatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public newsUpcomingPostMatch(requestParameters: SportApiNewsUpcomingPostMatchRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).newsUpcomingPostMatch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upcoming Pre-match
     * @param {SportApiNewsUpcomingPreMatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public newsUpcomingPreMatch(requestParameters: SportApiNewsUpcomingPreMatchRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).newsUpcomingPreMatch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All In-play
     * @param {SportApiOddsAllInPlayRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public oddsAllInPlay(requestParameters: SportApiOddsAllInPlayRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).oddsAllInPlay(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All Pre-match
     * @param {SportApiOddsAllPreMatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public oddsAllPreMatch(requestParameters: SportApiOddsAllPreMatchRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).oddsAllPreMatch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary In-play by Fixture and Bookmaker ID
     * @param {SportApiOddsInPlayByFixtureAndBookmakerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public oddsInPlayByFixtureAndBookmakerId(requestParameters: SportApiOddsInPlayByFixtureAndBookmakerIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).oddsInPlayByFixtureAndBookmakerId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary In-play by Fixture and Market ID
     * @param {SportApiOddsInPlayByFixtureAndMarketIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public oddsInPlayByFixtureAndMarketId(requestParameters: SportApiOddsInPlayByFixtureAndMarketIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).oddsInPlayByFixtureAndMarketId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary In-play by Fixture ID
     * @param {SportApiOddsInPlayByFixtureIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public oddsInPlayByFixtureId(requestParameters: SportApiOddsInPlayByFixtureIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).oddsInPlayByFixtureId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Latest In-play
     * @param {SportApiOddsLatestInPlayRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public oddsLatestInPlay(requestParameters: SportApiOddsLatestInPlayRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).oddsLatestInPlay(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Last Updated Pre-match
     * @param {SportApiOddsLatestPreMatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public oddsLatestPreMatch(requestParameters: SportApiOddsLatestPreMatchRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).oddsLatestPreMatch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pre-match by Fixture and Bookmaker ID
     * @param {SportApiOddsPreMatchByFixtureAndBookmakerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public oddsPreMatchByFixtureAndBookmakerId(requestParameters: SportApiOddsPreMatchByFixtureAndBookmakerIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).oddsPreMatchByFixtureAndBookmakerId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pre-match by Fixture and Market ID
     * @param {SportApiOddsPreMatchByFixtureAndMarketIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public oddsPreMatchByFixtureAndMarketId(requestParameters: SportApiOddsPreMatchByFixtureAndMarketIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).oddsPreMatchByFixtureAndMarketId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pre-match by Fixture ID
     * @param {SportApiOddsPreMatchByFixtureIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public oddsPreMatchByFixtureId(requestParameters: SportApiOddsPreMatchByFixtureIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).oddsPreMatchByFixtureId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By ID
     * @param {SportApiPlayerByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public playerById(requestParameters: SportApiPlayerByIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).playerById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {SportApiPlayersAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public playersAll(requestParameters: SportApiPlayersAllRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).playersAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Country ID
     * @param {SportApiPlayersByCountryIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public playersByCountryId(requestParameters: SportApiPlayersByCountryIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).playersByCountryId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Latest Updated
     * @param {SportApiPlayersLatestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public playersLatest(requestParameters: SportApiPlayersLatestRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).playersLatest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {SportApiPlayersSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public playersSearch(requestParameters: SportApiPlayersSearchRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).playersSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {SportApiPredictionsAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public predictionsAll(requestParameters: SportApiPredictionsAllRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).predictionsAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All Value Bets
     * @param {SportApiPredictionsAllValueBetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public predictionsAllValueBets(requestParameters: SportApiPredictionsAllValueBetsRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).predictionsAllValueBets(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Fixture ID
     * @param {SportApiPredictionsByFixtureIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public predictionsByFixtureId(requestParameters: SportApiPredictionsByFixtureIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).predictionsByFixtureId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Value Bets by Fixture ID
     * @param {SportApiPredictionsValueBetsByFixtureIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public predictionsValueBetsByFixtureId(requestParameters: SportApiPredictionsValueBetsByFixtureIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).predictionsValueBetsByFixtureId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By ID
     * @param {SportApiRefereeByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public refereeById(requestParameters: SportApiRefereeByIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).refereeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {SportApiRefereesAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public refereesAll(requestParameters: SportApiRefereesAllRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).refereesAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Country ID
     * @param {SportApiRefereesByCountryIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public refereesByCountryId(requestParameters: SportApiRefereesByCountryIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).refereesByCountryId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Season ID
     * @param {SportApiRefereesBySeasonIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public refereesBySeasonId(requestParameters: SportApiRefereesBySeasonIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).refereesBySeasonId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {SportApiRefereesSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public refereesSearch(requestParameters: SportApiRefereesSearchRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).refereesSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {SportApiRivalsAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public rivalsAll(requestParameters: SportApiRivalsAllRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).rivalsAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Team ID
     * @param {SportApiRivalsByTeamIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public rivalsByTeamId(requestParameters: SportApiRivalsByTeamIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).rivalsByTeamId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By ID
     * @param {SportApiRoundByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public roundById(requestParameters: SportApiRoundByIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).roundById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {SportApiRoundsAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public roundsAll(requestParameters: SportApiRoundsAllRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).roundsAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Season ID
     * @param {SportApiRoundsBySeasonIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public roundsBySeasonId(requestParameters: SportApiRoundsBySeasonIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).roundsBySeasonId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {SportApiRoundsSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public roundsSearch(requestParameters: SportApiRoundsSearchRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).roundsSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Season ID
     * @param {SportApiSchedulesBySeasonIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public schedulesBySeasonId(requestParameters: SportApiSchedulesBySeasonIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).schedulesBySeasonId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Team and Season ID
     * @param {SportApiSchedulesByTeamAndSeasonIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public schedulesByTeamAndSeasonId(requestParameters: SportApiSchedulesByTeamAndSeasonIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).schedulesByTeamAndSeasonId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Team ID
     * @param {SportApiSchedulesByTeamIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public schedulesByTeamId(requestParameters: SportApiSchedulesByTeamIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).schedulesByTeamId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By ID
     * @param {SportApiSeasonByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public seasonById(requestParameters: SportApiSeasonByIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).seasonById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {SportApiSeasonsAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public seasonsAll(requestParameters: SportApiSeasonsAllRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).seasonsAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Team ID
     * @param {SportApiSeasonsByTeamIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public seasonsByTeamId(requestParameters: SportApiSeasonsByTeamIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).seasonsByTeamId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {SportApiSeasonsSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public seasonsSearch(requestParameters: SportApiSeasonsSearchRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).seasonsSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Season and Team ID
     * @param {SportApiSquadsBySeasonAndTeamIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public squadsBySeasonAndTeamId(requestParameters: SportApiSquadsBySeasonAndTeamIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).squadsBySeasonAndTeamId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Team ID
     * @param {SportApiSquadsByTeamIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public squadsByTeamId(requestParameters: SportApiSquadsByTeamIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).squadsByTeamId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By ID
     * @param {SportApiStageByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public stageById(requestParameters: SportApiStageByIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).stageById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {SportApiStagesAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public stagesAll(requestParameters: SportApiStagesAllRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).stagesAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Season ID
     * @param {SportApiStagesBySeasonIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public stagesBySeasonId(requestParameters: SportApiStagesBySeasonIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).stagesBySeasonId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {SportApiStagesSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public stagesSearch(requestParameters: SportApiStagesSearchRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).stagesSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Correction by Season ID
     * @param {SportApiStandingCorrectionsBySeasonIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public standingCorrectionsBySeasonId(requestParameters: SportApiStandingCorrectionsBySeasonIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).standingCorrectionsBySeasonId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {SportApiStandingsAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public standingsAll(requestParameters: SportApiStandingsAllRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).standingsAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Round ID
     * @param {SportApiStandingsByRoundIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public standingsByRoundId(requestParameters: SportApiStandingsByRoundIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).standingsByRoundId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Season ID
     * @param {SportApiStandingsBySeasonIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public standingsBySeasonId(requestParameters: SportApiStandingsBySeasonIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).standingsBySeasonId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By League ID
     * @param {SportApiStandingsLiveByLeagueIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public standingsLiveByLeagueId(requestParameters: SportApiStandingsLiveByLeagueIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).standingsLiveByLeagueId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By ID
     * @param {SportApiStateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public stateById(requestParameters: SportApiStateByIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).stateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Sport
     * @param {SportApiStatesBySportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public statesBySport(requestParameters: SportApiStatesBySportRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).statesBySport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {SportApiTeamsAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public teamsAll(requestParameters: SportApiTeamsAllRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).teamsAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Country ID
     * @param {SportApiTeamsByCountryIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public teamsByCountryId(requestParameters: SportApiTeamsByCountryIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).teamsByCountryId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By ID
     * @param {SportApiTeamsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public teamsById(requestParameters: SportApiTeamsByIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).teamsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Season ID
     * @param {SportApiTeamsBySeasonIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public teamsBySeasonId(requestParameters: SportApiTeamsBySeasonIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).teamsBySeasonId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {SportApiTeamsSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public teamsSearch(requestParameters: SportApiTeamsSearchRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).teamsSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Season ID
     * @param {SportApiTopScorersBySeasonIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public topScorersBySeasonId(requestParameters: SportApiTopScorersBySeasonIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).topScorersBySeasonId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Stage ID
     * @param {SportApiTopScorersByStageIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public topScorersByStageId(requestParameters: SportApiTopScorersByStageIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).topScorersByStageId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Date Range
     * @param {SportApiTranfersByDateRangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public tranfersByDateRange(requestParameters: SportApiTranfersByDateRangeRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).tranfersByDateRange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By ID
     * @param {SportApiTransferByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public transferById(requestParameters: SportApiTransferByIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).transferById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {SportApiTransfersAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public transfersAll(requestParameters: SportApiTransfersAllRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).transfersAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Player ID
     * @param {SportApiTransfersByPlayerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public transfersByPlayerId(requestParameters: SportApiTransfersByPlayerIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).transfersByPlayerId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Team ID
     * @param {SportApiTransfersByTeamIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public transfersByTeamId(requestParameters: SportApiTransfersByTeamIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).transfersByTeamId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Last Updated
     * @param {SportApiTransfersLatestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public transfersLatest(requestParameters: SportApiTransfersLatestRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).transfersLatest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By ID
     * @param {SportApiTvStationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public tvStationById(requestParameters: SportApiTvStationByIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).tvStationById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {SportApiTvStationsAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public tvStationsAll(requestParameters: SportApiTvStationsAllRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).tvStationsAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Fixture ID
     * @param {SportApiTvStationsByFixtureIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public tvStationsByFixtureId(requestParameters: SportApiTvStationsByFixtureIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).tvStationsByFixtureId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By ID
     * @param {SportApiVenueByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public venueById(requestParameters: SportApiVenueByIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).venueById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {SportApiVenuesAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public venuesAll(requestParameters: SportApiVenuesAllRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).venuesAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Season ID
     * @param {SportApiVenuesBySeasonIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public venuesBySeasonId(requestParameters: SportApiVenuesBySeasonIdRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).venuesBySeasonId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {SportApiVenuesSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SportApi
     */
    public venuesSearch(requestParameters: SportApiVenuesSearchRequest, options?: AxiosRequestConfig) {
        return SportApiFp(this.configuration).venuesSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
