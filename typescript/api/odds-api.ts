/* tslint:disable */
/* eslint-disable */
/**
 * SportMonks
 * Surpass the competition with superior sports data
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OddsBookmakerByIdResponse } from '../models';
// @ts-ignore
import { OddsBookmakersAllResponse } from '../models';
// @ts-ignore
import { OddsBookmakersByFixtureIdResponse } from '../models';
// @ts-ignore
import { OddsBookmakersMappingByFixtureIdResponse } from '../models';
// @ts-ignore
import { OddsBookmakersSearchResponse } from '../models';
// @ts-ignore
import { OddsFixturesUpcomingByMarketIdResponse } from '../models';
// @ts-ignore
import { OddsMarketByIdResponse } from '../models';
// @ts-ignore
import { OddsMarketsAllResponse } from '../models';
// @ts-ignore
import { OddsMarketsSearchResponse } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
import { OddsApiCustom } from "./odds-api-custom";
/**
 * OddsApi - axios parameter creator
 * @export
 */
export const OddsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary By ID
         * @param {number} bookmakerId The ID of the bookmaker you want to retrieve.
         * @param {string} [version] The version of the API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookmakerById: async (bookmakerId: number, version?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookmakerId' is not null or undefined
            assertParamExists('bookmakerById', 'bookmakerId', bookmakerId)
            const localVarPath = `/{version}/odds/bookmakers/{bookmakerId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version !== undefined ? version : `-version-`)))
                .replace(`{${"bookmakerId"}}`, encodeURIComponent(String(bookmakerId !== undefined ? bookmakerId : `-bookmakerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} [version] The version of the API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookmakersAll: async (version?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/{version}/odds/bookmakers`
                .replace(`{${"version"}}`, encodeURIComponent(String(version !== undefined ? version : `-version-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By Fixture ID
         * @param {number} fixtureId The ID of the bookmaker you want to retrieve.
         * @param {string} [version] The version of the API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookmakersByFixtureId: async (fixtureId: number, version?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fixtureId' is not null or undefined
            assertParamExists('bookmakersByFixtureId', 'fixtureId', fixtureId)
            const localVarPath = `/{version}/odds/bookmakers/fixtures/{fixtureId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version !== undefined ? version : `-version-`)))
                .replace(`{${"fixtureId"}}`, encodeURIComponent(String(fixtureId !== undefined ? fixtureId : `-fixtureId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mapping by Fixture ID
         * @param {number} fixtureId The fixtureId you want to retrieve the bookmaker mapping from.
         * @param {string} [version] The version of the API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookmakersMappingByFixtureId: async (fixtureId: number, version?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fixtureId' is not null or undefined
            assertParamExists('bookmakersMappingByFixtureId', 'fixtureId', fixtureId)
            const localVarPath = `/{version}/odds/bookmakers/fixtures/{fixtureId}/mapping`
                .replace(`{${"version"}}`, encodeURIComponent(String(version !== undefined ? version : `-version-`)))
                .replace(`{${"fixtureId"}}`, encodeURIComponent(String(fixtureId !== undefined ? fixtureId : `-fixtureId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {string} name The name you want to search on
         * @param {string} [version] The version of the API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookmakersSearch: async (name: string, version?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('bookmakersSearch', 'name', name)
            const localVarPath = `/{version}/odds/bookmakers/search/{name}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version !== undefined ? version : `-version-`)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name !== undefined ? name : `-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upcoming Fixtures by Market ID
         * @param {number} marketId The ID of the market you want to retrieve upcoming fixtures from.
         * @param {string} [version] The sport you want to retrieve upcoming fixtures from.
         * @param {string} [sport] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixturesUpcomingByMarketId: async (marketId: number, version?: string, sport?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketId' is not null or undefined
            assertParamExists('fixturesUpcomingByMarketId', 'marketId', marketId)
            const localVarPath = `/{version}/{sport}/fixtures/upcoming/markets/{marketId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version !== undefined ? version : `-version-`)))
                .replace(`{${"sport"}}`, encodeURIComponent(String(sport !== undefined ? sport : `-sport-`)))
                .replace(`{${"marketId"}}`, encodeURIComponent(String(marketId !== undefined ? marketId : `-marketId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary By ID
         * @param {number} marketId The ID of the market you want to retrieve.
         * @param {string} [version] The version of the API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketById: async (marketId: number, version?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketId' is not null or undefined
            assertParamExists('marketById', 'marketId', marketId)
            const localVarPath = `/{version}/odds/markets/{marketId}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version !== undefined ? version : `-version-`)))
                .replace(`{${"marketId"}}`, encodeURIComponent(String(marketId !== undefined ? marketId : `-marketId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All
         * @param {string} [version] The version of the API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketsAll: async (version?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/{version}/odds/markets`
                .replace(`{${"version"}}`, encodeURIComponent(String(version !== undefined ? version : `-version-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search
         * @param {string} name The name you want to search on
         * @param {string} [version] The version of the API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketsSearch: async (name: string, version?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('marketsSearch', 'name', name)
            const localVarPath = `/{version}/odds/markets/search/{name}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version !== undefined ? version : `-version-`)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name !== undefined ? name : `-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, keyParamName: "Authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OddsApi - functional programming interface
 * @export
 */
export const OddsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OddsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary By ID
         * @param {OddsApiBookmakerByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bookmakerById(requestParameters: OddsApiBookmakerByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OddsBookmakerByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bookmakerById(requestParameters.bookmakerId, requestParameters.version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {OddsApiBookmakersAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bookmakersAll(requestParameters: OddsApiBookmakersAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OddsBookmakersAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bookmakersAll(requestParameters.version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By Fixture ID
         * @param {OddsApiBookmakersByFixtureIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bookmakersByFixtureId(requestParameters: OddsApiBookmakersByFixtureIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OddsBookmakersByFixtureIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bookmakersByFixtureId(requestParameters.fixtureId, requestParameters.version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Mapping by Fixture ID
         * @param {OddsApiBookmakersMappingByFixtureIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bookmakersMappingByFixtureId(requestParameters: OddsApiBookmakersMappingByFixtureIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OddsBookmakersMappingByFixtureIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bookmakersMappingByFixtureId(requestParameters.fixtureId, requestParameters.version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {OddsApiBookmakersSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bookmakersSearch(requestParameters: OddsApiBookmakersSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OddsBookmakersSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bookmakersSearch(requestParameters.name, requestParameters.version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upcoming Fixtures by Market ID
         * @param {OddsApiFixturesUpcomingByMarketIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fixturesUpcomingByMarketId(requestParameters: OddsApiFixturesUpcomingByMarketIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OddsFixturesUpcomingByMarketIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fixturesUpcomingByMarketId(requestParameters.marketId, requestParameters.version, requestParameters.sport, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary By ID
         * @param {OddsApiMarketByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketById(requestParameters: OddsApiMarketByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OddsMarketByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketById(requestParameters.marketId, requestParameters.version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All
         * @param {OddsApiMarketsAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketsAll(requestParameters: OddsApiMarketsAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OddsMarketsAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketsAll(requestParameters.version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search
         * @param {OddsApiMarketsSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketsSearch(requestParameters: OddsApiMarketsSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OddsMarketsSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketsSearch(requestParameters.name, requestParameters.version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OddsApi - factory interface
 * @export
 */
export const OddsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OddsApiFp(configuration)
    return {
        /**
         * 
         * @summary By ID
         * @param {OddsApiBookmakerByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookmakerById(requestParameters: OddsApiBookmakerByIdRequest, options?: AxiosRequestConfig): AxiosPromise<OddsBookmakerByIdResponse> {
            return localVarFp.bookmakerById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {OddsApiBookmakersAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookmakersAll(requestParameters: OddsApiBookmakersAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<OddsBookmakersAllResponse> {
            return localVarFp.bookmakersAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By Fixture ID
         * @param {OddsApiBookmakersByFixtureIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookmakersByFixtureId(requestParameters: OddsApiBookmakersByFixtureIdRequest, options?: AxiosRequestConfig): AxiosPromise<OddsBookmakersByFixtureIdResponse> {
            return localVarFp.bookmakersByFixtureId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mapping by Fixture ID
         * @param {OddsApiBookmakersMappingByFixtureIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookmakersMappingByFixtureId(requestParameters: OddsApiBookmakersMappingByFixtureIdRequest, options?: AxiosRequestConfig): AxiosPromise<OddsBookmakersMappingByFixtureIdResponse> {
            return localVarFp.bookmakersMappingByFixtureId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {OddsApiBookmakersSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookmakersSearch(requestParameters: OddsApiBookmakersSearchRequest, options?: AxiosRequestConfig): AxiosPromise<OddsBookmakersSearchResponse> {
            return localVarFp.bookmakersSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upcoming Fixtures by Market ID
         * @param {OddsApiFixturesUpcomingByMarketIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixturesUpcomingByMarketId(requestParameters: OddsApiFixturesUpcomingByMarketIdRequest, options?: AxiosRequestConfig): AxiosPromise<OddsFixturesUpcomingByMarketIdResponse> {
            return localVarFp.fixturesUpcomingByMarketId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary By ID
         * @param {OddsApiMarketByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketById(requestParameters: OddsApiMarketByIdRequest, options?: AxiosRequestConfig): AxiosPromise<OddsMarketByIdResponse> {
            return localVarFp.marketById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All
         * @param {OddsApiMarketsAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketsAll(requestParameters: OddsApiMarketsAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<OddsMarketsAllResponse> {
            return localVarFp.marketsAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search
         * @param {OddsApiMarketsSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketsSearch(requestParameters: OddsApiMarketsSearchRequest, options?: AxiosRequestConfig): AxiosPromise<OddsMarketsSearchResponse> {
            return localVarFp.marketsSearch(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for bookmakerById operation in OddsApi.
 * @export
 * @interface OddsApiBookmakerByIdRequest
 */
export type OddsApiBookmakerByIdRequest = {
    
    /**
    * The ID of the bookmaker you want to retrieve.
    * @type {number}
    * @memberof OddsApiBookmakerById
    */
    readonly bookmakerId: number
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof OddsApiBookmakerById
    */
    readonly version?: string
    
}

/**
 * Request parameters for bookmakersAll operation in OddsApi.
 * @export
 * @interface OddsApiBookmakersAllRequest
 */
export type OddsApiBookmakersAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof OddsApiBookmakersAll
    */
    readonly version?: string
    
}

/**
 * Request parameters for bookmakersByFixtureId operation in OddsApi.
 * @export
 * @interface OddsApiBookmakersByFixtureIdRequest
 */
export type OddsApiBookmakersByFixtureIdRequest = {
    
    /**
    * The ID of the bookmaker you want to retrieve.
    * @type {number}
    * @memberof OddsApiBookmakersByFixtureId
    */
    readonly fixtureId: number
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof OddsApiBookmakersByFixtureId
    */
    readonly version?: string
    
}

/**
 * Request parameters for bookmakersMappingByFixtureId operation in OddsApi.
 * @export
 * @interface OddsApiBookmakersMappingByFixtureIdRequest
 */
export type OddsApiBookmakersMappingByFixtureIdRequest = {
    
    /**
    * The fixtureId you want to retrieve the bookmaker mapping from.
    * @type {number}
    * @memberof OddsApiBookmakersMappingByFixtureId
    */
    readonly fixtureId: number
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof OddsApiBookmakersMappingByFixtureId
    */
    readonly version?: string
    
}

/**
 * Request parameters for bookmakersSearch operation in OddsApi.
 * @export
 * @interface OddsApiBookmakersSearchRequest
 */
export type OddsApiBookmakersSearchRequest = {
    
    /**
    * The name you want to search on
    * @type {string}
    * @memberof OddsApiBookmakersSearch
    */
    readonly name: string
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof OddsApiBookmakersSearch
    */
    readonly version?: string
    
}

/**
 * Request parameters for fixturesUpcomingByMarketId operation in OddsApi.
 * @export
 * @interface OddsApiFixturesUpcomingByMarketIdRequest
 */
export type OddsApiFixturesUpcomingByMarketIdRequest = {
    
    /**
    * The ID of the market you want to retrieve upcoming fixtures from.
    * @type {number}
    * @memberof OddsApiFixturesUpcomingByMarketId
    */
    readonly marketId: number
    
    /**
    * The sport you want to retrieve upcoming fixtures from.
    * @type {string}
    * @memberof OddsApiFixturesUpcomingByMarketId
    */
    readonly version?: string
    
    /**
    * 
    * @type {string}
    * @memberof OddsApiFixturesUpcomingByMarketId
    */
    readonly sport?: string
    
}

/**
 * Request parameters for marketById operation in OddsApi.
 * @export
 * @interface OddsApiMarketByIdRequest
 */
export type OddsApiMarketByIdRequest = {
    
    /**
    * The ID of the market you want to retrieve.
    * @type {number}
    * @memberof OddsApiMarketById
    */
    readonly marketId: number
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof OddsApiMarketById
    */
    readonly version?: string
    
}

/**
 * Request parameters for marketsAll operation in OddsApi.
 * @export
 * @interface OddsApiMarketsAllRequest
 */
export type OddsApiMarketsAllRequest = {
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof OddsApiMarketsAll
    */
    readonly version?: string
    
}

/**
 * Request parameters for marketsSearch operation in OddsApi.
 * @export
 * @interface OddsApiMarketsSearchRequest
 */
export type OddsApiMarketsSearchRequest = {
    
    /**
    * The name you want to search on
    * @type {string}
    * @memberof OddsApiMarketsSearch
    */
    readonly name: string
    
    /**
    * The version of the API.
    * @type {string}
    * @memberof OddsApiMarketsSearch
    */
    readonly version?: string
    
}

/**
 * OddsApi - object-oriented interface
 * @export
 * @class OddsApi
 * @extends {BaseAPI}
 */
export class OddsApi extends OddsApiCustom {
    /**
     * 
     * @summary By ID
     * @param {OddsApiBookmakerByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OddsApi
     */
    public bookmakerById(requestParameters: OddsApiBookmakerByIdRequest, options?: AxiosRequestConfig) {
        return OddsApiFp(this.configuration).bookmakerById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {OddsApiBookmakersAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OddsApi
     */
    public bookmakersAll(requestParameters: OddsApiBookmakersAllRequest = {}, options?: AxiosRequestConfig) {
        return OddsApiFp(this.configuration).bookmakersAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By Fixture ID
     * @param {OddsApiBookmakersByFixtureIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OddsApi
     */
    public bookmakersByFixtureId(requestParameters: OddsApiBookmakersByFixtureIdRequest, options?: AxiosRequestConfig) {
        return OddsApiFp(this.configuration).bookmakersByFixtureId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mapping by Fixture ID
     * @param {OddsApiBookmakersMappingByFixtureIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OddsApi
     */
    public bookmakersMappingByFixtureId(requestParameters: OddsApiBookmakersMappingByFixtureIdRequest, options?: AxiosRequestConfig) {
        return OddsApiFp(this.configuration).bookmakersMappingByFixtureId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {OddsApiBookmakersSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OddsApi
     */
    public bookmakersSearch(requestParameters: OddsApiBookmakersSearchRequest, options?: AxiosRequestConfig) {
        return OddsApiFp(this.configuration).bookmakersSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upcoming Fixtures by Market ID
     * @param {OddsApiFixturesUpcomingByMarketIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OddsApi
     */
    public fixturesUpcomingByMarketId(requestParameters: OddsApiFixturesUpcomingByMarketIdRequest, options?: AxiosRequestConfig) {
        return OddsApiFp(this.configuration).fixturesUpcomingByMarketId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary By ID
     * @param {OddsApiMarketByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OddsApi
     */
    public marketById(requestParameters: OddsApiMarketByIdRequest, options?: AxiosRequestConfig) {
        return OddsApiFp(this.configuration).marketById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All
     * @param {OddsApiMarketsAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OddsApi
     */
    public marketsAll(requestParameters: OddsApiMarketsAllRequest = {}, options?: AxiosRequestConfig) {
        return OddsApiFp(this.configuration).marketsAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search
     * @param {OddsApiMarketsSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OddsApi
     */
    public marketsSearch(requestParameters: OddsApiMarketsSearchRequest, options?: AxiosRequestConfig) {
        return OddsApiFp(this.configuration).marketsSearch(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
