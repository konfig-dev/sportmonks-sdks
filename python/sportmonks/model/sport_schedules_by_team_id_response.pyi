# coding: utf-8

"""
    SportMonks

    Surpass the competition with superior sports data

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sportmonks import schemas  # noqa: F401


class SportSchedulesByTeamIdResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class data(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                id = schemas.NumberSchema
                                sport_id = schemas.NumberSchema
                                league_id = schemas.NumberSchema
                                season_id = schemas.NumberSchema
                                type_id = schemas.NumberSchema
                                name = schemas.StrSchema
                                sort_order = schemas.NumberSchema
                                finished = schemas.BoolSchema
                                is_current = schemas.BoolSchema
                                starting_at = schemas.StrSchema
                                ending_at = schemas.StrSchema
                                
                                
                                class aggregates(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'aggregates':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class rounds(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    id = schemas.NumberSchema
                                                    sport_id = schemas.NumberSchema
                                                    league_id = schemas.NumberSchema
                                                    season_id = schemas.NumberSchema
                                                    stage_id = schemas.NumberSchema
                                                    name = schemas.StrSchema
                                                    finished = schemas.BoolSchema
                                                    is_current = schemas.BoolSchema
                                                    starting_at = schemas.StrSchema
                                                    ending_at = schemas.StrSchema
                                                    
                                                    
                                                    class fixtures(
                                                        schemas.ListSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            
                                                            
                                                            class items(
                                                                schemas.DictSchema
                                                            ):
                                                            
                                                            
                                                                class MetaOapg:
                                                                    
                                                                    class properties:
                                                                        id = schemas.NumberSchema
                                                                        sport_id = schemas.NumberSchema
                                                                        league_id = schemas.NumberSchema
                                                                        season_id = schemas.NumberSchema
                                                                        stage_id = schemas.NumberSchema
                                                                        
                                                                        
                                                                        class group_id(
                                                                            schemas.StrBase,
                                                                            schemas.NoneBase,
                                                                            schemas.Schema,
                                                                            schemas.NoneStrMixin
                                                                        ):
                                                                        
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                *args: typing.Union[None, str, ],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            ) -> 'group_id':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    *args,
                                                                                    _configuration=_configuration,
                                                                                )
                                                                        
                                                                        
                                                                        class aggregate_id(
                                                                            schemas.StrBase,
                                                                            schemas.NoneBase,
                                                                            schemas.Schema,
                                                                            schemas.NoneStrMixin
                                                                        ):
                                                                        
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                *args: typing.Union[None, str, ],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            ) -> 'aggregate_id':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    *args,
                                                                                    _configuration=_configuration,
                                                                                )
                                                                        round_id = schemas.NumberSchema
                                                                        state_id = schemas.NumberSchema
                                                                        venue_id = schemas.NumberSchema
                                                                        name = schemas.StrSchema
                                                                        
                                                                        
                                                                        class home_score(
                                                                            schemas.ComposedSchema,
                                                                        ):
                                                                        
                                                                        
                                                                            class MetaOapg:
                                                                                one_of_0 = schemas.NumberSchema
                                                                                
                                                                                
                                                                                class one_of_1(
                                                                                    schemas.StrBase,
                                                                                    schemas.NoneBase,
                                                                                    schemas.Schema,
                                                                                    schemas.NoneStrMixin
                                                                                ):
                                                                                
                                                                                
                                                                                    def __new__(
                                                                                        cls,
                                                                                        *args: typing.Union[None, str, ],
                                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                    ) -> 'one_of_1':
                                                                                        return super().__new__(
                                                                                            cls,
                                                                                            *args,
                                                                                            _configuration=_configuration,
                                                                                        )
                                                                                
                                                                                @classmethod
                                                                                @functools.lru_cache()
                                                                                def one_of(cls):
                                                                                    # we need this here to make our import statements work
                                                                                    # we must store _composed_schemas in here so the code is only run
                                                                                    # when we invoke this method. If we kept this at the class
                                                                                    # level we would get an error because the class level
                                                                                    # code would be run when this module is imported, and these composed
                                                                                    # classes don't exist yet because their module has not finished
                                                                                    # loading
                                                                                    return [
                                                                                        cls.one_of_0,
                                                                                        cls.one_of_1,
                                                                                    ]
                                                                        
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                            ) -> 'home_score':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    *args,
                                                                                    _configuration=_configuration,
                                                                                    **kwargs,
                                                                                )
                                                                        
                                                                        
                                                                        class away_score(
                                                                            schemas.ComposedSchema,
                                                                        ):
                                                                        
                                                                        
                                                                            class MetaOapg:
                                                                                one_of_0 = schemas.NumberSchema
                                                                                
                                                                                
                                                                                class one_of_1(
                                                                                    schemas.StrBase,
                                                                                    schemas.NoneBase,
                                                                                    schemas.Schema,
                                                                                    schemas.NoneStrMixin
                                                                                ):
                                                                                
                                                                                
                                                                                    def __new__(
                                                                                        cls,
                                                                                        *args: typing.Union[None, str, ],
                                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                    ) -> 'one_of_1':
                                                                                        return super().__new__(
                                                                                            cls,
                                                                                            *args,
                                                                                            _configuration=_configuration,
                                                                                        )
                                                                                
                                                                                @classmethod
                                                                                @functools.lru_cache()
                                                                                def one_of(cls):
                                                                                    # we need this here to make our import statements work
                                                                                    # we must store _composed_schemas in here so the code is only run
                                                                                    # when we invoke this method. If we kept this at the class
                                                                                    # level we would get an error because the class level
                                                                                    # code would be run when this module is imported, and these composed
                                                                                    # classes don't exist yet because their module has not finished
                                                                                    # loading
                                                                                    return [
                                                                                        cls.one_of_0,
                                                                                        cls.one_of_1,
                                                                                    ]
                                                                        
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                            ) -> 'away_score':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    *args,
                                                                                    _configuration=_configuration,
                                                                                    **kwargs,
                                                                                )
                                                                        starting_at = schemas.StrSchema
                                                                        
                                                                        
                                                                        class result_info(
                                                                            schemas.StrBase,
                                                                            schemas.NoneBase,
                                                                            schemas.Schema,
                                                                            schemas.NoneStrMixin
                                                                        ):
                                                                        
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                *args: typing.Union[None, str, ],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            ) -> 'result_info':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    *args,
                                                                                    _configuration=_configuration,
                                                                                )
                                                                        leg = schemas.StrSchema
                                                                        
                                                                        
                                                                        class details(
                                                                            schemas.StrBase,
                                                                            schemas.NoneBase,
                                                                            schemas.Schema,
                                                                            schemas.NoneStrMixin
                                                                        ):
                                                                        
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                *args: typing.Union[None, str, ],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            ) -> 'details':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    *args,
                                                                                    _configuration=_configuration,
                                                                                )
                                                                        length = schemas.NumberSchema
                                                                        placeholder = schemas.BoolSchema
                                                                        
                                                                        
                                                                        class last_processed_at(
                                                                            schemas.StrBase,
                                                                            schemas.NoneBase,
                                                                            schemas.Schema,
                                                                            schemas.NoneStrMixin
                                                                        ):
                                                                        
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                *args: typing.Union[None, str, ],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            ) -> 'last_processed_at':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    *args,
                                                                                    _configuration=_configuration,
                                                                                )
                                                                        starting_at_timestamp = schemas.NumberSchema
                                                                        
                                                                        
                                                                        class participants(
                                                                            schemas.ListSchema
                                                                        ):
                                                                        
                                                                        
                                                                            class MetaOapg:
                                                                                
                                                                                
                                                                                class items(
                                                                                    schemas.DictSchema
                                                                                ):
                                                                                
                                                                                
                                                                                    class MetaOapg:
                                                                                        
                                                                                        class properties:
                                                                                            id = schemas.NumberSchema
                                                                                            sport_id = schemas.NumberSchema
                                                                                            country_id = schemas.NumberSchema
                                                                                            venue_id = schemas.NumberSchema
                                                                                            gender = schemas.StrSchema
                                                                                            name = schemas.StrSchema
                                                                                            
                                                                                            
                                                                                            class short_code(
                                                                                                schemas.StrBase,
                                                                                                schemas.NoneBase,
                                                                                                schemas.Schema,
                                                                                                schemas.NoneStrMixin
                                                                                            ):
                                                                                            
                                                                                            
                                                                                                def __new__(
                                                                                                    cls,
                                                                                                    *args: typing.Union[None, str, ],
                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                ) -> 'short_code':
                                                                                                    return super().__new__(
                                                                                                        cls,
                                                                                                        *args,
                                                                                                        _configuration=_configuration,
                                                                                                    )
                                                                                            image_path = schemas.StrSchema
                                                                                            founded = schemas.NumberSchema
                                                                                            type = schemas.StrSchema
                                                                                            placeholder = schemas.BoolSchema
                                                                                            last_played_at = schemas.StrSchema
                                                                                            
                                                                                            
                                                                                            class meta(
                                                                                                schemas.DictSchema
                                                                                            ):
                                                                                            
                                                                                            
                                                                                                class MetaOapg:
                                                                                                    
                                                                                                    class properties:
                                                                                                        location = schemas.StrSchema
                                                                                                        __annotations__ = {
                                                                                                            "location": location,
                                                                                                        }
                                                                                                
                                                                                                @typing.overload
                                                                                                def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                                                
                                                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["location", ], str]):
                                                                                                    # dict_instance[name] accessor
                                                                                                    return super().__getitem__(name)
                                                                                                
                                                                                                
                                                                                                @typing.overload
                                                                                                def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
                                                                                                
                                                                                                @typing.overload
                                                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                                                
                                                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["location", ], str]):
                                                                                                    return super().get_item_oapg(name)
                                                                                                
                                                                                            
                                                                                                def __new__(
                                                                                                    cls,
                                                                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                                                                    location: typing.Union[MetaOapg.properties.location, str, schemas.Unset] = schemas.unset,
                                                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                                                ) -> 'meta':
                                                                                                    return super().__new__(
                                                                                                        cls,
                                                                                                        *args,
                                                                                                        location=location,
                                                                                                        _configuration=_configuration,
                                                                                                        **kwargs,
                                                                                                    )
                                                                                            __annotations__ = {
                                                                                                "id": id,
                                                                                                "sport_id": sport_id,
                                                                                                "country_id": country_id,
                                                                                                "venue_id": venue_id,
                                                                                                "gender": gender,
                                                                                                "name": name,
                                                                                                "short_code": short_code,
                                                                                                "image_path": image_path,
                                                                                                "founded": founded,
                                                                                                "type": type,
                                                                                                "placeholder": placeholder,
                                                                                                "last_played_at": last_played_at,
                                                                                                "meta": meta,
                                                                                            }
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["sport_id"]) -> MetaOapg.properties.sport_id: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["country_id"]) -> MetaOapg.properties.country_id: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["venue_id"]) -> MetaOapg.properties.venue_id: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["short_code"]) -> MetaOapg.properties.short_code: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["image_path"]) -> MetaOapg.properties.image_path: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["founded"]) -> MetaOapg.properties.founded: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["placeholder"]) -> MetaOapg.properties.placeholder: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["last_played_at"]) -> MetaOapg.properties.last_played_at: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> MetaOapg.properties.meta: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                                    
                                                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "sport_id", "country_id", "venue_id", "gender", "name", "short_code", "image_path", "founded", "type", "placeholder", "last_played_at", "meta", ], str]):
                                                                                        # dict_instance[name] accessor
                                                                                        return super().__getitem__(name)
                                                                                    
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["sport_id"]) -> typing.Union[MetaOapg.properties.sport_id, schemas.Unset]: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["country_id"]) -> typing.Union[MetaOapg.properties.country_id, schemas.Unset]: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["venue_id"]) -> typing.Union[MetaOapg.properties.venue_id, schemas.Unset]: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["short_code"]) -> typing.Union[MetaOapg.properties.short_code, schemas.Unset]: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["image_path"]) -> typing.Union[MetaOapg.properties.image_path, schemas.Unset]: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["founded"]) -> typing.Union[MetaOapg.properties.founded, schemas.Unset]: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["placeholder"]) -> typing.Union[MetaOapg.properties.placeholder, schemas.Unset]: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["last_played_at"]) -> typing.Union[MetaOapg.properties.last_played_at, schemas.Unset]: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union[MetaOapg.properties.meta, schemas.Unset]: ...
                                                                                    
                                                                                    @typing.overload
                                                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                                    
                                                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "sport_id", "country_id", "venue_id", "gender", "name", "short_code", "image_path", "founded", "type", "placeholder", "last_played_at", "meta", ], str]):
                                                                                        return super().get_item_oapg(name)
                                                                                    
                                                                                
                                                                                    def __new__(
                                                                                        cls,
                                                                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                                                                        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                                        sport_id: typing.Union[MetaOapg.properties.sport_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                                        country_id: typing.Union[MetaOapg.properties.country_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                                        venue_id: typing.Union[MetaOapg.properties.venue_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                                        gender: typing.Union[MetaOapg.properties.gender, str, schemas.Unset] = schemas.unset,
                                                                                        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                                                                        short_code: typing.Union[MetaOapg.properties.short_code, None, str, schemas.Unset] = schemas.unset,
                                                                                        image_path: typing.Union[MetaOapg.properties.image_path, str, schemas.Unset] = schemas.unset,
                                                                                        founded: typing.Union[MetaOapg.properties.founded, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                                        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                                                                        placeholder: typing.Union[MetaOapg.properties.placeholder, bool, schemas.Unset] = schemas.unset,
                                                                                        last_played_at: typing.Union[MetaOapg.properties.last_played_at, str, schemas.Unset] = schemas.unset,
                                                                                        meta: typing.Union[MetaOapg.properties.meta, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                                    ) -> 'items':
                                                                                        return super().__new__(
                                                                                            cls,
                                                                                            *args,
                                                                                            id=id,
                                                                                            sport_id=sport_id,
                                                                                            country_id=country_id,
                                                                                            venue_id=venue_id,
                                                                                            gender=gender,
                                                                                            name=name,
                                                                                            short_code=short_code,
                                                                                            image_path=image_path,
                                                                                            founded=founded,
                                                                                            type=type,
                                                                                            placeholder=placeholder,
                                                                                            last_played_at=last_played_at,
                                                                                            meta=meta,
                                                                                            _configuration=_configuration,
                                                                                            **kwargs,
                                                                                        )
                                                                        
                                                                            def __new__(
                                                                                cls,
                                                                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                                            ) -> 'participants':
                                                                                return super().__new__(
                                                                                    cls,
                                                                                    arg,
                                                                                    _configuration=_configuration,
                                                                                )
                                                                        
                                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                                return super().__getitem__(i)
                                                                        __annotations__ = {
                                                                            "id": id,
                                                                            "sport_id": sport_id,
                                                                            "league_id": league_id,
                                                                            "season_id": season_id,
                                                                            "stage_id": stage_id,
                                                                            "group_id": group_id,
                                                                            "aggregate_id": aggregate_id,
                                                                            "round_id": round_id,
                                                                            "state_id": state_id,
                                                                            "venue_id": venue_id,
                                                                            "name": name,
                                                                            "home_score": home_score,
                                                                            "away_score": away_score,
                                                                            "starting_at": starting_at,
                                                                            "result_info": result_info,
                                                                            "leg": leg,
                                                                            "details": details,
                                                                            "length": length,
                                                                            "placeholder": placeholder,
                                                                            "last_processed_at": last_processed_at,
                                                                            "starting_at_timestamp": starting_at_timestamp,
                                                                            "participants": participants,
                                                                        }
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["sport_id"]) -> MetaOapg.properties.sport_id: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["league_id"]) -> MetaOapg.properties.league_id: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["season_id"]) -> MetaOapg.properties.season_id: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["stage_id"]) -> MetaOapg.properties.stage_id: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["group_id"]) -> MetaOapg.properties.group_id: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["aggregate_id"]) -> MetaOapg.properties.aggregate_id: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["round_id"]) -> MetaOapg.properties.round_id: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["state_id"]) -> MetaOapg.properties.state_id: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["venue_id"]) -> MetaOapg.properties.venue_id: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["home_score"]) -> MetaOapg.properties.home_score: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["away_score"]) -> MetaOapg.properties.away_score: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["starting_at"]) -> MetaOapg.properties.starting_at: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["result_info"]) -> MetaOapg.properties.result_info: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["leg"]) -> MetaOapg.properties.leg: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["details"]) -> MetaOapg.properties.details: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["placeholder"]) -> MetaOapg.properties.placeholder: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["last_processed_at"]) -> MetaOapg.properties.last_processed_at: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["starting_at_timestamp"]) -> MetaOapg.properties.starting_at_timestamp: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: typing_extensions.Literal["participants"]) -> MetaOapg.properties.participants: ...
                                                                
                                                                @typing.overload
                                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                
                                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "sport_id", "league_id", "season_id", "stage_id", "group_id", "aggregate_id", "round_id", "state_id", "venue_id", "name", "home_score", "away_score", "starting_at", "result_info", "leg", "details", "length", "placeholder", "last_processed_at", "starting_at_timestamp", "participants", ], str]):
                                                                    # dict_instance[name] accessor
                                                                    return super().__getitem__(name)
                                                                
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["sport_id"]) -> typing.Union[MetaOapg.properties.sport_id, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["league_id"]) -> typing.Union[MetaOapg.properties.league_id, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["season_id"]) -> typing.Union[MetaOapg.properties.season_id, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["stage_id"]) -> typing.Union[MetaOapg.properties.stage_id, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["group_id"]) -> typing.Union[MetaOapg.properties.group_id, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["aggregate_id"]) -> typing.Union[MetaOapg.properties.aggregate_id, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["round_id"]) -> typing.Union[MetaOapg.properties.round_id, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["state_id"]) -> typing.Union[MetaOapg.properties.state_id, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["venue_id"]) -> typing.Union[MetaOapg.properties.venue_id, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["home_score"]) -> typing.Union[MetaOapg.properties.home_score, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["away_score"]) -> typing.Union[MetaOapg.properties.away_score, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["starting_at"]) -> typing.Union[MetaOapg.properties.starting_at, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["result_info"]) -> typing.Union[MetaOapg.properties.result_info, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["leg"]) -> typing.Union[MetaOapg.properties.leg, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["details"]) -> typing.Union[MetaOapg.properties.details, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["placeholder"]) -> typing.Union[MetaOapg.properties.placeholder, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["last_processed_at"]) -> typing.Union[MetaOapg.properties.last_processed_at, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["starting_at_timestamp"]) -> typing.Union[MetaOapg.properties.starting_at_timestamp, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: typing_extensions.Literal["participants"]) -> typing.Union[MetaOapg.properties.participants, schemas.Unset]: ...
                                                                
                                                                @typing.overload
                                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                
                                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "sport_id", "league_id", "season_id", "stage_id", "group_id", "aggregate_id", "round_id", "state_id", "venue_id", "name", "home_score", "away_score", "starting_at", "result_info", "leg", "details", "length", "placeholder", "last_processed_at", "starting_at_timestamp", "participants", ], str]):
                                                                    return super().get_item_oapg(name)
                                                                
                                                            
                                                                def __new__(
                                                                    cls,
                                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                                    id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                    sport_id: typing.Union[MetaOapg.properties.sport_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                    league_id: typing.Union[MetaOapg.properties.league_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                    season_id: typing.Union[MetaOapg.properties.season_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                    stage_id: typing.Union[MetaOapg.properties.stage_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                    group_id: typing.Union[MetaOapg.properties.group_id, None, str, schemas.Unset] = schemas.unset,
                                                                    aggregate_id: typing.Union[MetaOapg.properties.aggregate_id, None, str, schemas.Unset] = schemas.unset,
                                                                    round_id: typing.Union[MetaOapg.properties.round_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                    state_id: typing.Union[MetaOapg.properties.state_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                    venue_id: typing.Union[MetaOapg.properties.venue_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                    name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                                                    home_score: typing.Union[MetaOapg.properties.home_score, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                                                    away_score: typing.Union[MetaOapg.properties.away_score, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                                                    starting_at: typing.Union[MetaOapg.properties.starting_at, str, schemas.Unset] = schemas.unset,
                                                                    result_info: typing.Union[MetaOapg.properties.result_info, None, str, schemas.Unset] = schemas.unset,
                                                                    leg: typing.Union[MetaOapg.properties.leg, str, schemas.Unset] = schemas.unset,
                                                                    details: typing.Union[MetaOapg.properties.details, None, str, schemas.Unset] = schemas.unset,
                                                                    length: typing.Union[MetaOapg.properties.length, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                    placeholder: typing.Union[MetaOapg.properties.placeholder, bool, schemas.Unset] = schemas.unset,
                                                                    last_processed_at: typing.Union[MetaOapg.properties.last_processed_at, None, str, schemas.Unset] = schemas.unset,
                                                                    starting_at_timestamp: typing.Union[MetaOapg.properties.starting_at_timestamp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                                    participants: typing.Union[MetaOapg.properties.participants, list, tuple, schemas.Unset] = schemas.unset,
                                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                ) -> 'items':
                                                                    return super().__new__(
                                                                        cls,
                                                                        *args,
                                                                        id=id,
                                                                        sport_id=sport_id,
                                                                        league_id=league_id,
                                                                        season_id=season_id,
                                                                        stage_id=stage_id,
                                                                        group_id=group_id,
                                                                        aggregate_id=aggregate_id,
                                                                        round_id=round_id,
                                                                        state_id=state_id,
                                                                        venue_id=venue_id,
                                                                        name=name,
                                                                        home_score=home_score,
                                                                        away_score=away_score,
                                                                        starting_at=starting_at,
                                                                        result_info=result_info,
                                                                        leg=leg,
                                                                        details=details,
                                                                        length=length,
                                                                        placeholder=placeholder,
                                                                        last_processed_at=last_processed_at,
                                                                        starting_at_timestamp=starting_at_timestamp,
                                                                        participants=participants,
                                                                        _configuration=_configuration,
                                                                        **kwargs,
                                                                    )
                                                    
                                                        def __new__(
                                                            cls,
                                                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                        ) -> 'fixtures':
                                                            return super().__new__(
                                                                cls,
                                                                arg,
                                                                _configuration=_configuration,
                                                            )
                                                    
                                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                                            return super().__getitem__(i)
                                                    __annotations__ = {
                                                        "id": id,
                                                        "sport_id": sport_id,
                                                        "league_id": league_id,
                                                        "season_id": season_id,
                                                        "stage_id": stage_id,
                                                        "name": name,
                                                        "finished": finished,
                                                        "is_current": is_current,
                                                        "starting_at": starting_at,
                                                        "ending_at": ending_at,
                                                        "fixtures": fixtures,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["sport_id"]) -> MetaOapg.properties.sport_id: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["league_id"]) -> MetaOapg.properties.league_id: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["season_id"]) -> MetaOapg.properties.season_id: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["stage_id"]) -> MetaOapg.properties.stage_id: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["finished"]) -> MetaOapg.properties.finished: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["is_current"]) -> MetaOapg.properties.is_current: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["starting_at"]) -> MetaOapg.properties.starting_at: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["ending_at"]) -> MetaOapg.properties.ending_at: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["fixtures"]) -> MetaOapg.properties.fixtures: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "sport_id", "league_id", "season_id", "stage_id", "name", "finished", "is_current", "starting_at", "ending_at", "fixtures", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["sport_id"]) -> typing.Union[MetaOapg.properties.sport_id, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["league_id"]) -> typing.Union[MetaOapg.properties.league_id, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["season_id"]) -> typing.Union[MetaOapg.properties.season_id, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["stage_id"]) -> typing.Union[MetaOapg.properties.stage_id, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["finished"]) -> typing.Union[MetaOapg.properties.finished, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["is_current"]) -> typing.Union[MetaOapg.properties.is_current, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["starting_at"]) -> typing.Union[MetaOapg.properties.starting_at, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["ending_at"]) -> typing.Union[MetaOapg.properties.ending_at, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["fixtures"]) -> typing.Union[MetaOapg.properties.fixtures, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "sport_id", "league_id", "season_id", "stage_id", "name", "finished", "is_current", "starting_at", "ending_at", "fixtures", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                sport_id: typing.Union[MetaOapg.properties.sport_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                league_id: typing.Union[MetaOapg.properties.league_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                season_id: typing.Union[MetaOapg.properties.season_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                stage_id: typing.Union[MetaOapg.properties.stage_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                                name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                                finished: typing.Union[MetaOapg.properties.finished, bool, schemas.Unset] = schemas.unset,
                                                is_current: typing.Union[MetaOapg.properties.is_current, bool, schemas.Unset] = schemas.unset,
                                                starting_at: typing.Union[MetaOapg.properties.starting_at, str, schemas.Unset] = schemas.unset,
                                                ending_at: typing.Union[MetaOapg.properties.ending_at, str, schemas.Unset] = schemas.unset,
                                                fixtures: typing.Union[MetaOapg.properties.fixtures, list, tuple, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    id=id,
                                                    sport_id=sport_id,
                                                    league_id=league_id,
                                                    season_id=season_id,
                                                    stage_id=stage_id,
                                                    name=name,
                                                    finished=finished,
                                                    is_current=is_current,
                                                    starting_at=starting_at,
                                                    ending_at=ending_at,
                                                    fixtures=fixtures,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'rounds':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "id": id,
                                    "sport_id": sport_id,
                                    "league_id": league_id,
                                    "season_id": season_id,
                                    "type_id": type_id,
                                    "name": name,
                                    "sort_order": sort_order,
                                    "finished": finished,
                                    "is_current": is_current,
                                    "starting_at": starting_at,
                                    "ending_at": ending_at,
                                    "aggregates": aggregates,
                                    "rounds": rounds,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sport_id"]) -> MetaOapg.properties.sport_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["league_id"]) -> MetaOapg.properties.league_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["season_id"]) -> MetaOapg.properties.season_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["type_id"]) -> MetaOapg.properties.type_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sort_order"]) -> MetaOapg.properties.sort_order: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["finished"]) -> MetaOapg.properties.finished: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["is_current"]) -> MetaOapg.properties.is_current: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["starting_at"]) -> MetaOapg.properties.starting_at: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ending_at"]) -> MetaOapg.properties.ending_at: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["aggregates"]) -> MetaOapg.properties.aggregates: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["rounds"]) -> MetaOapg.properties.rounds: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "sport_id", "league_id", "season_id", "type_id", "name", "sort_order", "finished", "is_current", "starting_at", "ending_at", "aggregates", "rounds", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sport_id"]) -> typing.Union[MetaOapg.properties.sport_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["league_id"]) -> typing.Union[MetaOapg.properties.league_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["season_id"]) -> typing.Union[MetaOapg.properties.season_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["type_id"]) -> typing.Union[MetaOapg.properties.type_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sort_order"]) -> typing.Union[MetaOapg.properties.sort_order, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["finished"]) -> typing.Union[MetaOapg.properties.finished, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["is_current"]) -> typing.Union[MetaOapg.properties.is_current, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["starting_at"]) -> typing.Union[MetaOapg.properties.starting_at, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ending_at"]) -> typing.Union[MetaOapg.properties.ending_at, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["aggregates"]) -> typing.Union[MetaOapg.properties.aggregates, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["rounds"]) -> typing.Union[MetaOapg.properties.rounds, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "sport_id", "league_id", "season_id", "type_id", "name", "sort_order", "finished", "is_current", "starting_at", "ending_at", "aggregates", "rounds", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            sport_id: typing.Union[MetaOapg.properties.sport_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            league_id: typing.Union[MetaOapg.properties.league_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            season_id: typing.Union[MetaOapg.properties.season_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            type_id: typing.Union[MetaOapg.properties.type_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            sort_order: typing.Union[MetaOapg.properties.sort_order, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            finished: typing.Union[MetaOapg.properties.finished, bool, schemas.Unset] = schemas.unset,
                            is_current: typing.Union[MetaOapg.properties.is_current, bool, schemas.Unset] = schemas.unset,
                            starting_at: typing.Union[MetaOapg.properties.starting_at, str, schemas.Unset] = schemas.unset,
                            ending_at: typing.Union[MetaOapg.properties.ending_at, str, schemas.Unset] = schemas.unset,
                            aggregates: typing.Union[MetaOapg.properties.aggregates, list, tuple, schemas.Unset] = schemas.unset,
                            rounds: typing.Union[MetaOapg.properties.rounds, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                id=id,
                                sport_id=sport_id,
                                league_id=league_id,
                                season_id=season_id,
                                type_id=type_id,
                                name=name,
                                sort_order=sort_order,
                                finished=finished,
                                is_current=is_current,
                                starting_at=starting_at,
                                ending_at=ending_at,
                                aggregates=aggregates,
                                rounds=rounds,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'data':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class subscription(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class meta(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'meta':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class plans(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    plan = schemas.StrSchema
                                                    sport = schemas.StrSchema
                                                    category = schemas.StrSchema
                                                    __annotations__ = {
                                                        "plan": plan,
                                                        "sport": sport,
                                                        "category": category,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["plan"]) -> MetaOapg.properties.plan: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["sport"]) -> MetaOapg.properties.sport: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["plan", "sport", "category", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["plan"]) -> typing.Union[MetaOapg.properties.plan, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["sport"]) -> typing.Union[MetaOapg.properties.sport, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["plan", "sport", "category", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                plan: typing.Union[MetaOapg.properties.plan, str, schemas.Unset] = schemas.unset,
                                                sport: typing.Union[MetaOapg.properties.sport, str, schemas.Unset] = schemas.unset,
                                                category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    plan=plan,
                                                    sport=sport,
                                                    category=category,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'plans':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class add_ons(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'add_ons':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class widgets(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'widgets':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "meta": meta,
                                    "plans": plans,
                                    "add_ons": add_ons,
                                    "widgets": widgets,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["meta"]) -> MetaOapg.properties.meta: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["plans"]) -> MetaOapg.properties.plans: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["add_ons"]) -> MetaOapg.properties.add_ons: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["widgets"]) -> MetaOapg.properties.widgets: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["meta", "plans", "add_ons", "widgets", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union[MetaOapg.properties.meta, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["plans"]) -> typing.Union[MetaOapg.properties.plans, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["add_ons"]) -> typing.Union[MetaOapg.properties.add_ons, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["widgets"]) -> typing.Union[MetaOapg.properties.widgets, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["meta", "plans", "add_ons", "widgets", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            meta: typing.Union[MetaOapg.properties.meta, list, tuple, schemas.Unset] = schemas.unset,
                            plans: typing.Union[MetaOapg.properties.plans, list, tuple, schemas.Unset] = schemas.unset,
                            add_ons: typing.Union[MetaOapg.properties.add_ons, list, tuple, schemas.Unset] = schemas.unset,
                            widgets: typing.Union[MetaOapg.properties.widgets, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                meta=meta,
                                plans=plans,
                                add_ons=add_ons,
                                widgets=widgets,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subscription':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class rate_limit(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        resets_in_seconds = schemas.NumberSchema
                        remaining = schemas.NumberSchema
                        requested_entity = schemas.StrSchema
                        __annotations__ = {
                            "resets_in_seconds": resets_in_seconds,
                            "remaining": remaining,
                            "requested_entity": requested_entity,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["resets_in_seconds"]) -> MetaOapg.properties.resets_in_seconds: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["remaining"]) -> MetaOapg.properties.remaining: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["requested_entity"]) -> MetaOapg.properties.requested_entity: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["resets_in_seconds", "remaining", "requested_entity", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["resets_in_seconds"]) -> typing.Union[MetaOapg.properties.resets_in_seconds, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["remaining"]) -> typing.Union[MetaOapg.properties.remaining, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["requested_entity"]) -> typing.Union[MetaOapg.properties.requested_entity, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["resets_in_seconds", "remaining", "requested_entity", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    resets_in_seconds: typing.Union[MetaOapg.properties.resets_in_seconds, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    remaining: typing.Union[MetaOapg.properties.remaining, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    requested_entity: typing.Union[MetaOapg.properties.requested_entity, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rate_limit':
                    return super().__new__(
                        cls,
                        *args,
                        resets_in_seconds=resets_in_seconds,
                        remaining=remaining,
                        requested_entity=requested_entity,
                        _configuration=_configuration,
                        **kwargs,
                    )
            timezone = schemas.StrSchema
            __annotations__ = {
                "data": data,
                "subscription": subscription,
                "rate_limit": rate_limit,
                "timezone": timezone,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscription"]) -> MetaOapg.properties.subscription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate_limit"]) -> MetaOapg.properties.rate_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["data", "subscription", "rate_limit", "timezone", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscription"]) -> typing.Union[MetaOapg.properties.subscription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate_limit"]) -> typing.Union[MetaOapg.properties.rate_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data", "subscription", "rate_limit", "timezone", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        data: typing.Union[MetaOapg.properties.data, list, tuple, schemas.Unset] = schemas.unset,
        subscription: typing.Union[MetaOapg.properties.subscription, list, tuple, schemas.Unset] = schemas.unset,
        rate_limit: typing.Union[MetaOapg.properties.rate_limit, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SportSchedulesByTeamIdResponse':
        return super().__new__(
            cls,
            *args,
            data=data,
            subscription=subscription,
            rate_limit=rate_limit,
            timezone=timezone,
            _configuration=_configuration,
            **kwargs,
        )
