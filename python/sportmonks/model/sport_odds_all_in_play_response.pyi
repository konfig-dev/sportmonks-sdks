# coding: utf-8

"""
    SportMonks

    Surpass the competition with superior sports data

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sportmonks import schemas  # noqa: F401


class SportOddsAllInPlayResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class data(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                id = schemas.NumberSchema
                                fixture_id = schemas.NumberSchema
                                provider_id = schemas.NumberSchema
                                external_id = schemas.StrSchema
                                market_id = schemas.NumberSchema
                                bookmaker_id = schemas.NumberSchema
                                label = schemas.StrSchema
                                value = schemas.StrSchema
                                
                                
                                class name(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'name':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                sort_order = schemas.NumberSchema
                                market_description = schemas.StrSchema
                                probability = schemas.StrSchema
                                dp3 = schemas.StrSchema
                                fractional = schemas.StrSchema
                                american = schemas.StrSchema
                                winning = schemas.BoolSchema
                                suspended = schemas.BoolSchema
                                stopped = schemas.BoolSchema
                                
                                
                                class total(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'total':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class handicap(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'handicap':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class participants(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'participants':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                created_at = schemas.StrSchema
                                updated_at = schemas.StrSchema
                                __annotations__ = {
                                    "id": id,
                                    "fixture_id": fixture_id,
                                    "provider_id": provider_id,
                                    "external_id": external_id,
                                    "market_id": market_id,
                                    "bookmaker_id": bookmaker_id,
                                    "label": label,
                                    "value": value,
                                    "name": name,
                                    "sort_order": sort_order,
                                    "market_description": market_description,
                                    "probability": probability,
                                    "dp3": dp3,
                                    "fractional": fractional,
                                    "american": american,
                                    "winning": winning,
                                    "suspended": suspended,
                                    "stopped": stopped,
                                    "total": total,
                                    "handicap": handicap,
                                    "participants": participants,
                                    "created_at": created_at,
                                    "updated_at": updated_at,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["fixture_id"]) -> MetaOapg.properties.fixture_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["provider_id"]) -> MetaOapg.properties.provider_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["external_id"]) -> MetaOapg.properties.external_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["market_id"]) -> MetaOapg.properties.market_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["bookmaker_id"]) -> MetaOapg.properties.bookmaker_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sort_order"]) -> MetaOapg.properties.sort_order: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["market_description"]) -> MetaOapg.properties.market_description: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["probability"]) -> MetaOapg.properties.probability: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["dp3"]) -> MetaOapg.properties.dp3: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["fractional"]) -> MetaOapg.properties.fractional: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["american"]) -> MetaOapg.properties.american: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["winning"]) -> MetaOapg.properties.winning: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["suspended"]) -> MetaOapg.properties.suspended: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["stopped"]) -> MetaOapg.properties.stopped: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["handicap"]) -> MetaOapg.properties.handicap: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["participants"]) -> MetaOapg.properties.participants: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "fixture_id", "provider_id", "external_id", "market_id", "bookmaker_id", "label", "value", "name", "sort_order", "market_description", "probability", "dp3", "fractional", "american", "winning", "suspended", "stopped", "total", "handicap", "participants", "created_at", "updated_at", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["fixture_id"]) -> typing.Union[MetaOapg.properties.fixture_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["provider_id"]) -> typing.Union[MetaOapg.properties.provider_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["external_id"]) -> typing.Union[MetaOapg.properties.external_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["market_id"]) -> typing.Union[MetaOapg.properties.market_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["bookmaker_id"]) -> typing.Union[MetaOapg.properties.bookmaker_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sort_order"]) -> typing.Union[MetaOapg.properties.sort_order, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["market_description"]) -> typing.Union[MetaOapg.properties.market_description, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["probability"]) -> typing.Union[MetaOapg.properties.probability, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["dp3"]) -> typing.Union[MetaOapg.properties.dp3, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["fractional"]) -> typing.Union[MetaOapg.properties.fractional, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["american"]) -> typing.Union[MetaOapg.properties.american, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["winning"]) -> typing.Union[MetaOapg.properties.winning, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["suspended"]) -> typing.Union[MetaOapg.properties.suspended, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["stopped"]) -> typing.Union[MetaOapg.properties.stopped, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["handicap"]) -> typing.Union[MetaOapg.properties.handicap, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["participants"]) -> typing.Union[MetaOapg.properties.participants, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "fixture_id", "provider_id", "external_id", "market_id", "bookmaker_id", "label", "value", "name", "sort_order", "market_description", "probability", "dp3", "fractional", "american", "winning", "suspended", "stopped", "total", "handicap", "participants", "created_at", "updated_at", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            fixture_id: typing.Union[MetaOapg.properties.fixture_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            provider_id: typing.Union[MetaOapg.properties.provider_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            external_id: typing.Union[MetaOapg.properties.external_id, str, schemas.Unset] = schemas.unset,
                            market_id: typing.Union[MetaOapg.properties.market_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            bookmaker_id: typing.Union[MetaOapg.properties.bookmaker_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
                            value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
                            sort_order: typing.Union[MetaOapg.properties.sort_order, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            market_description: typing.Union[MetaOapg.properties.market_description, str, schemas.Unset] = schemas.unset,
                            probability: typing.Union[MetaOapg.properties.probability, str, schemas.Unset] = schemas.unset,
                            dp3: typing.Union[MetaOapg.properties.dp3, str, schemas.Unset] = schemas.unset,
                            fractional: typing.Union[MetaOapg.properties.fractional, str, schemas.Unset] = schemas.unset,
                            american: typing.Union[MetaOapg.properties.american, str, schemas.Unset] = schemas.unset,
                            winning: typing.Union[MetaOapg.properties.winning, bool, schemas.Unset] = schemas.unset,
                            suspended: typing.Union[MetaOapg.properties.suspended, bool, schemas.Unset] = schemas.unset,
                            stopped: typing.Union[MetaOapg.properties.stopped, bool, schemas.Unset] = schemas.unset,
                            total: typing.Union[MetaOapg.properties.total, None, str, schemas.Unset] = schemas.unset,
                            handicap: typing.Union[MetaOapg.properties.handicap, None, str, schemas.Unset] = schemas.unset,
                            participants: typing.Union[MetaOapg.properties.participants, None, str, schemas.Unset] = schemas.unset,
                            created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
                            updated_at: typing.Union[MetaOapg.properties.updated_at, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                id=id,
                                fixture_id=fixture_id,
                                provider_id=provider_id,
                                external_id=external_id,
                                market_id=market_id,
                                bookmaker_id=bookmaker_id,
                                label=label,
                                value=value,
                                name=name,
                                sort_order=sort_order,
                                market_description=market_description,
                                probability=probability,
                                dp3=dp3,
                                fractional=fractional,
                                american=american,
                                winning=winning,
                                suspended=suspended,
                                stopped=stopped,
                                total=total,
                                handicap=handicap,
                                participants=participants,
                                created_at=created_at,
                                updated_at=updated_at,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'data':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class pagination(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        count = schemas.NumberSchema
                        per_page = schemas.NumberSchema
                        current_page = schemas.NumberSchema
                        next_page = schemas.StrSchema
                        has_more = schemas.BoolSchema
                        __annotations__ = {
                            "count": count,
                            "per_page": per_page,
                            "current_page": current_page,
                            "next_page": next_page,
                            "has_more": has_more,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["per_page"]) -> MetaOapg.properties.per_page: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["current_page"]) -> MetaOapg.properties.current_page: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["next_page"]) -> MetaOapg.properties.next_page: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["has_more"]) -> MetaOapg.properties.has_more: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["count", "per_page", "current_page", "next_page", "has_more", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["per_page"]) -> typing.Union[MetaOapg.properties.per_page, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["current_page"]) -> typing.Union[MetaOapg.properties.current_page, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["next_page"]) -> typing.Union[MetaOapg.properties.next_page, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["has_more"]) -> typing.Union[MetaOapg.properties.has_more, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["count", "per_page", "current_page", "next_page", "has_more", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    per_page: typing.Union[MetaOapg.properties.per_page, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    current_page: typing.Union[MetaOapg.properties.current_page, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    next_page: typing.Union[MetaOapg.properties.next_page, str, schemas.Unset] = schemas.unset,
                    has_more: typing.Union[MetaOapg.properties.has_more, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'pagination':
                    return super().__new__(
                        cls,
                        *args,
                        count=count,
                        per_page=per_page,
                        current_page=current_page,
                        next_page=next_page,
                        has_more=has_more,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class subscription(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class meta(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            
                                            
                                            class trial_ends_at(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'trial_ends_at':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        _configuration=_configuration,
                                                    )
                                            
                                            
                                            class ends_at(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'ends_at':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        _configuration=_configuration,
                                                    )
                                            __annotations__ = {
                                                "trial_ends_at": trial_ends_at,
                                                "ends_at": ends_at,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["trial_ends_at"]) -> MetaOapg.properties.trial_ends_at: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["ends_at"]) -> MetaOapg.properties.ends_at: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["trial_ends_at", "ends_at", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["trial_ends_at"]) -> typing.Union[MetaOapg.properties.trial_ends_at, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["ends_at"]) -> typing.Union[MetaOapg.properties.ends_at, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["trial_ends_at", "ends_at", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        trial_ends_at: typing.Union[MetaOapg.properties.trial_ends_at, None, str, schemas.Unset] = schemas.unset,
                                        ends_at: typing.Union[MetaOapg.properties.ends_at, None, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'meta':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            trial_ends_at=trial_ends_at,
                                            ends_at=ends_at,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class plans(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    plan = schemas.StrSchema
                                                    sport = schemas.StrSchema
                                                    category = schemas.StrSchema
                                                    __annotations__ = {
                                                        "plan": plan,
                                                        "sport": sport,
                                                        "category": category,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["plan"]) -> MetaOapg.properties.plan: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["sport"]) -> MetaOapg.properties.sport: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["plan", "sport", "category", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["plan"]) -> typing.Union[MetaOapg.properties.plan, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["sport"]) -> typing.Union[MetaOapg.properties.sport, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["plan", "sport", "category", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                plan: typing.Union[MetaOapg.properties.plan, str, schemas.Unset] = schemas.unset,
                                                sport: typing.Union[MetaOapg.properties.sport, str, schemas.Unset] = schemas.unset,
                                                category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    plan=plan,
                                                    sport=sport,
                                                    category=category,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'plans':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class add_ons(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    add_on = schemas.StrSchema
                                                    sport = schemas.StrSchema
                                                    category = schemas.StrSchema
                                                    __annotations__ = {
                                                        "add_on": add_on,
                                                        "sport": sport,
                                                        "category": category,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["add_on"]) -> MetaOapg.properties.add_on: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["sport"]) -> MetaOapg.properties.sport: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["add_on", "sport", "category", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["add_on"]) -> typing.Union[MetaOapg.properties.add_on, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["sport"]) -> typing.Union[MetaOapg.properties.sport, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["add_on", "sport", "category", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                add_on: typing.Union[MetaOapg.properties.add_on, str, schemas.Unset] = schemas.unset,
                                                sport: typing.Union[MetaOapg.properties.sport, str, schemas.Unset] = schemas.unset,
                                                category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    add_on=add_on,
                                                    sport=sport,
                                                    category=category,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'add_ons':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "meta": meta,
                                    "plans": plans,
                                    "add_ons": add_ons,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["meta"]) -> MetaOapg.properties.meta: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["plans"]) -> MetaOapg.properties.plans: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["add_ons"]) -> MetaOapg.properties.add_ons: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["meta", "plans", "add_ons", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union[MetaOapg.properties.meta, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["plans"]) -> typing.Union[MetaOapg.properties.plans, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["add_ons"]) -> typing.Union[MetaOapg.properties.add_ons, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["meta", "plans", "add_ons", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            meta: typing.Union[MetaOapg.properties.meta, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            plans: typing.Union[MetaOapg.properties.plans, list, tuple, schemas.Unset] = schemas.unset,
                            add_ons: typing.Union[MetaOapg.properties.add_ons, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                meta=meta,
                                plans=plans,
                                add_ons=add_ons,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subscription':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class rate_limit(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        resets_in_seconds = schemas.NumberSchema
                        remaining = schemas.NumberSchema
                        requested_entity = schemas.StrSchema
                        __annotations__ = {
                            "resets_in_seconds": resets_in_seconds,
                            "remaining": remaining,
                            "requested_entity": requested_entity,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["resets_in_seconds"]) -> MetaOapg.properties.resets_in_seconds: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["remaining"]) -> MetaOapg.properties.remaining: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["requested_entity"]) -> MetaOapg.properties.requested_entity: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["resets_in_seconds", "remaining", "requested_entity", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["resets_in_seconds"]) -> typing.Union[MetaOapg.properties.resets_in_seconds, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["remaining"]) -> typing.Union[MetaOapg.properties.remaining, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["requested_entity"]) -> typing.Union[MetaOapg.properties.requested_entity, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["resets_in_seconds", "remaining", "requested_entity", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    resets_in_seconds: typing.Union[MetaOapg.properties.resets_in_seconds, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    remaining: typing.Union[MetaOapg.properties.remaining, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    requested_entity: typing.Union[MetaOapg.properties.requested_entity, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rate_limit':
                    return super().__new__(
                        cls,
                        *args,
                        resets_in_seconds=resets_in_seconds,
                        remaining=remaining,
                        requested_entity=requested_entity,
                        _configuration=_configuration,
                        **kwargs,
                    )
            timezone = schemas.StrSchema
            __annotations__ = {
                "data": data,
                "pagination": pagination,
                "subscription": subscription,
                "rate_limit": rate_limit,
                "timezone": timezone,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pagination"]) -> MetaOapg.properties.pagination: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscription"]) -> MetaOapg.properties.subscription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate_limit"]) -> MetaOapg.properties.rate_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["data", "pagination", "subscription", "rate_limit", "timezone", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pagination"]) -> typing.Union[MetaOapg.properties.pagination, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscription"]) -> typing.Union[MetaOapg.properties.subscription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate_limit"]) -> typing.Union[MetaOapg.properties.rate_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data", "pagination", "subscription", "rate_limit", "timezone", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        data: typing.Union[MetaOapg.properties.data, list, tuple, schemas.Unset] = schemas.unset,
        pagination: typing.Union[MetaOapg.properties.pagination, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        subscription: typing.Union[MetaOapg.properties.subscription, list, tuple, schemas.Unset] = schemas.unset,
        rate_limit: typing.Union[MetaOapg.properties.rate_limit, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SportOddsAllInPlayResponse':
        return super().__new__(
            cls,
            *args,
            data=data,
            pagination=pagination,
            subscription=subscription,
            rate_limit=rate_limit,
            timezone=timezone,
            _configuration=_configuration,
            **kwargs,
        )
