# coding: utf-8

"""
    SportMonks

    Surpass the competition with superior sports data

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sportmonks import schemas  # noqa: F401


class SportLivescoresLatestResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class data(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                id = schemas.NumberSchema
                                sport_id = schemas.NumberSchema
                                league_id = schemas.NumberSchema
                                season_id = schemas.NumberSchema
                                stage_id = schemas.NumberSchema
                                
                                
                                class group_id(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'group_id':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                
                                
                                class aggregate_id(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'aggregate_id':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                round_id = schemas.NumberSchema
                                state_id = schemas.NumberSchema
                                venue_id = schemas.NumberSchema
                                name = schemas.StrSchema
                                home_score = schemas.NumberSchema
                                away_score = schemas.NumberSchema
                                starting_at = schemas.StrSchema
                                
                                
                                class result_info(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'result_info':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                leg = schemas.StrSchema
                                
                                
                                class details(
                                    schemas.StrBase,
                                    schemas.NoneBase,
                                    schemas.Schema,
                                    schemas.NoneStrMixin
                                ):
                                
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[None, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'details':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                        )
                                length = schemas.NumberSchema
                                placeholder = schemas.BoolSchema
                                last_processed_at = schemas.StrSchema
                                starting_at_timestamp = schemas.NumberSchema
                                __annotations__ = {
                                    "id": id,
                                    "sport_id": sport_id,
                                    "league_id": league_id,
                                    "season_id": season_id,
                                    "stage_id": stage_id,
                                    "group_id": group_id,
                                    "aggregate_id": aggregate_id,
                                    "round_id": round_id,
                                    "state_id": state_id,
                                    "venue_id": venue_id,
                                    "name": name,
                                    "home_score": home_score,
                                    "away_score": away_score,
                                    "starting_at": starting_at,
                                    "result_info": result_info,
                                    "leg": leg,
                                    "details": details,
                                    "length": length,
                                    "placeholder": placeholder,
                                    "last_processed_at": last_processed_at,
                                    "starting_at_timestamp": starting_at_timestamp,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sport_id"]) -> MetaOapg.properties.sport_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["league_id"]) -> MetaOapg.properties.league_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["season_id"]) -> MetaOapg.properties.season_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["stage_id"]) -> MetaOapg.properties.stage_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["group_id"]) -> MetaOapg.properties.group_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["aggregate_id"]) -> MetaOapg.properties.aggregate_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["round_id"]) -> MetaOapg.properties.round_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["state_id"]) -> MetaOapg.properties.state_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["venue_id"]) -> MetaOapg.properties.venue_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["home_score"]) -> MetaOapg.properties.home_score: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["away_score"]) -> MetaOapg.properties.away_score: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["starting_at"]) -> MetaOapg.properties.starting_at: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["result_info"]) -> MetaOapg.properties.result_info: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["leg"]) -> MetaOapg.properties.leg: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["details"]) -> MetaOapg.properties.details: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["placeholder"]) -> MetaOapg.properties.placeholder: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["last_processed_at"]) -> MetaOapg.properties.last_processed_at: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["starting_at_timestamp"]) -> MetaOapg.properties.starting_at_timestamp: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "sport_id", "league_id", "season_id", "stage_id", "group_id", "aggregate_id", "round_id", "state_id", "venue_id", "name", "home_score", "away_score", "starting_at", "result_info", "leg", "details", "length", "placeholder", "last_processed_at", "starting_at_timestamp", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sport_id"]) -> typing.Union[MetaOapg.properties.sport_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["league_id"]) -> typing.Union[MetaOapg.properties.league_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["season_id"]) -> typing.Union[MetaOapg.properties.season_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["stage_id"]) -> typing.Union[MetaOapg.properties.stage_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["group_id"]) -> typing.Union[MetaOapg.properties.group_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["aggregate_id"]) -> typing.Union[MetaOapg.properties.aggregate_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["round_id"]) -> typing.Union[MetaOapg.properties.round_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["state_id"]) -> typing.Union[MetaOapg.properties.state_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["venue_id"]) -> typing.Union[MetaOapg.properties.venue_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["home_score"]) -> typing.Union[MetaOapg.properties.home_score, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["away_score"]) -> typing.Union[MetaOapg.properties.away_score, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["starting_at"]) -> typing.Union[MetaOapg.properties.starting_at, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["result_info"]) -> typing.Union[MetaOapg.properties.result_info, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["leg"]) -> typing.Union[MetaOapg.properties.leg, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["details"]) -> typing.Union[MetaOapg.properties.details, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["placeholder"]) -> typing.Union[MetaOapg.properties.placeholder, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["last_processed_at"]) -> typing.Union[MetaOapg.properties.last_processed_at, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["starting_at_timestamp"]) -> typing.Union[MetaOapg.properties.starting_at_timestamp, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "sport_id", "league_id", "season_id", "stage_id", "group_id", "aggregate_id", "round_id", "state_id", "venue_id", "name", "home_score", "away_score", "starting_at", "result_info", "leg", "details", "length", "placeholder", "last_processed_at", "starting_at_timestamp", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            sport_id: typing.Union[MetaOapg.properties.sport_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            league_id: typing.Union[MetaOapg.properties.league_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            season_id: typing.Union[MetaOapg.properties.season_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            stage_id: typing.Union[MetaOapg.properties.stage_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            group_id: typing.Union[MetaOapg.properties.group_id, None, str, schemas.Unset] = schemas.unset,
                            aggregate_id: typing.Union[MetaOapg.properties.aggregate_id, None, str, schemas.Unset] = schemas.unset,
                            round_id: typing.Union[MetaOapg.properties.round_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            state_id: typing.Union[MetaOapg.properties.state_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            venue_id: typing.Union[MetaOapg.properties.venue_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            home_score: typing.Union[MetaOapg.properties.home_score, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            away_score: typing.Union[MetaOapg.properties.away_score, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            starting_at: typing.Union[MetaOapg.properties.starting_at, str, schemas.Unset] = schemas.unset,
                            result_info: typing.Union[MetaOapg.properties.result_info, None, str, schemas.Unset] = schemas.unset,
                            leg: typing.Union[MetaOapg.properties.leg, str, schemas.Unset] = schemas.unset,
                            details: typing.Union[MetaOapg.properties.details, None, str, schemas.Unset] = schemas.unset,
                            length: typing.Union[MetaOapg.properties.length, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            placeholder: typing.Union[MetaOapg.properties.placeholder, bool, schemas.Unset] = schemas.unset,
                            last_processed_at: typing.Union[MetaOapg.properties.last_processed_at, str, schemas.Unset] = schemas.unset,
                            starting_at_timestamp: typing.Union[MetaOapg.properties.starting_at_timestamp, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                id=id,
                                sport_id=sport_id,
                                league_id=league_id,
                                season_id=season_id,
                                stage_id=stage_id,
                                group_id=group_id,
                                aggregate_id=aggregate_id,
                                round_id=round_id,
                                state_id=state_id,
                                venue_id=venue_id,
                                name=name,
                                home_score=home_score,
                                away_score=away_score,
                                starting_at=starting_at,
                                result_info=result_info,
                                leg=leg,
                                details=details,
                                length=length,
                                placeholder=placeholder,
                                last_processed_at=last_processed_at,
                                starting_at_timestamp=starting_at_timestamp,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'data':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class subscription(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class meta(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'meta':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class plans(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    plan = schemas.StrSchema
                                                    sport = schemas.StrSchema
                                                    category = schemas.StrSchema
                                                    __annotations__ = {
                                                        "plan": plan,
                                                        "sport": sport,
                                                        "category": category,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["plan"]) -> MetaOapg.properties.plan: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["sport"]) -> MetaOapg.properties.sport: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["plan", "sport", "category", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["plan"]) -> typing.Union[MetaOapg.properties.plan, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["sport"]) -> typing.Union[MetaOapg.properties.sport, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["plan", "sport", "category", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                plan: typing.Union[MetaOapg.properties.plan, str, schemas.Unset] = schemas.unset,
                                                sport: typing.Union[MetaOapg.properties.sport, str, schemas.Unset] = schemas.unset,
                                                category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    plan=plan,
                                                    sport=sport,
                                                    category=category,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'plans':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class add_ons(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'add_ons':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class widgets(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'widgets':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "meta": meta,
                                    "plans": plans,
                                    "add_ons": add_ons,
                                    "widgets": widgets,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["meta"]) -> MetaOapg.properties.meta: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["plans"]) -> MetaOapg.properties.plans: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["add_ons"]) -> MetaOapg.properties.add_ons: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["widgets"]) -> MetaOapg.properties.widgets: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["meta", "plans", "add_ons", "widgets", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union[MetaOapg.properties.meta, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["plans"]) -> typing.Union[MetaOapg.properties.plans, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["add_ons"]) -> typing.Union[MetaOapg.properties.add_ons, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["widgets"]) -> typing.Union[MetaOapg.properties.widgets, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["meta", "plans", "add_ons", "widgets", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            meta: typing.Union[MetaOapg.properties.meta, list, tuple, schemas.Unset] = schemas.unset,
                            plans: typing.Union[MetaOapg.properties.plans, list, tuple, schemas.Unset] = schemas.unset,
                            add_ons: typing.Union[MetaOapg.properties.add_ons, list, tuple, schemas.Unset] = schemas.unset,
                            widgets: typing.Union[MetaOapg.properties.widgets, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                meta=meta,
                                plans=plans,
                                add_ons=add_ons,
                                widgets=widgets,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subscription':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class rate_limit(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        resets_in_seconds = schemas.NumberSchema
                        remaining = schemas.NumberSchema
                        requested_entity = schemas.StrSchema
                        __annotations__ = {
                            "resets_in_seconds": resets_in_seconds,
                            "remaining": remaining,
                            "requested_entity": requested_entity,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["resets_in_seconds"]) -> MetaOapg.properties.resets_in_seconds: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["remaining"]) -> MetaOapg.properties.remaining: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["requested_entity"]) -> MetaOapg.properties.requested_entity: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["resets_in_seconds", "remaining", "requested_entity", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["resets_in_seconds"]) -> typing.Union[MetaOapg.properties.resets_in_seconds, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["remaining"]) -> typing.Union[MetaOapg.properties.remaining, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["requested_entity"]) -> typing.Union[MetaOapg.properties.requested_entity, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["resets_in_seconds", "remaining", "requested_entity", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    resets_in_seconds: typing.Union[MetaOapg.properties.resets_in_seconds, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    remaining: typing.Union[MetaOapg.properties.remaining, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    requested_entity: typing.Union[MetaOapg.properties.requested_entity, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rate_limit':
                    return super().__new__(
                        cls,
                        *args,
                        resets_in_seconds=resets_in_seconds,
                        remaining=remaining,
                        requested_entity=requested_entity,
                        _configuration=_configuration,
                        **kwargs,
                    )
            timezone = schemas.StrSchema
            __annotations__ = {
                "data": data,
                "subscription": subscription,
                "rate_limit": rate_limit,
                "timezone": timezone,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscription"]) -> MetaOapg.properties.subscription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate_limit"]) -> MetaOapg.properties.rate_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["data", "subscription", "rate_limit", "timezone", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscription"]) -> typing.Union[MetaOapg.properties.subscription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate_limit"]) -> typing.Union[MetaOapg.properties.rate_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data", "subscription", "rate_limit", "timezone", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        data: typing.Union[MetaOapg.properties.data, list, tuple, schemas.Unset] = schemas.unset,
        subscription: typing.Union[MetaOapg.properties.subscription, list, tuple, schemas.Unset] = schemas.unset,
        rate_limit: typing.Union[MetaOapg.properties.rate_limit, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SportLivescoresLatestResponse':
        return super().__new__(
            cls,
            *args,
            data=data,
            subscription=subscription,
            rate_limit=rate_limit,
            timezone=timezone,
            _configuration=_configuration,
            **kwargs,
        )
