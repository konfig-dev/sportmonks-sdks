# coding: utf-8

"""
    SportMonks

    Surpass the competition with superior sports data

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sportmonks import schemas  # noqa: F401


class SportPredictionsByFixtureIdResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class data(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                id = schemas.NumberSchema
                                fixture_id = schemas.NumberSchema
                                
                                
                                class predictions(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            _true = schemas.NumberSchema
                                            _false = schemas.NumberSchema
                                            
                                            
                                            class scores(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        _0_0 = schemas.NumberSchema
                                                        _0_1 = schemas.NumberSchema
                                                        _0_2 = schemas.NumberSchema
                                                        _0_3 = schemas.NumberSchema
                                                        _0_4 = schemas.NumberSchema
                                                        _0_5 = schemas.NumberSchema
                                                        _0_6 = schemas.NumberSchema
                                                        _0_7 = schemas.NumberSchema
                                                        _1_0 = schemas.NumberSchema
                                                        _1_1 = schemas.NumberSchema
                                                        _1_2 = schemas.NumberSchema
                                                        _1_3 = schemas.NumberSchema
                                                        _1_4 = schemas.NumberSchema
                                                        _1_5 = schemas.NumberSchema
                                                        _1_6 = schemas.NumberSchema
                                                        _1_7 = schemas.NumberSchema
                                                        _1_8 = schemas.NumberSchema
                                                        _2_0 = schemas.NumberSchema
                                                        _2_1 = schemas.NumberSchema
                                                        _2_2 = schemas.NumberSchema
                                                        _2_3 = schemas.NumberSchema
                                                        _2_4 = schemas.NumberSchema
                                                        _2_5 = schemas.NumberSchema
                                                        _2_6 = schemas.NumberSchema
                                                        _2_7 = schemas.NumberSchema
                                                        _3_0 = schemas.NumberSchema
                                                        _3_1 = schemas.NumberSchema
                                                        _3_2 = schemas.NumberSchema
                                                        _3_3 = schemas.NumberSchema
                                                        _3_4 = schemas.NumberSchema
                                                        _3_5 = schemas.NumberSchema
                                                        _3_6 = schemas.NumberSchema
                                                        _3_7 = schemas.NumberSchema
                                                        _4_0 = schemas.NumberSchema
                                                        _4_1 = schemas.NumberSchema
                                                        _4_2 = schemas.NumberSchema
                                                        _4_3 = schemas.NumberSchema
                                                        _4_4 = schemas.NumberSchema
                                                        _4_5 = schemas.NumberSchema
                                                        _4_6 = schemas.NumberSchema
                                                        _4_7 = schemas.NumberSchema
                                                        _5_0 = schemas.NumberSchema
                                                        _5_1 = schemas.NumberSchema
                                                        _5_2 = schemas.NumberSchema
                                                        _5_3 = schemas.NumberSchema
                                                        _5_4 = schemas.NumberSchema
                                                        _5_5 = schemas.NumberSchema
                                                        _5_6 = schemas.NumberSchema
                                                        _6_0 = schemas.NumberSchema
                                                        _6_1 = schemas.NumberSchema
                                                        _6_2 = schemas.NumberSchema
                                                        _6_3 = schemas.NumberSchema
                                                        _6_4 = schemas.NumberSchema
                                                        _6_5 = schemas.NumberSchema
                                                        _6_6 = schemas.NumberSchema
                                                        _7_0 = schemas.NumberSchema
                                                        _7_1 = schemas.NumberSchema
                                                        _7_2 = schemas.NumberSchema
                                                        _7_3 = schemas.NumberSchema
                                                        _7_4 = schemas.NumberSchema
                                                        _7_5 = schemas.NumberSchema
                                                        _8_0 = schemas.NumberSchema
                                                        _8_1 = schemas.NumberSchema
                                                        _8_2 = schemas.NumberSchema
                                                        _8_3 = schemas.NumberSchema
                                                        _8_4 = schemas.NumberSchema
                                                        _9_0 = schemas.NumberSchema
                                                        _9_1 = schemas.NumberSchema
                                                        _9_2 = schemas.NumberSchema
                                                        _9_3 = schemas.NumberSchema
                                                        __annotations__ = {
                                                            "0-0": _0_0,
                                                            "0-1": _0_1,
                                                            "0-2": _0_2,
                                                            "0-3": _0_3,
                                                            "0-4": _0_4,
                                                            "0-5": _0_5,
                                                            "0-6": _0_6,
                                                            "0-7": _0_7,
                                                            "1-0": _1_0,
                                                            "1-1": _1_1,
                                                            "1-2": _1_2,
                                                            "1-3": _1_3,
                                                            "1-4": _1_4,
                                                            "1-5": _1_5,
                                                            "1-6": _1_6,
                                                            "1-7": _1_7,
                                                            "1-8": _1_8,
                                                            "2-0": _2_0,
                                                            "2-1": _2_1,
                                                            "2-2": _2_2,
                                                            "2-3": _2_3,
                                                            "2-4": _2_4,
                                                            "2-5": _2_5,
                                                            "2-6": _2_6,
                                                            "2-7": _2_7,
                                                            "3-0": _3_0,
                                                            "3-1": _3_1,
                                                            "3-2": _3_2,
                                                            "3-3": _3_3,
                                                            "3-4": _3_4,
                                                            "3-5": _3_5,
                                                            "3-6": _3_6,
                                                            "3-7": _3_7,
                                                            "4-0": _4_0,
                                                            "4-1": _4_1,
                                                            "4-2": _4_2,
                                                            "4-3": _4_3,
                                                            "4-4": _4_4,
                                                            "4-5": _4_5,
                                                            "4-6": _4_6,
                                                            "4-7": _4_7,
                                                            "5-0": _5_0,
                                                            "5-1": _5_1,
                                                            "5-2": _5_2,
                                                            "5-3": _5_3,
                                                            "5-4": _5_4,
                                                            "5-5": _5_5,
                                                            "5-6": _5_6,
                                                            "6-0": _6_0,
                                                            "6-1": _6_1,
                                                            "6-2": _6_2,
                                                            "6-3": _6_3,
                                                            "6-4": _6_4,
                                                            "6-5": _6_5,
                                                            "6-6": _6_6,
                                                            "7-0": _7_0,
                                                            "7-1": _7_1,
                                                            "7-2": _7_2,
                                                            "7-3": _7_3,
                                                            "7-4": _7_4,
                                                            "7-5": _7_5,
                                                            "8-0": _8_0,
                                                            "8-1": _8_1,
                                                            "8-2": _8_2,
                                                            "8-3": _8_3,
                                                            "8-4": _8_4,
                                                            "9-0": _9_0,
                                                            "9-1": _9_1,
                                                            "9-2": _9_2,
                                                            "9-3": _9_3,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["0-0"]) -> MetaOapg.properties._0_0: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["0-1"]) -> MetaOapg.properties._0_1: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["0-2"]) -> MetaOapg.properties._0_2: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["0-3"]) -> MetaOapg.properties._0_3: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["0-4"]) -> MetaOapg.properties._0_4: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["0-5"]) -> MetaOapg.properties._0_5: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["0-6"]) -> MetaOapg.properties._0_6: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["0-7"]) -> MetaOapg.properties._0_7: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["1-0"]) -> MetaOapg.properties._1_0: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["1-1"]) -> MetaOapg.properties._1_1: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["1-2"]) -> MetaOapg.properties._1_2: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["1-3"]) -> MetaOapg.properties._1_3: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["1-4"]) -> MetaOapg.properties._1_4: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["1-5"]) -> MetaOapg.properties._1_5: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["1-6"]) -> MetaOapg.properties._1_6: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["1-7"]) -> MetaOapg.properties._1_7: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["1-8"]) -> MetaOapg.properties._1_8: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["2-0"]) -> MetaOapg.properties._2_0: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["2-1"]) -> MetaOapg.properties._2_1: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["2-2"]) -> MetaOapg.properties._2_2: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["2-3"]) -> MetaOapg.properties._2_3: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["2-4"]) -> MetaOapg.properties._2_4: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["2-5"]) -> MetaOapg.properties._2_5: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["2-6"]) -> MetaOapg.properties._2_6: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["2-7"]) -> MetaOapg.properties._2_7: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["3-0"]) -> MetaOapg.properties._3_0: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["3-1"]) -> MetaOapg.properties._3_1: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["3-2"]) -> MetaOapg.properties._3_2: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["3-3"]) -> MetaOapg.properties._3_3: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["3-4"]) -> MetaOapg.properties._3_4: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["3-5"]) -> MetaOapg.properties._3_5: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["3-6"]) -> MetaOapg.properties._3_6: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["3-7"]) -> MetaOapg.properties._3_7: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["4-0"]) -> MetaOapg.properties._4_0: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["4-1"]) -> MetaOapg.properties._4_1: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["4-2"]) -> MetaOapg.properties._4_2: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["4-3"]) -> MetaOapg.properties._4_3: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["4-4"]) -> MetaOapg.properties._4_4: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["4-5"]) -> MetaOapg.properties._4_5: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["4-6"]) -> MetaOapg.properties._4_6: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["4-7"]) -> MetaOapg.properties._4_7: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["5-0"]) -> MetaOapg.properties._5_0: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["5-1"]) -> MetaOapg.properties._5_1: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["5-2"]) -> MetaOapg.properties._5_2: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["5-3"]) -> MetaOapg.properties._5_3: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["5-4"]) -> MetaOapg.properties._5_4: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["5-5"]) -> MetaOapg.properties._5_5: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["5-6"]) -> MetaOapg.properties._5_6: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["6-0"]) -> MetaOapg.properties._6_0: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["6-1"]) -> MetaOapg.properties._6_1: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["6-2"]) -> MetaOapg.properties._6_2: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["6-3"]) -> MetaOapg.properties._6_3: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["6-4"]) -> MetaOapg.properties._6_4: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["6-5"]) -> MetaOapg.properties._6_5: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["6-6"]) -> MetaOapg.properties._6_6: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["7-0"]) -> MetaOapg.properties._7_0: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["7-1"]) -> MetaOapg.properties._7_1: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["7-2"]) -> MetaOapg.properties._7_2: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["7-3"]) -> MetaOapg.properties._7_3: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["7-4"]) -> MetaOapg.properties._7_4: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["7-5"]) -> MetaOapg.properties._7_5: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["8-0"]) -> MetaOapg.properties._8_0: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["8-1"]) -> MetaOapg.properties._8_1: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["8-2"]) -> MetaOapg.properties._8_2: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["8-3"]) -> MetaOapg.properties._8_3: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["8-4"]) -> MetaOapg.properties._8_4: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["9-0"]) -> MetaOapg.properties._9_0: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["9-1"]) -> MetaOapg.properties._9_1: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["9-2"]) -> MetaOapg.properties._9_2: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["9-3"]) -> MetaOapg.properties._9_3: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["0-0", "0-1", "0-2", "0-3", "0-4", "0-5", "0-6", "0-7", "1-0", "1-1", "1-2", "1-3", "1-4", "1-5", "1-6", "1-7", "1-8", "2-0", "2-1", "2-2", "2-3", "2-4", "2-5", "2-6", "2-7", "3-0", "3-1", "3-2", "3-3", "3-4", "3-5", "3-6", "3-7", "4-0", "4-1", "4-2", "4-3", "4-4", "4-5", "4-6", "4-7", "5-0", "5-1", "5-2", "5-3", "5-4", "5-5", "5-6", "6-0", "6-1", "6-2", "6-3", "6-4", "6-5", "6-6", "7-0", "7-1", "7-2", "7-3", "7-4", "7-5", "8-0", "8-1", "8-2", "8-3", "8-4", "9-0", "9-1", "9-2", "9-3", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["0-0"]) -> typing.Union[MetaOapg.properties._0_0, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["0-1"]) -> typing.Union[MetaOapg.properties._0_1, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["0-2"]) -> typing.Union[MetaOapg.properties._0_2, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["0-3"]) -> typing.Union[MetaOapg.properties._0_3, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["0-4"]) -> typing.Union[MetaOapg.properties._0_4, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["0-5"]) -> typing.Union[MetaOapg.properties._0_5, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["0-6"]) -> typing.Union[MetaOapg.properties._0_6, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["0-7"]) -> typing.Union[MetaOapg.properties._0_7, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["1-0"]) -> typing.Union[MetaOapg.properties._1_0, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["1-1"]) -> typing.Union[MetaOapg.properties._1_1, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["1-2"]) -> typing.Union[MetaOapg.properties._1_2, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["1-3"]) -> typing.Union[MetaOapg.properties._1_3, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["1-4"]) -> typing.Union[MetaOapg.properties._1_4, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["1-5"]) -> typing.Union[MetaOapg.properties._1_5, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["1-6"]) -> typing.Union[MetaOapg.properties._1_6, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["1-7"]) -> typing.Union[MetaOapg.properties._1_7, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["1-8"]) -> typing.Union[MetaOapg.properties._1_8, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["2-0"]) -> typing.Union[MetaOapg.properties._2_0, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["2-1"]) -> typing.Union[MetaOapg.properties._2_1, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["2-2"]) -> typing.Union[MetaOapg.properties._2_2, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["2-3"]) -> typing.Union[MetaOapg.properties._2_3, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["2-4"]) -> typing.Union[MetaOapg.properties._2_4, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["2-5"]) -> typing.Union[MetaOapg.properties._2_5, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["2-6"]) -> typing.Union[MetaOapg.properties._2_6, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["2-7"]) -> typing.Union[MetaOapg.properties._2_7, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["3-0"]) -> typing.Union[MetaOapg.properties._3_0, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["3-1"]) -> typing.Union[MetaOapg.properties._3_1, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["3-2"]) -> typing.Union[MetaOapg.properties._3_2, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["3-3"]) -> typing.Union[MetaOapg.properties._3_3, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["3-4"]) -> typing.Union[MetaOapg.properties._3_4, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["3-5"]) -> typing.Union[MetaOapg.properties._3_5, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["3-6"]) -> typing.Union[MetaOapg.properties._3_6, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["3-7"]) -> typing.Union[MetaOapg.properties._3_7, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["4-0"]) -> typing.Union[MetaOapg.properties._4_0, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["4-1"]) -> typing.Union[MetaOapg.properties._4_1, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["4-2"]) -> typing.Union[MetaOapg.properties._4_2, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["4-3"]) -> typing.Union[MetaOapg.properties._4_3, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["4-4"]) -> typing.Union[MetaOapg.properties._4_4, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["4-5"]) -> typing.Union[MetaOapg.properties._4_5, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["4-6"]) -> typing.Union[MetaOapg.properties._4_6, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["4-7"]) -> typing.Union[MetaOapg.properties._4_7, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["5-0"]) -> typing.Union[MetaOapg.properties._5_0, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["5-1"]) -> typing.Union[MetaOapg.properties._5_1, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["5-2"]) -> typing.Union[MetaOapg.properties._5_2, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["5-3"]) -> typing.Union[MetaOapg.properties._5_3, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["5-4"]) -> typing.Union[MetaOapg.properties._5_4, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["5-5"]) -> typing.Union[MetaOapg.properties._5_5, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["5-6"]) -> typing.Union[MetaOapg.properties._5_6, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["6-0"]) -> typing.Union[MetaOapg.properties._6_0, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["6-1"]) -> typing.Union[MetaOapg.properties._6_1, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["6-2"]) -> typing.Union[MetaOapg.properties._6_2, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["6-3"]) -> typing.Union[MetaOapg.properties._6_3, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["6-4"]) -> typing.Union[MetaOapg.properties._6_4, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["6-5"]) -> typing.Union[MetaOapg.properties._6_5, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["6-6"]) -> typing.Union[MetaOapg.properties._6_6, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["7-0"]) -> typing.Union[MetaOapg.properties._7_0, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["7-1"]) -> typing.Union[MetaOapg.properties._7_1, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["7-2"]) -> typing.Union[MetaOapg.properties._7_2, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["7-3"]) -> typing.Union[MetaOapg.properties._7_3, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["7-4"]) -> typing.Union[MetaOapg.properties._7_4, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["7-5"]) -> typing.Union[MetaOapg.properties._7_5, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["8-0"]) -> typing.Union[MetaOapg.properties._8_0, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["8-1"]) -> typing.Union[MetaOapg.properties._8_1, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["8-2"]) -> typing.Union[MetaOapg.properties._8_2, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["8-3"]) -> typing.Union[MetaOapg.properties._8_3, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["8-4"]) -> typing.Union[MetaOapg.properties._8_4, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["9-0"]) -> typing.Union[MetaOapg.properties._9_0, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["9-1"]) -> typing.Union[MetaOapg.properties._9_1, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["9-2"]) -> typing.Union[MetaOapg.properties._9_2, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["9-3"]) -> typing.Union[MetaOapg.properties._9_3, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["0-0", "0-1", "0-2", "0-3", "0-4", "0-5", "0-6", "0-7", "1-0", "1-1", "1-2", "1-3", "1-4", "1-5", "1-6", "1-7", "1-8", "2-0", "2-1", "2-2", "2-3", "2-4", "2-5", "2-6", "2-7", "3-0", "3-1", "3-2", "3-3", "3-4", "3-5", "3-6", "3-7", "4-0", "4-1", "4-2", "4-3", "4-4", "4-5", "4-6", "4-7", "5-0", "5-1", "5-2", "5-3", "5-4", "5-5", "5-6", "6-0", "6-1", "6-2", "6-3", "6-4", "6-5", "6-6", "7-0", "7-1", "7-2", "7-3", "7-4", "7-5", "8-0", "8-1", "8-2", "8-3", "8-4", "9-0", "9-1", "9-2", "9-3", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'scores':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            home = schemas.NumberSchema
                                            draw = schemas.NumberSchema
                                            away = schemas.NumberSchema
                                            __annotations__ = {
                                                "true": _true,
                                                "false": _false,
                                                "scores": scores,
                                                "home": home,
                                                "draw": draw,
                                                "away": away,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["true"]) -> MetaOapg.properties._true: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["false"]) -> MetaOapg.properties._false: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["scores"]) -> MetaOapg.properties.scores: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["home"]) -> MetaOapg.properties.home: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["draw"]) -> MetaOapg.properties.draw: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["away"]) -> MetaOapg.properties.away: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["true", "false", "scores", "home", "draw", "away", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["true"]) -> typing.Union[MetaOapg.properties._true, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["false"]) -> typing.Union[MetaOapg.properties._false, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["scores"]) -> typing.Union[MetaOapg.properties.scores, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["home"]) -> typing.Union[MetaOapg.properties.home, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["draw"]) -> typing.Union[MetaOapg.properties.draw, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["away"]) -> typing.Union[MetaOapg.properties.away, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["true", "false", "scores", "home", "draw", "away", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        scores: typing.Union[MetaOapg.properties.scores, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        home: typing.Union[MetaOapg.properties.home, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                        draw: typing.Union[MetaOapg.properties.draw, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                        away: typing.Union[MetaOapg.properties.away, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'predictions':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            scores=scores,
                                            home=home,
                                            draw=draw,
                                            away=away,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                type_id = schemas.NumberSchema
                                __annotations__ = {
                                    "id": id,
                                    "fixture_id": fixture_id,
                                    "predictions": predictions,
                                    "type_id": type_id,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["fixture_id"]) -> MetaOapg.properties.fixture_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["predictions"]) -> MetaOapg.properties.predictions: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["type_id"]) -> MetaOapg.properties.type_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "fixture_id", "predictions", "type_id", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["fixture_id"]) -> typing.Union[MetaOapg.properties.fixture_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["predictions"]) -> typing.Union[MetaOapg.properties.predictions, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["type_id"]) -> typing.Union[MetaOapg.properties.type_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "fixture_id", "predictions", "type_id", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            fixture_id: typing.Union[MetaOapg.properties.fixture_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            predictions: typing.Union[MetaOapg.properties.predictions, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            type_id: typing.Union[MetaOapg.properties.type_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                id=id,
                                fixture_id=fixture_id,
                                predictions=predictions,
                                type_id=type_id,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'data':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class pagination(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        count = schemas.NumberSchema
                        per_page = schemas.NumberSchema
                        current_page = schemas.NumberSchema
                        
                        
                        class next_page(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            def __new__(
                                cls,
                                *args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'next_page':
                                return super().__new__(
                                    cls,
                                    *args,
                                    _configuration=_configuration,
                                )
                        has_more = schemas.BoolSchema
                        __annotations__ = {
                            "count": count,
                            "per_page": per_page,
                            "current_page": current_page,
                            "next_page": next_page,
                            "has_more": has_more,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["per_page"]) -> MetaOapg.properties.per_page: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["current_page"]) -> MetaOapg.properties.current_page: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["next_page"]) -> MetaOapg.properties.next_page: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["has_more"]) -> MetaOapg.properties.has_more: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["count", "per_page", "current_page", "next_page", "has_more", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["per_page"]) -> typing.Union[MetaOapg.properties.per_page, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["current_page"]) -> typing.Union[MetaOapg.properties.current_page, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["next_page"]) -> typing.Union[MetaOapg.properties.next_page, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["has_more"]) -> typing.Union[MetaOapg.properties.has_more, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["count", "per_page", "current_page", "next_page", "has_more", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    per_page: typing.Union[MetaOapg.properties.per_page, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    current_page: typing.Union[MetaOapg.properties.current_page, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    next_page: typing.Union[MetaOapg.properties.next_page, None, str, schemas.Unset] = schemas.unset,
                    has_more: typing.Union[MetaOapg.properties.has_more, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'pagination':
                    return super().__new__(
                        cls,
                        *args,
                        count=count,
                        per_page=per_page,
                        current_page=current_page,
                        next_page=next_page,
                        has_more=has_more,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class subscription(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class meta(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            
                                            
                                            class trial_ends_at(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'trial_ends_at':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        _configuration=_configuration,
                                                    )
                                            
                                            
                                            class ends_at(
                                                schemas.StrBase,
                                                schemas.NoneBase,
                                                schemas.Schema,
                                                schemas.NoneStrMixin
                                            ):
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *args: typing.Union[None, str, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'ends_at':
                                                    return super().__new__(
                                                        cls,
                                                        *args,
                                                        _configuration=_configuration,
                                                    )
                                            __annotations__ = {
                                                "trial_ends_at": trial_ends_at,
                                                "ends_at": ends_at,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["trial_ends_at"]) -> MetaOapg.properties.trial_ends_at: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["ends_at"]) -> MetaOapg.properties.ends_at: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["trial_ends_at", "ends_at", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["trial_ends_at"]) -> typing.Union[MetaOapg.properties.trial_ends_at, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["ends_at"]) -> typing.Union[MetaOapg.properties.ends_at, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["trial_ends_at", "ends_at", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        trial_ends_at: typing.Union[MetaOapg.properties.trial_ends_at, None, str, schemas.Unset] = schemas.unset,
                                        ends_at: typing.Union[MetaOapg.properties.ends_at, None, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'meta':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            trial_ends_at=trial_ends_at,
                                            ends_at=ends_at,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                
                                class plans(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    plan = schemas.StrSchema
                                                    sport = schemas.StrSchema
                                                    category = schemas.StrSchema
                                                    __annotations__ = {
                                                        "plan": plan,
                                                        "sport": sport,
                                                        "category": category,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["plan"]) -> MetaOapg.properties.plan: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["sport"]) -> MetaOapg.properties.sport: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["plan", "sport", "category", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["plan"]) -> typing.Union[MetaOapg.properties.plan, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["sport"]) -> typing.Union[MetaOapg.properties.sport, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["plan", "sport", "category", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                plan: typing.Union[MetaOapg.properties.plan, str, schemas.Unset] = schemas.unset,
                                                sport: typing.Union[MetaOapg.properties.sport, str, schemas.Unset] = schemas.unset,
                                                category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    plan=plan,
                                                    sport=sport,
                                                    category=category,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'plans':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class add_ons(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    add_on = schemas.StrSchema
                                                    sport = schemas.StrSchema
                                                    category = schemas.StrSchema
                                                    __annotations__ = {
                                                        "add_on": add_on,
                                                        "sport": sport,
                                                        "category": category,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["add_on"]) -> MetaOapg.properties.add_on: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["sport"]) -> MetaOapg.properties.sport: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["add_on", "sport", "category", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["add_on"]) -> typing.Union[MetaOapg.properties.add_on, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["sport"]) -> typing.Union[MetaOapg.properties.sport, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["add_on", "sport", "category", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                add_on: typing.Union[MetaOapg.properties.add_on, str, schemas.Unset] = schemas.unset,
                                                sport: typing.Union[MetaOapg.properties.sport, str, schemas.Unset] = schemas.unset,
                                                category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    add_on=add_on,
                                                    sport=sport,
                                                    category=category,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'add_ons':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "meta": meta,
                                    "plans": plans,
                                    "add_ons": add_ons,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["meta"]) -> MetaOapg.properties.meta: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["plans"]) -> MetaOapg.properties.plans: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["add_ons"]) -> MetaOapg.properties.add_ons: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["meta", "plans", "add_ons", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union[MetaOapg.properties.meta, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["plans"]) -> typing.Union[MetaOapg.properties.plans, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["add_ons"]) -> typing.Union[MetaOapg.properties.add_ons, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["meta", "plans", "add_ons", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            meta: typing.Union[MetaOapg.properties.meta, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            plans: typing.Union[MetaOapg.properties.plans, list, tuple, schemas.Unset] = schemas.unset,
                            add_ons: typing.Union[MetaOapg.properties.add_ons, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                meta=meta,
                                plans=plans,
                                add_ons=add_ons,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subscription':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class rate_limit(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        resets_in_seconds = schemas.NumberSchema
                        remaining = schemas.NumberSchema
                        requested_entity = schemas.StrSchema
                        __annotations__ = {
                            "resets_in_seconds": resets_in_seconds,
                            "remaining": remaining,
                            "requested_entity": requested_entity,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["resets_in_seconds"]) -> MetaOapg.properties.resets_in_seconds: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["remaining"]) -> MetaOapg.properties.remaining: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["requested_entity"]) -> MetaOapg.properties.requested_entity: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["resets_in_seconds", "remaining", "requested_entity", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["resets_in_seconds"]) -> typing.Union[MetaOapg.properties.resets_in_seconds, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["remaining"]) -> typing.Union[MetaOapg.properties.remaining, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["requested_entity"]) -> typing.Union[MetaOapg.properties.requested_entity, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["resets_in_seconds", "remaining", "requested_entity", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    resets_in_seconds: typing.Union[MetaOapg.properties.resets_in_seconds, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    remaining: typing.Union[MetaOapg.properties.remaining, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    requested_entity: typing.Union[MetaOapg.properties.requested_entity, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rate_limit':
                    return super().__new__(
                        cls,
                        *args,
                        resets_in_seconds=resets_in_seconds,
                        remaining=remaining,
                        requested_entity=requested_entity,
                        _configuration=_configuration,
                        **kwargs,
                    )
            timezone = schemas.StrSchema
            __annotations__ = {
                "data": data,
                "pagination": pagination,
                "subscription": subscription,
                "rate_limit": rate_limit,
                "timezone": timezone,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pagination"]) -> MetaOapg.properties.pagination: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscription"]) -> MetaOapg.properties.subscription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate_limit"]) -> MetaOapg.properties.rate_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["data", "pagination", "subscription", "rate_limit", "timezone", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pagination"]) -> typing.Union[MetaOapg.properties.pagination, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscription"]) -> typing.Union[MetaOapg.properties.subscription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate_limit"]) -> typing.Union[MetaOapg.properties.rate_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["data", "pagination", "subscription", "rate_limit", "timezone", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        data: typing.Union[MetaOapg.properties.data, list, tuple, schemas.Unset] = schemas.unset,
        pagination: typing.Union[MetaOapg.properties.pagination, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        subscription: typing.Union[MetaOapg.properties.subscription, list, tuple, schemas.Unset] = schemas.unset,
        rate_limit: typing.Union[MetaOapg.properties.rate_limit, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SportPredictionsByFixtureIdResponse':
        return super().__new__(
            cls,
            *args,
            data=data,
            pagination=pagination,
            subscription=subscription,
            rate_limit=rate_limit,
            timezone=timezone,
            _configuration=_configuration,
            **kwargs,
        )
